{"version":3,"sources":["interpreter.js","header.js","prettyprint.js","App.js","serviceWorker.js","index.js"],"names":["RVAR_T","RAPP_T","RFUNCT_T","RNUM_T","RBOOL_T","RSTRING_T","RLIST_T","RSYM_T","initEnv","name","binding","type","value","args","forEach","cur","typeCheck","reduce","acc","length","firstArg","secondArg","car","cdr","Error","a","d","reverse","arg","thirdArg","isnull","val","parse","text","varRE","numRE","boolRE","strRE","test","numStr","match","rest","slice","trim","prog","boolStr","toLowerCase","matches","parseFunct","funct","parseArg","concat","Object","toConsumableArray","parseQ","symRE","listArr","num","bool","charAt","str","sym","SyntaxError","interp","env","variable","undefined","ReferenceError","lookup","map","TypeError","unparse_cons","join","unparse_list","elems","parseCheck","parsed","typeString","gray","pink","yellow","allBools","progs","every","isBooleanFormula","formula","outputs","thenChildren","nil","string","String","line","union","docL","docR","left","right","compose","nest","i","doc","indent","group","flatten","makePretty","width","ribbon","best","thisRibbon","current","fits","deltaWidth","deltaRibbon","better","layout","repeat","putSpace","putLine","folddoc","f","docs","splice","spread","stack","level","toBSL","program","unparse","pretty","table","inputToDoc","params","param","checkExpects","examples","example","inputs","input","want","body","formulas","formulaToDoc","children","dryRun","yo","imgPath","keyCount","takeKey","peekKey","lookahead","deepEquals","proga","progb","functCheck","argCheck","arga","elem","RemButton","props","react_default","createElement","className","style","src","alt","title","onClick","ValidatedInput","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","textChange","bind","assertThisInitialized","e","target","setState","isValid","onValid","dummy","onEmpty","size","placeholder","Math","max","onChange","React","Component","Succinct","tableChange","newTab","oldTab","alteredTabs","tables","indexOf","programChange","validName","modTab","tableVars","filter","otherTab","paramVars","reals","key","App_ValidatedInput","objectSpread","deadTab","aliveTabs","remTable","SuccinctTab","tableNames","formulasChange","SuccinctHead","paramsExamplesChange","SuccinctBody","paramNames","examplesFormulasChange","validProg","isgood","formulaChange","newForm","oldForm","alteredForms","form","countWidth","child","abyss","maxDepth","curMax","numParams","colSpan","deadForm","aliveForms","remFormula","_","countUp","depth","DepictFormula","numExamples","Parameters","validParam","modParam","paramChange","newParam","alteredParams","alteredExamples","deadParam","deadIndex","aliveParams","modExamples","remParam","Fragment","childChange","newChild","modChild","deadChild","aliveChildren","remChild","Array","fill","exampleChange","newExample","oldExample","exists","addAnotherOutputToFormula","deadExample","aliveExamples","removeOutputFromFormula","remExample","Inputs","inputsChange","Outputs","row","Want","wantChange","inputChange","newInput","oldInput","alteredInputs","TestCell","output","error","img","message","float","App","_this2","makeLookup","expr","lookups","globalEnv","calcFormula","localEnv","subExamples","maybeSpecial","newFormula","newProg","calkedProg","calculate","_this3","id","onInput","defaultChecked","htmlFor","rows","cols","readOnly","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e1a23db6.chunk.js","sourcesContent":["\n/****************\n   Interpreter\n****************/\n\nconst RVAR_T =    0;\nconst RAPP_T =    1;\nconst RFUNCT_T =   2;\nconst RNUM_T =    3;\nconst RBOOL_T =   4;\nconst RSTRING_T = 5;\nconst RLIST_T =   6;\nconst RSYM_T =    7;\n\nconst initEnv = [\n    // functions\n    {name: '+', binding: {type: RFUNCT_T,\n                          value: plus}},\n    {name: '-', binding: {type: RFUNCT_T,\n                          value: minus}},\n    {name: '*', binding: {type: RFUNCT_T,\n                          value: times}},\n    {name: '/', binding: {type: RFUNCT_T,\n                          value: divide}},\n    {name: 'car', binding: {type: RFUNCT_T,\n                            value: car}},\n    {name: 'first', binding: {type: RFUNCT_T,\n                              value: car}},\n    {name: 'cdr', binding: {type: RFUNCT_T,\n                            value: cdr}},\n    {name: 'rest', binding: {type: RFUNCT_T,\n                             value: cdr}},\n    {name: 'cons', binding: {type: RFUNCT_T,\n                             value: cons}},\n    {name: 'list', binding: {type: RFUNCT_T,\n                             value: list}},\n    {name: 'not', binding: {type: RFUNCT_T,\n                            value: not}},\n    {name: 'and', binding: {type: RFUNCT_T,\n                            value: and}},\n    {name: 'or', binding: {type: RFUNCT_T,\n                           value: or}},\n    {name: 'if', binding: {type: RFUNCT_T,\n                           value: rif}},\n    {name: 'eqv?', binding: {type: RFUNCT_T,\n                             value: iseqv}},\n    {name: 'null?', binding: {type: RFUNCT_T,\n                              value: isnull}},\n    {name: 'empty?', binding: {type: RFUNCT_T,\n                               value: isnull}},\n    {name: 'cons?', binding: {type: RFUNCT_T,\n                               value: iscons}},\n    {name: '=', binding: {type: RFUNCT_T,\n                          value: equalsign}},\n    {name: '>', binding: {type: RFUNCT_T,\n                          value: gtsign}},\n    {name: '>=', binding: {type: RFUNCT_T,\n                           value: gesign}},\n    {name: '<', binding: {type: RFUNCT_T,\n                          value: ltsign}},\n    {name: '<=', binding: {type: RFUNCT_T,\n                           value: lesign}},\n    // constants\n    {name: 'true', binding: {type: RBOOL_T,\n                             value: true}},\n    {name: 'false', binding: {type: RBOOL_T,\n                              value: false}},\n    {name: 'null', binding: {type: RLIST_T,\n                             value: null}},\n    {name: 'empty', binding: {type: RLIST_T,\n                              value: null}},\n];\n\n// String -> {prog: Program, rest: String}\n// parses all expressions except quoted expressions\nfunction parse(text) {\n    const varRE = /^[^\\s\",'`()[\\]{}|;#]+/; // except numbers\n    const appRE = /^\\(/;\n    const numRE = /^-?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?=$|[\\s\",'`()[\\]{}|;#])/; // this one doesn't permit fractions\n    const boolRE = /^#(?:[tfTF]|true|false)(?=$|[\\s\",'`()[\\]{}|;#])/;\n    const strRE = /^\"[^\\\\\"]*\"/; // TODO: handle backslash escape\n    const quoteRE = /^'/;\n\n    if (numRE.test(text)) {\n        let matches = text.match(numRE);\n        let numStr = matches[0];\n        let rest = text.slice(numStr.length).trim();\n        let num = {value: +numStr, type: RNUM_T};\n\n        return {prog: num, rest: rest};\n    } else if (varRE.test(text)) {\n        let matches = text.match(varRE);\n        let name = matches[0];\n        let rest = text.slice(name.length).trim();\n        let variable = {value: name, type: RVAR_T};\n\n        return {prog: variable, rest: rest};\n\n\n    } else if (boolRE.test(text)) {\n        let matches = text.match(boolRE);\n        let boolStr = matches[0];\n        let rest = text.slice(boolStr.length).trim();\n        let bool = {value: boolStr[1].toLowerCase() === 't', type: RBOOL_T};\n\n        return {prog: bool, rest: rest};\n\n    } else if (strRE.test(text)) {\n        let matches = text.match(strRE);\n        let str = {value: matches[0], type: RSTRING_T};\n        let rest = text.slice(matches[0].length).trim();\n\n        return {prog: str, rest: rest};\n\n    } else if (appRE.test(text)) {\n        text = text.slice(1).trim(); // remove open paren\n        let parseFunct = parse(text); // parse function\n        let funct = parseFunct.prog; // get function\n        text = parseFunct.rest; // get past function\n        let args = [];\n\n        while (text[0] !== ')') {\n            let parseArg = parse(text);\n            args = [...args, parseArg.prog];\n            text = parseArg.rest;\n        }\n\n        let app = {value: {funct: funct, args: args}, type: RAPP_T};\n        let rest = text.slice(1).trim(); // remove close paren\n\n        return {prog: app, rest: rest};\n\n    } else if (quoteRE.test(text)) {\n        return parseQ(text.slice(1).trim());\n    }\n\n    throw new SyntaxError('Invalid Syntax: \"' + text + '\"');\n}\n\n// String -> {prog: Program, rest: String}\n// parses quoted expressions\nfunction parseQ(text) {\n    const symRE = /^[^\\s\",'`()[\\]{}|;#]+/; // except numbers\n    const listRE = /^\\(/;\n    const numRE = /^-?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?=$|[\\s\",'`()[\\]{}|;#])/; // this one doesn't permit fractions\n    const boolRE = /^#(?:[tfTF]|true|false)(?=$|[\\s\",'`()[\\]{}|;#])/;\n    const strRE = /^\"[^\\\\\"]*\"/;\n\n\n    if (listRE.test(text)) {\n        text = text.slice(1).trim(); // remove quote, open paren\n        let listArr = [];\n\n        while (text[0] !== ')') {\n            let cur = parseQ(text);\n            listArr = [cur.prog, ...listArr]; // listArr is constructed backwards\n            text = cur.rest;\n        }\n\n        let rest = text.slice(1).trim();\n        let prog = listArr.reduce((acc, cur) => ({value: {a: cur, d: acc}, type: RLIST_T}), {value: null, type: RLIST_T}); // turn listArr into an Rlist\n\n        return {prog: prog, rest: rest};\n\n    } else if (numRE.test(text)) {\n        let matches = text.match(numRE);\n        let numStr = matches[0];\n        let rest = text.slice(numStr.length).trim();\n        let num = {value: +numStr, type: RNUM_T};\n\n        return {prog: num, rest: rest};\n\n    } else if (boolRE.test(text)) {\n        let matches = text.match(boolRE);\n        let boolStr = matches[0];\n        let rest = text.slice(boolStr.length).trim();\n        let bool = {value: boolStr.charAt(1).toLowerCase() === 't', type: RBOOL_T};\n\n        return {prog: bool, rest: rest};\n\n    } else if (strRE.test(text)) {\n        let matches = text.match(strRE);\n        let str = {value: matches[0], type: RSTRING_T};\n        let rest = text.slice(matches[0].length).trim();\n\n        return {prog: str, rest: rest};\n\n    } else if (symRE.test(text)) {\n        let matches = text.match(symRE);\n        let value = matches[0];\n        let sym = {value: '\\'' + value, type: RSYM_T}; // TODO value should not be stored with apostrophe\n        let rest = text.slice(matches[0].length).trim();\n\n        return {prog: sym, rest: rest};\n    }\n\n    throw new SyntaxError('Invalid Syntax: \"' + text + '\"');\n}\n\n/***\n    Environment: [Variable]\n    Variable:    {name:    String,\n    binding: Program}\n***/\n\n// Program -> Environment -> Program\nfunction interp(prog, env) {\n    function lookup(name) {\n        let val = env.reduce((acc, variable) => {\n            if (acc !== undefined) {\n                return acc;\n            }\n\n            return variable.name === name ? variable.binding : undefined;\n        }, undefined);\n\n        if (val === undefined){\n            throw new ReferenceError(name + ' isn\\'t defined');\n        }\n\n        return val;\n    }\n\n    switch(prog.type) {\n    case RNUM_T:\n        return prog;\n    case RBOOL_T:\n        return prog;\n    case RSTRING_T:\n        return prog;\n    case RLIST_T:\n        return prog;\n    case RSYM_T:\n        return prog;\n    case RVAR_T:\n        return lookup(prog.value);\n    case RFUNCT_T:\n        return prog;\n    case RAPP_T:\n        // interpret function (valof rator env)\n        let funct = interp(prog.value.funct, env);\n        // interpret arguments (valof rand env)\n        let args = prog.value.args.map((arg) => interp(arg, env));\n\n        typeCheck(funct, RFUNCT_T);\n\n        return funct.value(args);\n\n    default:\n        throw new TypeError(\"Unknown Type \" + prog.value);\n    }\n}\n\n// Program -> String\nfunction unparse_cons(prog) {\n    switch (prog.type) {\n    case RNUM_T:\n        return prog.value;\n    case RBOOL_T:\n        return '#' + (prog.value ? 'true' : 'false');\n    case RSTRING_T:\n        return prog.value;\n    case RLIST_T:\n        if (prog.value === null) {\n            return '\\'()';\n        } else {\n            return `(cons ${unparse_cons(prog.value.a)} ${unparse_cons(prog.value.d)})`;\n        }\n    case RSYM_T:\n        return prog.value;\n    case RVAR_T:\n        return prog.value;\n    case RFUNCT_T:\n        return 'function';\n    case RAPP_T:\n        return `(${unparse_cons(prog.value.funct)} ${prog.value.args.map(unparse_cons).join(' ')})`;\n    default:\n        return 'error or something';\n    }\n}\n\n// Program -> String\nfunction unparse_list (prog) {\n    switch (prog.type) {\n    case RNUM_T:\n        return prog.value;\n    case RBOOL_T:\n        return '#' + (prog.value ? 'true' : 'false');\n    case RSTRING_T:\n        return prog.value;\n    case RLIST_T:\n        let elems = '';\n        while (prog.value !== null) {\n            elems += ' ' + unparse_list(prog.value.a);\n            prog = prog.value.d;\n        }\n        return `(list${elems})`;\n    case RSYM_T:\n        return prog.value;\n    case RVAR_T:\n        return prog.value;\n    case RFUNCT_T:\n        return 'function';\n    case RAPP_T:\n        return `(${unparse_list(prog.value.funct)} ${prog.value.args.map(unparse_list).join(' ')})`;\n    default:\n        return 'error or something';\n    }\n}\n\n// String -> Program\n// parses text and checks for syntax errors based on what's returned\nfunction parseCheck(text) {\n    let parsed = parse(text);\n\n    switch (parsed.rest) {\n    case '':\n        break;\n    default:\n        throw new SyntaxError('Parsing Error');\n    }\n\n    return parsed.prog;\n}\n\n// Program -> Number -> Side Effect Maybe\nfunction typeCheck(prog, type){\n    let typeString = '';\n    switch (type) {\n    case RVAR_T:\n        typeString = 'variable';\n        break;\n    case RAPP_T:\n        typeString = 'application';\n        break;\n    case RFUNCT_T:\n        typeString = 'function';\n        break;\n    case RNUM_T:\n        typeString = 'number';\n        break;\n    case RBOOL_T:\n        typeString = 'boolean';\n        break;\n    case RSTRING_T:\n        typeString = 'string';\n        break;\n    case RLIST_T:\n        typeString = 'list';\n        break;\n    case RSYM_T:\n        typeString = 'symbol';\n        break;\n    default:\n        typeString = '???';\n    }\n\n    if (prog.type !== type){\n        // TODO maybe change me to use whatever unpareser is currently being used somehow\n        throw new TypeError(unparse_cons(prog) + ' ain\\'t a ' + typeString);\n    }\n}\n\nfunction plus(args) {\n    args.forEach((cur) => typeCheck(cur, RNUM_T));\n\n    return args.reduce((acc, cur) => {\n        return {value: acc.value + cur.value,\n                type: RNUM_T};\n    });\n}\nfunction minus(args) {\n    args.forEach((cur) => typeCheck(cur, RNUM_T));\n\n    return args.reduce((acc, cur) => {\n        return {value: acc.value - cur.value,\n                type: RNUM_T};\n    });\n}\nfunction times(args) {\n    args.forEach((cur) => typeCheck(cur, RNUM_T));\n\n    return args.reduce((acc, cur) => {\n        return {value: acc.value * cur.value,\n                type: RNUM_T};\n    });\n}\nfunction divide(args) {\n    if (args.length === 1) {\n        let firstArg = args[0];\n\n        typeCheck(firstArg, RNUM_T);\n\n        return {value: 1 / firstArg.value,\n                type: RNUM_T};\n    } else if (args.length === 2) {\n        let firstArg = args[0];\n        let secondArg = args[1];\n\n        typeCheck(firstArg, RNUM_T);\n        typeCheck(secondArg, RNUM_T);\n\n        return {value: firstArg.value / secondArg.value,\n                type: RNUM_T};\n    }\n\n    args.forEach((cur) => typeCheck(cur, RNUM_T));\n    return {value: false, type: RBOOL_T};\n}\nfunction car(args) {\n    if (args.length !== 1) {\n        throw new Error('arity mismatch');\n    }\n\n    let firstArg = args[0];\n\n    typeCheck(firstArg, RLIST_T);\n\n    return firstArg.value.a;\n}\nfunction cdr(args) {\n    if (args.length !== 1) {\n        throw new Error('arity mismatch');\n    }\n\n    let firstArg = args[0];\n\n    typeCheck(firstArg, RLIST_T);\n\n    return firstArg.value.d;\n}\nfunction cons(args) {\n    if (args.length !== 2) {\n        throw new Error('arity mismatch');\n    }\n\n    let firstArg = args[0];\n    let secondArg = args[1];\n\n    // because BSL\n    typeCheck(secondArg, RLIST_T);\n\n    return {value: {a: firstArg, d: secondArg},\n            type: RLIST_T};\n}\nfunction list(args) {\n    return args.reverse().reduce((acc, arg) => ({value: {a: arg, d: acc},\n                                                       type: RLIST_T}),\n                                       {value: null,\n                                        type: RLIST_T});\n}\nfunction not(args) {\n    if (args.length !== 1) {\n        throw new Error('arity mismatch');\n    }\n\n    let firstArg = args[0];\n\n    return {value: firstArg.value === false,\n            type: RBOOL_T};\n}\nfunction iseqv(args) {\n    if (args.length !== 2) {\n        throw new Error('arity mismatch');\n    }\n\n    let firstArg = args[0];\n    let secondArg = args[1];\n\n    return {value: firstArg.value === secondArg.value,\n            type: RBOOL_T};\n}\nfunction and(args) {\n    return args.reduce((acc, cur) => {\n        return acc.value !== false ? cur : {value: false, type: RBOOL_T};\n    }, {value: true, type: RBOOL_T});\n\n}\nfunction or(args) {\n    return args.reduce((acc, cur) => {\n        return acc.value !== false ? acc : cur;\n    }, {value: true, type: RBOOL_T});\n\n}\nfunction rif(args) {\n    if (args.length !== 3) {\n        throw new Error('arity mismatch');\n    }\n\n    let firstArg = args[0];\n    let secondArg = args[1];\n    let thirdArg = args[2];\n\n    typeCheck(firstArg, RBOOL_T);\n\n    return firstArg.value ? secondArg : thirdArg;\n}\nfunction isnull(args) {\n    if (args.length !== 1) {\n        throw new Error('arity mismatch');\n    }\n\n    let firstArg = args[0];\n\n    return {value: firstArg.value === null && firstArg.type === RLIST_T,\n            type: RBOOL_T};\n}\nfunction iscons(args) {\n    if (args.length !== 1) {\n        throw new Error('arity mismatch');\n    }\n\n    let firstArg = args[0];\n\n    return {value: firstArg.value !== null && firstArg.type === RLIST_T,\n            type: RBOOL_T};\n}\nfunction equalsign(args) {\n    args.forEach((cur) => typeCheck(cur, RNUM_T));\n\n    let val = args.reduce((acc, cur) => {\n\n        if (acc.value === false) {\n            return {value: false, type: RBOOL_T};\n        }\n\n        return acc.value===cur.value ? acc : {value: false, type: RBOOL_T};\n    });\n\n    if (val.value === false){\n        return val;\n    } else {\n        return {value: true, type: RBOOL_T};\n    }\n}\nfunction gtsign(args) {\n    args.forEach((cur) => typeCheck(cur, RNUM_T));\n\n    let val = args.reduce((acc, cur) => {\n\n        if (acc.value === false) {\n            return {value: false, type: RBOOL_T};\n        }\n\n        return acc.value > cur.value ? acc : {value: false, type: RBOOL_T};\n    });\n\n    if (val.value === false){\n        return val;\n    } else {\n        return {value: true, type: RBOOL_T};\n    }\n}\nfunction gesign(args) {\n    args.forEach((cur) => typeCheck(cur, RNUM_T));\n\n    let val = args.reduce((acc, cur) => {\n\n        if (acc.value === false) {\n            return {value: false, type: RBOOL_T};\n        }\n\n        return acc.value >= cur.value ? acc : {value: false, type: RBOOL_T};\n    });\n\n    if (val.value === false){\n        return val;\n    } else {\n        return {value: true, type: RBOOL_T};\n    }\n}\nfunction ltsign(args) {\n    args.forEach((cur) => typeCheck(cur, RNUM_T));\n\n    let val = args.reduce((acc, cur) => {\n\n        if (acc.value === false) {\n            return {value: false, type: RBOOL_T};\n        }\n\n        return acc.value < cur.value ? acc : {value: false, type: RBOOL_T};\n    });\n\n    if (val.value === false){\n        return val;\n    } else {\n        return {value: true, type: RBOOL_T};\n    }\n}\nfunction lesign(args) {\n    args.forEach((cur) => typeCheck(cur, RNUM_T));\n\n    let val = args.reduce((acc, cur) => {\n\n        if (acc.value === false) {\n            return {value: false, type: RBOOL_T};\n        }\n\n        return acc.value <= cur.value ? acc : {value: false, type: RBOOL_T};\n    });\n\n    if (val.value === false){\n        return val;\n    } else {\n        return {value: true, type: RBOOL_T};\n    }\n}\n\nexport {interp, parseCheck, unparse_cons, unparse_list, initEnv, RVAR_T, RAPP_T, RFUNCT_T, RNUM_T, RBOOL_T, RSTRING_T, RLIST_T, RSYM_T};\n","import {RBOOL_T} from './interpreter.js';\n\n/************\n    Colors\n************/\n\n// value to put in child formulas that don't have an output for that row\nexport const gray = {gray: 'gray'};\n// value to put in child formulas that have an error output for that row (non-boolean and non-gray)\nexport const pink = {pink: 'pink'};\n// value that indicates an uninitialized input\nexport const yellow = {yellow: 'yellow'};\n\n/*********************\n   Functions I Want\n*********************/\n// [Program] -> Boolean\n// returns true if progs has at least one member and all of its members are boooleans\n//    otherwise returns false\nexport function allBools(progs){\n    if (progs.length === 0) {\n        return false;\n    }\n\n    return progs.every((prog) => prog.type === RBOOL_T || prog === gray);\n}\n\nexport function isBooleanFormula(formula) {\n    return allBools(formula.outputs) || formula.thenChildren !== undefined;\n}\n\n","import {yellow, isBooleanFormula} from './header.js';\n\n/*********************\n    Pretty Printer\n*********************/\n\n/***\n  Data Definitions\n  \n  A Doc is one of\n    - Nil\n    - Compose\n    - Nest\n    - Text\n    - Line\n    - Union\n  \n  A Nil is\n    {type: 'nil'}\n    \n  A Compose is\n    {type: 'compose',\n     left: Doc,\n     right: Doc}\n     \n  A Nest is\n    {type:   'nest',\n     indent: Integer,\n     rest:   Doc}\n\n  A Text is\n     {type: 'text',\n      text: String}\n      \n  A Line is\n    {type: 'line'}\n     \n  A Union is\n    {type:  'union',\n     left:  Doc,\n     right: Doc}\n     \n  A Pair is\n    {doc:    Doc,\n     indent: Integer}\n***/\n\n// Doc\nconst nil = {type: 'nil'};\n\n// String -> Doc\nfunction text (string) {\n    if (string === '') {\n        return nil;\n    } else {\n        return {type: 'text', text: String(string)};\n    }\n}\n\n// String -> Doc -> Doc\nfunction Text (string, doc) {\n    return compose(text(string), doc);\n}\n\n// Doc\nconst line = {type: 'line'};\n\n// Integer -> Doc -> Doc\nfunction Line (i, doc) {\n    return compose(nest(i, line), doc);\n}\n\n// Doc -> Doc -> Doc\nfunction union (docL, docR) {\n    return {type: 'union', left: docL, right: docR};\n}\n\nfunction Union (docL, docR) {\n    return union(docL, docR);\n}\n\n// Doc -> Doc -> Doc\n// in the paper this is written as <> and is sometimes called 'concatenate'\n//   I prefer the name 'compose' so as to confuse the term with\n//   string concatenation\n// however it may be confused with function composition...\nfunction compose (docL, docR) {\n    // switch(docR.type) {\n    // case 'union':\n    //     return union(compose(docL, docR.left), compose(docL, docR.right));\n    // default:\n    //     break;\n    // }\n    switch (docL.type) {\n    case 'nil':\n        return docR;\n    case 'compose':\n        return {type: 'compose', left: docL.left, right: compose(docL.right, docR)};\n    case 'union':\n        return union(compose(docL.left, docR), compose(docL.right, docR));\n    default:\n        return {type: 'compose', left: docL, right: docR};\n    }\n}\n\n// Integer -> Doc -> Doc\nfunction nest (i, doc) {\n    switch (doc.type) {\n    case 'nil':\n        return nil;\n    case 'compose':\n        return compose(nest(i, doc.left), nest(i, doc.right));\n    case 'nest':\n        return {type: 'nest', indent: doc.indent + i, rest: doc.rest};\n    case 'text':\n        return doc;\n    case 'line':\n        return {type: 'nest', indent: i, rest: doc};\n    case 'union':\n        return union(nest(i, doc.left), nest(i, doc.right));\n    default:\n        throw Error(`unnexpected document type: ${doc.type}`);\n    }\n}\n\n// Doc -> String\nfunction layout (doc) {\n    switch (doc.type) {\n    case 'nil':\n        return '';\n    case 'compose':\n        return layout(doc.left) + layout(doc.right);\n    case 'nest':\n        return layout(doc.rest) +  ' '.repeat(doc.indent); // doc.rest has to be a line\n    case 'text':\n        return doc.text;\n    case 'line':\n        return '\\n';\n    default:\n        throw Error(`unnexpected document type: ${doc.type}`);\n    }\n}\n\n// Doc -> Doc\nfunction group (doc) {\n    return union(flatten(doc), doc);\n}\n\n// Doc -> Doc\nfunction flatten (doc) {\n    switch (doc.type) {\n    case 'nil':\n        return nil;\n    case 'compose':\n        return compose(flatten(doc.left), flatten(doc.right));\n    case 'nest':\n        return flatten(doc.rest);\n    case 'text':\n        return text(doc.text);\n    case 'line':\n        return text(' ');\n    case 'union':\n        return flatten(doc.left);\n    default:\n        throw Error(`unnexpected document type: ${doc.type}`);\n    }\n}\n\n// Integer -> Integer -> (Doc -> String)\nfunction makePretty (width, ribbon) {\n\n    // Integer -> Integer -> Doc -> Doc\n    function best (thisRibbon, current, doc) {\n        switch (doc.type) {\n        case 'nil':\n            return nil;\n        case 'compose':\n            switch (doc.left.type) {\n            case 'text':\n                return compose(doc.left, best(thisRibbon, current + doc.left.text.length, doc.right));\n            case 'line':\n                return compose(line, best(ribbon, 0, doc.right));\n            case 'nest':\n                return compose(nest(doc.left.indent, line), best(ribbon + doc.left.indent, doc.left.indent, doc.right));\n            default:\n                throw Error(`unnexpected document type: ${doc.left.type}`);\n            }\n        case 'union':\n            return better(thisRibbon, current,\n                          best(thisRibbon, current, doc.left),\n                          best(thisRibbon, current, doc.right));\n        default:\n            throw Error(`unnexpected document type: ${doc.type}`);\n        }\n    }\n\n    // Integer -> Integer -> Integer -> Doc -> Doc -> Doc\n    function better (thisRibbon, current, docL, docR) {\n        if (fits(width - current, thisRibbon - current, docL)) {\n            return docL;\n        } else {\n            return docR;\n        }\n    }\n\n    // Integer -> Integer -> Doc -> Boolean\n    function fits(deltaWidth, deltaRibbon, doc) {\n        if (deltaWidth < 0 || deltaRibbon < 0) {\n            return false;\n        }\n\n        switch (doc.type) {\n        case 'nil':\n            return true;\n        case 'compose':\n            switch (doc.left.type) {\n            case 'text':\n                return fits(deltaWidth - doc.left.text.length, deltaRibbon - doc.left.text.length, doc.right);\n            case 'line':\n                return true;\n            default:\n                throw Error(`unnexpected document type: ${doc.left.type}`);\n            }\n        default:\n            throw Error(`unnexpected document type: ${doc.type}`);\n        }\n    }\n\n    // Doc -> String\n    function pretty (doc) {\n        return layout(best(ribbon, 0, doc));\n    }\n\n    return pretty;\n}\n\n/***\n   Utility Functions\n                   ***/\n\n// Doc -> Doc -> Doc\nfunction putSpace (docL, docR) {\n    return compose(docL, compose(text(' '), docR));\n}\n\n// Doc -> Doc -> Doc\nfunction putLine (docL, docR) {\n    return compose(docL, compose(line, docR));\n}\n\n// Doc -> Doc -> Doc\nfunction spaceOrLine(docL, docR) {\n    return union(putSpace(docL, docR), putLine(docL, docR));\n}\n\n// (Doc -> Doc -> Doc) -> [Doc] -> Doc\nfunction folddoc (f, docs) {\n    if (docs.length === 0) {\n        return nil;\n    } else if (docs.length === 1) {\n        return docs[0];\n    } else {\n        return f(docs[0], folddoc(f, docs.splice(1)));\n    }\n}\n\n// [Doc] -> Doc\n// puts a space between docs\nfunction spread (docs) {\n    return folddoc(putSpace, docs);\n}\n\n// [Doc] -> Doc\n// puts a line between docs\nfunction stack (docs) {\n    return folddoc(putLine, docs);\n}\n\n// [Doc] -> Doc\n// puts more lines between docs\nfunction superstack (docs) {\n    return folddoc((docL, docR) => compose(docL, compose(line, compose(line, compose(line, docR)))), docs);\n}\n\n// [Doc] -> Doc\n// fills available horizontal space\n// doesn't work in group()s because group() destroys unions\nfunction fill(docs){\n    return folddoc(spaceOrLine, docs);\n}\n\n// [Doc] -> Doc\n// puts docs right next to eachother\nfunction level (docs) {\n    return folddoc(compose, docs);\n}\n\n/**************************************\n    Thing that Turns Tables Into BSL\n**************************************/\n\n// [Table] -> String\nfunction toBSL(program, unparse, width, ribbon) {\n    let pretty = makePretty(width, ribbon);\n    let essaie = superstack([...program.map(tableToDoc), nil]);\n    return pretty(essaie);\n\n    // Table -> Doc\n    function tableToDoc(table) {\n        let name = inputToDoc(table.name);\n        let params = spread(table.params.map((param) => inputToDoc(param.name)));\n\n        let checkExpects = stack(table.examples.map((example) => {\n            let inputs = stack(example.inputs.map((input) => inputToDoc(input.prog)));\n            let want = inputToDoc(example.want);\n\n            return group(nest(1, stack([text('(check-expect'), nest(1, stack([level([text('('), name]), level([inputs, text(')')])])), level([want, text(')')])])));\n        }));\n\n        let body = stack(table.formulas.map(formulaToDoc));\n        let funct = nest(2, group(stack([spread([text('(define'), level([text('('), name]), level([params, text(')')])]), level([body, text(')')])])));\n        return stack([funct, line, checkExpects]);\n    }\n\n    // Formula -> Doc\n    function formulaToDoc(formula) {\n        if (isBooleanFormula(formula)) {\n            let children = spread(formula.thenChildren.map(formulaToDoc));\n            return nest(2, stack([text('(cond'), nest(1, stack([level([text('['), inputToDoc(formula.prog)]), level([children, text('])')])]))]));\n        } else {\n            return inputToDoc(formula.prog);\n        }\n    }\n\n    // Input (yellow or string or program) -> Doc\n    function inputToDoc(input) {\n        if (input === yellow) { // empty\n            return text('...');\n        } else if (typeof input === 'string') { // string\n            return text(input);\n        } else { // program\n            return text(unparse(input));\n        }\n    }\n}\n\n\nexport default toBSL;\n","import React from 'react';\nimport {interp, parseCheck, unparse_cons, unparse_list, initEnv, RAPP_T, RFUNCT_T, RBOOL_T, RLIST_T} from './interpreter.js';\nimport {gray, pink, yellow, allBools, isBooleanFormula} from './header.js';\nimport toBSL from './prettyprint.js';\nimport './App.css';\n\n/*****************************\n  Universal Constants I Want\n*****************************/\n// value to indicate a dry run, i.e. don't actually change the underlying structure, just say\n// if the given value exists or not\nconst dryRun = {yo: 'don\\'t actually change anything'};\n// image path\nconst imgPath = './images/';\n\n\n/*********************\n    Key Management\n*********************/\n// variable used by takeKey and peekKey to generate keys\nlet keyCount = 0;\n\n// Number\n// returns a unique key\nfunction takeKey() {\n    return keyCount++;\n}\n\n// [Number] -> Number (the brackets here mean optional, not array)\n// returns current key without changing it\n// shoud be used to look at current state of key without actually taking it\n// optionally takes a number as an argument, in which case it returns the key that number\n// of steps ahead of the current key\nfunction peekKey(lookahead) {\n    if (lookahead === undefined) {\n        return keyCount;\n    } else {\n        return keyCount + lookahead;\n    }\n}\n\n/**************\n    Unparser\n**************/\nlet unparse = unparse_cons;\n\n/*****************\n    Deep Equals\n*****************/\n// Program -> Program -> Boolean\n// checks if two programs are equivalent, recurs on lists and applications\n// may not quite work on functions because I use js functions, not data represented closures or something\n//    thus 2 functions are only equal if they're a reference to the same object\nfunction deepEquals(proga, progb) {\n    if (proga.type !== progb.type) {\n        return false;\n    }\n\n    if (proga.type === RLIST_T) {\n        if (proga.value === null || progb.value === null) {\n            return proga.value === progb.value;\n        }\n        return deepEquals(proga.value.a, progb.value.a) && deepEquals(proga.value.d, progb.value.d);\n    }\n\n    // this case will prolly never even happen...\n    if (proga.type === RAPP_T) {\n        if (proga.value.args.length !== progb.value.args.length) {\n            return false;\n        }\n        let functCheck = deepEquals(proga.value.funct, progb.value.funct);\n        let argCheck = proga.value.args.map((arga, i) => deepEquals(arga, progb.value.args[i])).every((elem) => elem);\n        return functCheck && argCheck;\n    }\n\n    return proga.value === progb.value;\n}\n\n/*********************\n   React Components\n*********************/\n\n/*** Buttons ***/\n// Button that probably removes something\nfunction RemButton(props){\n    return (\n        <div className='cross_button'>\n          <input\n            type={'image'}\n            style={props.style}\n            src={'./images/smallCross.png'}\n            alt='Remove'\n            title={props.title}\n            onClick={props.onClick}/>\n        </div>\n    );\n}\n\n/*** Inputs ***/\nclass ValidatedInput extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {text: ''};\n\n        this.textChange = this.textChange.bind(this);\n    }\n\n    textChange(e) {\n        let text = e.target.value;\n\n        this.setState((state) => ({text}));\n\n        if (this.props.isValid(text)) {\n            this.props.onValid(text);\n        } else if (text === '' && !this.props.dummy) {\n            this.props.onEmpty();\n        }\n\n    }\n\n    render() {\n        let className;\n        if (this.props.dummy && this.state.text === '') { // empty dummy\n            className = 'dummy_input';\n        } else if (this.props.isValid(this.state.text)) { // valid\n            className = 'valid_input';\n        } else if (this.state.text === '') { // empty non-dummy\n            className = 'empty_input';\n        } else { // invalid\n            className = 'invalid_input';\n        }\n        \n        let size;\n        if (this.state.text.length === 0)\n            size = this.props.placeholder.length;\n        else\n            size = Math.max(this.state.text.length + 2, 4);\n\n        return (\n            <input\n              className={className}\n              size={size}\n              placeholder={this.props.placeholder}\n              type={'text'}\n              value={this.state.text}\n              onChange={this.textChange}\n            />\n        );\n    }\n}\n\n/*** Table Sections ***/\n// let's put everything in one table woo\nfunction Succinct(props) {\n\n    function tableChange(newTab, oldTab) {\n        const exists = props.tables.indexOf(oldTab) !== -1;\n\n        let alteredTabs;\n        if (exists) {\n            alteredTabs = props.tables.map((table) => table === oldTab ? newTab : table);\n        } else {\n            alteredTabs = [...props.tables, newTab];\n        }\n\n        props.programChange(alteredTabs);\n    }\n\n    function remTable(deadTab) {\n        let aliveTabs = props.tables.filter((table) => table !== deadTab);\n        props.programChange(aliveTabs);\n    }\n\n    // String -> Boolean\n    function validName(text, modTab) {\n        function lookup(name, env) {\n            return env.reduce((acc, variable) => {\n                if (acc) {\n                    return true;\n                }\n\n                return variable.name === name;\n\n            }, false);\n        }\n\n        let tableVars = props.tables.filter((table) => table !== modTab).map((otherTab) => ({name: otherTab.name, binding: null}));\n        let paramVars = modTab.params.map((param) => ({name: param, binding: null}));\n        let env = [...initEnv, ...tableVars, ...paramVars];\n\n        const varRE = /^[a-zA-Z+\\-*/?=><]+$/; // change me\n\n        return varRE.test(text) && !lookup(text, env);\n    }\n\n    const reals = props.tables.map((table) => (\n        <div key={table.key} className='table_method' >\n          <div className='full_cell'>\n            <ValidatedInput\n              dummy={false}\n              placeholder='Table Name'\n              isValid={(text) => validName(text, table)}\n              onValid={(text) => tableChange({...table,\n                                              name: text},\n                                             table)}\n              onEmpty={() => tableChange({...table,\n                                          name: yellow},\n                                         table)}\n            />\n            <RemButton\n              onClick={() => remTable(table)}\n              title='Remove this table'\n            />\n          </div>\n          <SuccinctTab\n            table={table}\n            tableNames={props.tables.map((table) => table.name)}\n            tableChange={(newTab) => tableChange(newTab, table)}\n          />\n        </div>\n    ));\n\n    const dummy = (\n        <div key={peekKey()} className='table_method'>\n          <div className='full_cell'>\n            <ValidatedInput\n              dummy={true}\n              placeholder='Table Name'\n              isValid={(text) => validName(text, {params: []})}\n              onValid={(text) => tableChange({name: text,\n                                              examples: [],\n                                              formulas: [],\n                                              params: [],\n                                              key: takeKey()},\n                                             {})}\n            />\n          </div>\n          <SuccinctTab\n            table={{name: yellow,\n                    examples: [],\n                    formulas: [],\n                    params: [],\n                    key: peekKey()}}\n            tableNames={props.tables.map((table) => table.name)}\n            tableChange={(newTab) => tableChange(newTab, {})}\n          />\n        </div>\n    );\n\n    return (\n        <div>\n          {[...reals, dummy]}\n        </div>\n    );\n}\n\nfunction SuccinctTab(props) {\n    function paramsExamplesChange(params, examples) {\n        props.tableChange({...props.table, params, examples});\n    }\n\n    function formulasChange(formulas) {\n        props.tableChange({...props.table, formulas});\n    }\n\n    function examplesFormulasChange(examples, formulas) {\n        props.tableChange({...props.table, examples, formulas});\n    }\n\n    return (\n        <table className={'html_table'}>\n          <SuccinctHead\n            params={props.table.params}\n            examples={props.table.examples}\n            tableNames={props.tableNames}\n            paramsExamplesChange={paramsExamplesChange}\n\n            formulas={props.table.formulas}\n            formulasChange={formulasChange}\n          />\n          <SuccinctBody\n            examples={props.table.examples}\n            formulas={props.table.formulas}\n            paramNames={props.table.params.map((param) => param.name)}\n            examplesFormulasChange={examplesFormulasChange}\n            formulasChange={formulasChange}\n          />\n        </table>\n    );\n}\n\nfunction SuccinctHead(props) {\n    // String -> Boolean\n    // checks if the given string is a valid program\n    function validProg(text) {\n        let isgood = true;\n\n        try {\n            parseCheck(text);\n        } catch(e) {\n            if (e instanceof SyntaxError) {\n                isgood = false;\n            } else { // this should never happen\n                throw e;\n            }\n        }\n\n        return isgood;\n    }\n\n    // Formula -> Side Effect\n    // removes a given formula from the tree\n    function remFormula(deadForm) {\n        const aliveForms = props.formulas.filter((formula) => formula !== deadForm);\n        props.formulasChange(aliveForms);\n    }\n\n    // Formula -> Formula -> Side Effect\n    // replaces one formula with another one\n    function formulaChange(newForm, oldForm) {\n\n        let alteredForms;\n        if (props.formulas.indexOf(oldForm) === -1) {\n            alteredForms = [...props.formulas, newForm];\n        } else {\n            alteredForms = props.formulas.map((form) => form === oldForm ? newForm : form);\n        }\n        props.formulasChange(alteredForms);\n    }\n\n    // Formula -> Number -> Number\n    // gives the maximum depth of a Formula, second parameter is an accumulator\n    function maxDepth(formula, curMax) {\n        if (!isBooleanFormula(formula)) {\n            return curMax;\n        } else {\n            return formula.thenChildren.reduce((acc, child) => Math.max(acc, maxDepth(child, curMax + 1)), curMax + 1);\n        }\n    }\n\n    function countWidth(formula) {\n        if (!isBooleanFormula(formula)) {\n            return 1;\n        } else {\n            return formula.thenChildren.reduce((acc, child) => acc + countWidth(child), 2);\n        }\n    }\n\n\n    // Number -> [Number]\n    // takes a number, returns an array that counts from 1 to that number, input of 0 gives empty array\n    // e.g. countUp(5) -> [1, 2, 3, 4, 5]\n    function countUp(num) {\n        // special case: want an empty array for 0\n        if (num === 0) {\n            return [];\n        } else if (num === 1)\n            return [1];\n        else\n            return [...countUp(num - 1), num];\n    }\n\n    const abyss = props.formulas.reduce((acc, formula) => Math.max(acc, maxDepth(formula, 0)), 0);\n    const numParams = props.params.length;\n\n    const reals = props.formulas.map((formula) => (\n        <th key={formula.key} colSpan={countWidth(formula)} >\n          <div className='full_cell'>\n            <ValidatedInput\n              placeholder={'Formula'}\n              dummy={false}\n              isValid={validProg}\n              onValid={(text) => formulaChange({...formula,\n                                                prog: parseCheck(text)},\n                                               formula)}\n              onEmpty={() => formulaChange({...formula,\n                                            prog: yellow},\n                                           formula)}\n            />\n            <RemButton\n              title={'Remove formula'}\n              onClick={() => remFormula(formula)}\n            />\n          </div>\n        </th>\n    ));\n\n    const dummy = (\n        <th key={peekKey()} colSpan={1}>\n          <div className='full_cell'>\n            <ValidatedInput\n              dummy={true}\n              placeholder='Formula'\n              isValid={validProg}\n              onValid={(text) => formulaChange({prog: parseCheck(text),\n                                                outputs: props.examples.map((_) => yellow),\n                                                key: takeKey()},\n                                               {})}\n            />\n          </div>\n        </th>\n    );\n\n    const children = countUp(abyss).map((depth) => (\n        <tr key={depth}>\n          <th colSpan={numParams + 2}>{/* empty cell to align with example RemButton and Parameters */}</th>\n          {props.formulas.map((formula) => (\n              <DepictFormula\n                key={formula.key}\n                formula={formula}\n                depth={depth}\n                numExamples={props.examples.length}\n                formulaChange={(newForm) => formulaChange(newForm, formula)}\n              />\n          ))}\n        </tr>\n    ));\n\n    return (\n        <thead>\n          <tr>\n            <Parameters\n              params={props.params}\n              examples={props.examples}\n              tableNames={props.tableNames}\n              paramsExamplesChange={props.paramsExamplesChange}\n            />\n            {/* top level formulas */}\n            {[...reals, dummy]}\n          </tr>\n          {/* rest of formulas */}\n          {children}\n        </thead>\n    );\n}\n\nfunction Parameters(props) {\n    // \n    function validParam(text, modParam) {\n        function lookup(name, env) {\n            return env.reduce((acc, variable) => {\n                if (acc) {\n                    return true;\n                }\n\n                return variable.name === name;\n\n            }, false);\n        }\n\n        // These are not technically Variables, see note above\n        let paramVars = props.params.filter((param) => param !== modParam).map((param) => ({name: param.name, binding: null}));\n        let tableVars = props.tableNames.map((name) => ({name: name, binding: null}));\n        let env = [...initEnv, ...tableVars, ...paramVars];\n\n        const varRE = /^[a-zA-Z+\\-*/?=><]+$/; // change me\n\n        return varRE.test(text) && !lookup(text, env);\n    }\n\n    function remParam(deadParam) {\n        const deadIndex = props.params.indexOf(deadParam);\n        const aliveParams = props.params.filter((param) => param !== deadParam);\n\n        // need to maintain #inputs = #params\n        const modExamples = props.examples.map((example => ({...example,\n                                                             inputs: example.inputs.filter((_, i) => i !== deadIndex)})));\n\n        props.paramsExamplesChange(aliveParams, modExamples);\n    }\n\n    // String -> Number -> Side Effect\n    // changes the name of the given parameter\n    // if that parameter doesn't exist yet, it makes it\n    function paramChange(newParam, modParam) {\n\n        let alteredParams, alteredExamples;\n        if (props.params.indexOf(modParam) === -1) {\n            alteredParams = [...props.params, newParam];\n            // need to maintain #inputs = #params\n            alteredExamples = props.examples.map((example) => ({...example,\n                                                                inputs: [...example.inputs, {prog: yellow, key: takeKey()}]}));\n        } else {\n            alteredParams = props.params.map((param) => param === modParam ? newParam : param);\n            // examples don't actually change\n            alteredExamples = props.examples;\n        }\n\n        props.paramsExamplesChange(alteredParams, alteredExamples);\n    }\n\n    const reals = props.params.map((param) => (\n        <th key={param.key} >\n          <div className='full_cell'>\n            <ValidatedInput\n              dummy={false}\n              placeholder='Parameter'\n              isValid={(text) => validParam(text, param)}\n              onValid={(text) => paramChange({...param,\n                                              name: text},\n                                             param)}\n              onEmpty={() => paramChange({...param,\n                                          name: yellow},\n                                         param)}\n            />\n            <RemButton\n              title='remove this parameter'\n              onClick={() => remParam(param)}\n            />\n          </div>\n        </th>\n    ));\n\n    const dummy = (\n        <th key={peekKey()}>\n          <div className='full_cell'>\n            <ValidatedInput\n              dummy={true}\n              placeholder='Parameter'\n              isValid={(text) => validParam(text, {})}\n              onValid={(text) => paramChange({name: text,\n                                              key: takeKey()},\n                                             {})}\n            />\n          </div>\n        </th>\n    );\n\n    return (\n        <React.Fragment>\n          <th>{/* empty cell to align with example RemButtons */}</th>\n          <React.Fragment>\n            {[...reals, dummy]}\n          </React.Fragment>\n        </React.Fragment>\n    );\n}\n\n/*\n  props: formula, depth, kill, formulaChange\n*/\nfunction DepictFormula(props) {\n    function validProg(text) {\n        let isgood = true;\n\n        try {\n            parseCheck(text);\n        } catch(e) {\n            if (e instanceof SyntaxError) {\n                isgood = false;\n            } else {\n                throw e;\n            }\n        }\n\n        return isgood;\n    }\n\n    // this is pretty macabre...\n    function remChild(deadChild) {\n        const aliveChildren = props.formula.thenChildren.filter((child) => child !== deadChild);\n        props.formulaChange({...props.formula, thenChildren: aliveChildren});\n    }\n\n    function childChange(newChild, modChild) {\n        let children;\n        if (props.formula.thenChildren.indexOf(modChild) === -1) {\n            children = [...props.formula.thenChildren, newChild];\n        } else {\n            children = props.formula.thenChildren.map((child) => child === modChild ? newChild : child);\n        }\n        props.formulaChange({...props.formula, thenChildren: children});\n    }\n\n    function countWidth(formula) {\n        if (!isBooleanFormula(formula)) {\n            return 1;\n        } else {\n            return formula.thenChildren.reduce((acc, child) => acc + countWidth(child), 2);\n        }\n    }\n\n    if (props.depth > 1) {\n        return (\n            <React.Fragment>\n              <th>{/* empty cell to align with parent input */}</th>\n              {isBooleanFormula(props.formula) ?\n               <React.Fragment>\n                 {props.formula.thenChildren.map((child) => (\n                     <DepictFormula\n                       key={child.key}\n                       formula={child}\n                       depth={props.depth - 1}\n                       numExamples={props.numExamples}\n                       formulaChange={(formula) => childChange(formula, child)}\n                     />))}\n                 <th>{/* empty cell to align with child input */}</th>\n               </React.Fragment>\n               : <script/> }\n            </React.Fragment>\n        );\n    } else {\n        if (isBooleanFormula(props.formula)) {\n            const reals = props.formula.thenChildren.map((child) => (\n                <th key={child.key} colSpan={countWidth(child)} >\n                  <div className='full_cell'>\n                    <ValidatedInput\n                      dummy={false}\n                      placeholder={'Formula'}\n                      isValid={validProg}\n                      onValid={(text) => childChange({...child,\n                                                      prog: parseCheck(text)},\n                                                     child)}\n                      onEmpty={() => childChange({...child,\n                                                  prog: yellow},\n                                                 child)}\n                    />\n                    <RemButton\n                      title={'Remove formula'}\n                      onClick={() => remChild(child)}\n                    />\n                  </div>\n                </th>\n            ));\n\n            const dummy = (\n                <th key={peekKey()} colSpan={1}>\n                  <div className='full_cell'>\n                    <ValidatedInput\n                      dummy={true}\n                      placeholder='Formula'\n                      isValid={validProg}\n                      onValid={(text) => childChange({prog: parseCheck(text),\n                                                      outputs: Array(props.numExamples).fill(yellow),\n                                                      key: takeKey()},\n                                                     {})}\n                    />\n                  </div>\n                </th>\n            );\n\n            return (\n                <React.Fragment>\n                  <th>{/* empty cell to align with parent input */}</th>\n                   <React.Fragment>\n                     {[...reals, dummy]}\n                   </React.Fragment>\n                </React.Fragment>\n            );\n        } else {\n\n            return (\n                <React.Fragment>\n                  <th>{/* empty cell to align with parent input */}</th>\n                </React.Fragment>\n            );\n        }\n    }\n}\n\nfunction SuccinctBody(props) {\n    function remExample(deadExample) {\n        const deadIndex = props.examples.indexOf(deadExample);\n        // Formula -> Formula\n        // removes the output at deadIndex from the given formula and all of its children (if it has any) so stuff works\n        function removeOutputFromFormula(formula) {\n            let outputs = formula.outputs.filter((_, i) => i !== deadIndex);\n\n            if (isBooleanFormula(formula)) {\n                const thenChildren = formula.thenChildren.map(removeOutputFromFormula);\n                return {...formula,\n                        outputs,\n                        thenChildren};\n            } else {\n                return {...formula,\n                        outputs};\n            }\n        }\n\n\n        const aliveExamples = props.examples.filter((example) => example !== deadExample);\n        const alteredForms = props.formulas.map(removeOutputFromFormula);\n        props.examplesFormulasChange(aliveExamples, alteredForms);\n    }\n\n    function exampleChange(newExample, oldExample) {\n        const exists = props.examples.indexOf(oldExample) !== -1;\n\n        if (newExample === dryRun) {\n            return exists;\n        }\n\n        // Formula -> Formula\n        // adds an init output to the given formula and all of its children (if it has any) so stuff works\n        function addAnotherOutputToFormula(formula) {\n            let outputs = [...formula.outputs, yellow];\n\n            if (isBooleanFormula(formula)) {\n                const thenChildren = formula.thenChildren.map(addAnotherOutputToFormula);\n                return {...formula,\n                        outputs,\n                        thenChildren};\n            } else {\n                return {...formula,\n                        outputs};\n            }\n        }\n\n        let alteredExamples, alteredForms;\n        if (exists) {\n            alteredExamples = props.examples.map((example) => example === oldExample ? newExample : example);\n            alteredForms = props.formulas;\n        } else {\n            alteredExamples = [...props.examples, newExample];\n            alteredForms = props.formulas.map(addAnotherOutputToFormula);\n        }\n\n        props.examplesFormulasChange(alteredExamples, alteredForms);\n        return true; // this doesn't actually do anything\n    }\n\n    const reals = props.examples.map((example, i) => (\n          <tr key={example.key}>\n            <td>\n              <RemButton\n                onClick={() => remExample(example)}\n                title={'Remove this example'}\n              />\n            </td>\n            <Inputs\n              dummy={false}\n              inputs={example.inputs}\n              inputsChange={(inputs) => exampleChange({...example, inputs},\n                                                      example)}\n            />\n            <td>{/* empty cell to align with param dummy input */}</td>\n            <Outputs\n              dummy={false}\n              formulas={props.formulas}\n              want={example.want}\n              row={i}\n            />\n            <td>{/* empty cell to align with top level formula dummy input */}</td>\n            <Want\n              dummy={false}\n              wantChange={(want) => exampleChange({...example, want},\n                                                  example)}\n            />\n          </tr>\n    ));\n    \n    const dummy = (\n          <tr key={peekKey(props.paramNames.length)}>\n            <td>{/* empty cell to offset rembutton */}</td>\n            <Inputs\n              dummy={true}\n              inputs={props.paramNames.map((_, i) => ({key: peekKey(i)}))}\n              inputsChange={(inputs) => exampleChange({inputs,\n                                                       want: yellow,\n                                                       key: takeKey()},\n                                                      {})}\n            />\n            <td>{/* empty cell to align with param dummy input */}</td>\n            <Outputs\n              dummy={true}\n              formulas={props.formulas}\n            />\n            <td>{/* empty cell to align with top level formula dummy input */}</td>\n            <Want\n              dummy={true}\n              wantChange={(want) => exampleChange({want,\n                                                   inputs: props.paramNames.map((_) => ({prog: yellow, key: takeKey()})),\n                                                   key: takeKey()},\n                                                  {})}\n            />\n          </tr>\n    );\n\n    return (\n        <tbody>\n          {[...reals, dummy]}\n        </tbody>\n    );\n}\n\nfunction Inputs(props) {\n    function validProg(text) {\n        try {\n            interp(parseCheck(text), initEnv);\n        } catch(e) {\n            return false;\n        }\n        return true;\n    }\n\n    function inputChange(newInput, oldInput) {\n        let alteredInputs;\n        if (props.dummy) {\n            alteredInputs = props.inputs.map((input) => input === oldInput ? {...newInput, key: takeKey()} : {prog: yellow, key: takeKey()});\n        } else {\n            alteredInputs = props.inputs.map((input) => input === oldInput ? newInput : input);\n        }\n        props.inputsChange(alteredInputs);\n    }\n\n    return (\n        <React.Fragment>\n          {props.inputs.map((input, i) => (\n              <td key={input.key} >\n                <ValidatedInput\n                  dummy={props.dummy}\n                  placeholder={'Input'}\n                  isValid={validProg}\n                  onValid={props.dummy ?\n                           (text) => inputChange({prog: interp(parseCheck(text), initEnv)},\n                                                  input)\n                           :\n                           (text) => inputChange({...input,\n                                                  prog: interp(parseCheck(text), initEnv)},\n                                                 input)}\n                  \n                  onEmpty={() => inputChange({...input,\n                                              prog: yellow},\n                                             input)}\n                />\n              </td>\n          ))}\n        </React.Fragment>\n    );\n}\n\nfunction Outputs(props) {\n    function countWidth(formula) {\n        if (!isBooleanFormula(formula)) {\n            return 1;\n        } else {\n            return formula.thenChildren.reduce((acc, child) => acc + countWidth(child), 2);\n        }\n    }\n\n    if (props.dummy) {\n        return (\n            <React.Fragment>\n            {props.formulas.map((formula) => (\n                <td key={formula.key} colSpan={countWidth(formula)}>{/* empty cell */}</td>\n            ))}\n            </React.Fragment>\n        );\n    } else {\n        return (\n            <React.Fragment>\n              {props.formulas.map((formula) => (\n                  <React.Fragment key={formula.key}>\n                    <TestCell\n                      output={formula.outputs[props.row]}\n                      want={props.want}\n                    />\n                    {isBooleanFormula(formula) ?\n                     <React.Fragment>\n                       <Outputs\n                         formulas={formula.thenChildren}\n                         want={props.want}\n                         row={props.row}\n                       />\n                       <td>{/* empty cell to align with dummy child */}</td>\n                     </React.Fragment>\n                     : <script/> }\n                  </React.Fragment>\n              ))}\n            </React.Fragment>\n        );\n    }\n}\n\nfunction TestCell(props) {\n\n    if (props.output === gray) {\n        return (\n            <td className={'gray'}>\n            </td>\n        );\n    }\n\n    if (props.output === pink) {\n        return (\n            <td className={'pink'}>\n            </td>\n        );\n    }\n\n    if (props.output === yellow) {\n        return (\n            <td className={'yellow'}>\n            </td>\n        );\n    }\n\n    let output = props.output;\n    let want = yellow;\n\n    if (props.want !== yellow) {\n        try {\n            want = interp(props.want, initEnv);\n        } catch (e) {\n            output = e;\n        }\n    }\n\n    let text, error;\n    if (output instanceof Error) {\n        text = output.message;\n        error = true;\n    } else {\n        text = unparse(output);\n        error = false;\n    }\n\n    let img;\n    if (error) {\n        img = <img\n                src={imgPath + 'frowneyface.png'}\n                alt='Error!'\n                style={{float: 'right'}}\n                title={\"Oh no! You got an error!\"}/>;\n    }else if (want === yellow) { // I should make this better\n        img = '';\n    } else if (deepEquals(output, want)) {\n        img =  <img\n                 src={imgPath + 'smileyface.png'}\n                 alt='Yay!'\n                 style={{float: 'right'}}\n                 title={\"Yay! It's right!\"}/>;\n    } else {\n        img = '';\n    }\n\n    return (\n        <td className={'output'}>\n          {text}\n          {img}\n        </td>\n    );\n}\n\nfunction Want(props) {\n    function validProg(text) {\n        try {\n            interp(parseCheck(text), initEnv);\n        } catch(e) {\n            return false;\n        }\n        return true;\n    }\n\n    return (\n        <td>\n          <ValidatedInput\n            dummy={props.dummy}\n            placeholder={'Want'}\n            isValid={validProg}\n            onValid={(text) => props.wantChange(interp(parseCheck(text), initEnv))}\n            onEmpty={() => props.wantChange(yellow)}\n          />\n        </td>\n    );\n}\n\n/*\n  notes:\n  #inputs === #params\n  #outputs === #examples\n  ---------------------\n  |#inputs !== #outputs| (well it can but not always)\n  ---------------------\n*/\n\nclass App extends React.Component {\n    constructor(props){\n        super(props);\n        let tables = [{examples: [{inputs: [{prog: yellow, key: takeKey()}], want: yellow, key: takeKey()}],\n                       formulas: [{prog: yellow, outputs: [yellow], key: takeKey()}],\n                       params: [{name: yellow, key: takeKey()}],\n                       name: yellow,\n                       key: takeKey()}];\n        this.state = {tables};\n\n        this.programChange = this.programChange.bind(this);\n    }\n\n    calculate(program) {\n        function makeLookup(table) {\n            function lookup(args) {\n                if (args.length !== table.params.length) {\n                    throw new Error('Arity Mismatch, expected ' + table.params.length + ' argument' + (table.params.length === 1 ? '' : 's'));\n                }\n\n                let expr = table.examples.reduce((acc, example) => {\n                    if (acc !== undefined) {\n                        return acc;\n                    }\n\n                    // I have no idea what should happen if this is called on a table with no params\n                    if (example.inputs.reduce((acc, input, i) => {\n                        return acc && deepEquals(input.prog, args[i]);\n                    }, true)) {\n                        if (example.want === yellow) {\n                            throw new ReferenceError(`(${table.name} ${args.map(unparse).join(' ')}) doesn't have a want`);\n                        } else {\n                            return example.want;\n                        }\n                    }\n\n                    return undefined;\n                }, undefined);\n\n                if (expr === undefined) {\n                    // it's like a reference error in the super meta table language\n                    throw new ReferenceError(args.map(unparse).join() + ' is not an example in ' + table.name);\n                }\n\n                return expr;\n            }\n\n            return lookup;\n        }\n\n        let lookups = program.map((table) => ({name: table.name, binding: {value: makeLookup(table), type: RFUNCT_T}}));\n        let globalEnv = [...initEnv, ...lookups];\n\n        function calcTable(table) {\n            function calcFormula(formula, examples) {\n                let outputs = examples.map((example) => {\n                    if (example === gray) {\n                        return gray;\n                    } else if (example === pink) {\n                        return pink;\n                    } else if (!example.inputs.every((input) => input.prog !== yellow) || formula.prog === yellow) {\n                        // if any of the inputs or the formula isn't initialized, return yellow\n                        return yellow;\n                    }\n\n                    let localEnv = table.params.map((param, i) => ({name: param.name, binding: example.inputs[i].prog}));\n                    let env = [...globalEnv, ...localEnv];\n\n                    try {\n                        var output = interp(formula.prog, env);\n                    } catch (e) {\n                        output = e;\n                    }\n\n                    return output;\n                });\n\n                if (allBools(outputs) || (formula.thenChildren !== undefined && formula.thenChildren.length !== 0)) {\n                    function maybeSpecial(example, output) {\n                        if (example === gray || output.value === false)\n                            return gray;\n                        else if (typeof output.value !== 'boolean')\n                            return pink;\n                        else\n                            return example;\n                    }\n\n                    if (formula.thenChildren === undefined) {\n                        var thenChildren = [];\n                    } else {\n                        let subExamples = examples.map((example, i) => maybeSpecial(example, outputs[i]));\n                        thenChildren = formula.thenChildren.map((formula) => calcFormula(formula, subExamples));\n                    }\n\n                    return {...formula,\n                            outputs,\n                            thenChildren};\n                } else {\n                    let newFormula = {...formula,\n                                      outputs};\n                    delete newFormula.thenChildren;\n                    return newFormula;\n                }\n            }\n\n            if (table.name === yellow || !table.params.every((param) => param.name !== yellow)) { // if the table or any of the table's parameters don't have a name yet, freeze outputs\n                return {...table}; \n            } else {\n                let formulas = table.formulas.map((formula) => calcFormula(formula, table.examples));\n                return {...table,\n                        formulas};\n            }\n\n        }\n\n        return program.map(calcTable);\n    }\n\n    programChange(newProg) {\n        let calkedProg = this.calculate(newProg);\n        //console.log(calkedProg);\n        //console.log('next key: ', peekKey());\n        //console.log(toBSL(calkedProg));\n        this.setState((state) => {\n            return {tables: calkedProg};\n        });\n    }\n\n    render(){\n        return (\n            <div>\n              <input\n                type='radio'\n                name='unparse_mode_button'\n                id='cons_mode_button'\n                onInput={() => {unparse = unparse_cons; this.setState((state) => state);}}\n                defaultChecked={true}\n              />\n              <label htmlFor='cons_mode_button'>cons mode</label>\n\n              <input\n                type='radio'\n                name='unparse_mode_button'\n                id='list_mode_button'\n                onInput={() => {unparse = unparse_list; this.setState((state) => state);}}\n              />\n              <label htmlFor='list_mode_button'>list mode</label>\n\n              <Succinct\n                tables={this.state.tables}\n                programChange={this.programChange}\n              />\n              <textarea\n                rows={20}\n                cols={100}\n                className='bsl_io'\n                readOnly={true}\n                value={toBSL(this.state.tables, unparse, 100, 50)}\n              />\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}