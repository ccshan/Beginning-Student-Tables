{"version":3,"sources":["image.js","interpreter.js","header.js","prettyprint.js","App.js","serviceWorker.js","index.js"],"names":["colorDb","makeColor","genKey","Math","round","random","r","g","b","a","Error","changeAlpha","color","checkDimension","maybeDimension","checkColor","maybeColor","replace","toUpperCase","undefined","checkMode","maybeMode","checkXPlace","maybeXPlace","checkYPlace","maybeYPlace","makeCircle","mode","type","makeRectangle","width","height","makeEquiTriangle","length","A","B","C","makeTriangle","makeBeside","images","yplace","makeAbove","xplace","makeOverlay","makePlace","image","x","y","scene","rectangle","overlay","coordinates","map","coord","reduce","acc","max","s","area","sqrt","render","red","green","blue","alpha","cx","cy","fill","key","stroke","strokeWidth","render_circle","render_rect","D","pow","c","points","render_triangle","cur","render_polygon","initY","yCorrect","h","make_list_renderer","w","dx","dy","renderoozle","render_beside","initX","xCorrect","render_above","render_overlay","render_place","xChange","yChange","render_list","first","rest","slice","emptyScene","paint","picture","viewBox","xmlns","RVAR_T","RAPP_T","RFUNCT_T","RNUM_T","RBOOL_T","RSTRING_T","RLIST_T","RSYM_T","RIMAGE_T","RCOLOR_T","RIF_T","varRE","appRE","numRE","boolRE","strRE","quoteRE","symRE","listRE","initEnv","name","binding","value","args","forEach","arg","typeCheck","firstArg","secondArg","car","cdr","d","reverse","isnull","val","thirdArg","fourthArg","restArgs","img","parse","text","test","numStr","match","trim","prog","boolStr","toLowerCase","matches","substring","parseFunct","funct","app","parseArg","SyntaxError","tst","els","thn","parseQ","listArr","charAt","str","sym","interp","env","variable","ReferenceError","lookup","console","log","TypeError","toString_cons","join","toString_list","elems","unparse_cons","flat","unparse_list","parseCheck","parsed","types","includes","typesString","gray","pink","yellow","allBools","progs","every","isBooleanFormula","formula","outputs","thenChildren","nil","string","String","line","union","docL","docR","left","right","compose","nest","i","doc","indent","makePretty","ribbon","be","k","pairs","thisRibbon","current","splice","Text","Line","fits","diffWidth","diffRibbon","layout","repeat","best","putSpace","putLine","folddoc","f","docs","spread","stack","bracket","progToDoc_noGroup","program","Infinity","toBSL_noGroup","tables","unparse","pretty","table","fieldToDoc","params","param","checkExpects","examples","example","inputs","input","want","body","formulasToDoc","formulas","splitForms","bools","filter","nonbools","splitFormulas","form","condRows","dryRun","yo","imgPath","keyCount","takeKey","peekKey","lookahead","toString","showBSL","deepEquals","proga","progb","functCheck","argCheck","arga","elem","RemButton","props","className","style","src","alt","title","onClick","ValidatedInput","state","textChange","bind","e","target","this","setState","isValid","onValid","dummy","onEmpty","size","placeholder","onChange","React","Component","Succinct","tableChange","newTab","oldTab","alteredTabs","indexOf","programChange","validName","modTab","tableVars","otherTab","paramVars","reals","deadTab","aliveTabs","remTable","SuccinctTab","tableNames","formulasChange","SuccinctHead","paramsExamplesChange","SuccinctBody","paramNames","examplesFormulasChange","validProg","isgood","formulaChange","newForm","oldForm","alteredForms","countWidth","child","abyss","maxDepth","curMax","numParams","colSpan","deadForm","aliveForms","remFormula","_","children","countUp","num","depth","DepictFormula","numExamples","Array","Parameters","validParam","modParam","paramChange","newParam","alteredParams","alteredExamples","deadParam","deadIndex","aliveParams","modExamples","remParam","Fragment","childChange","newChild","modChild","deadChild","aliveChildren","remChild","exampleChange","newExample","oldExample","exists","addAnotherOutputToFormula","deadExample","aliveExamples","removeOutputFromFormula","remExample","Inputs","inputsChange","Outputs","row","Want","wantChange","inputChange","newInput","oldInput","alteredInputs","TestCell","output","DummyCell","error","face","message","float","valueCell","evalWant","App","makeLookup","expr","lookups","globalEnv","calcFormula","localEnv","subExamples","maybeSpecial","newFormula","newProg","calkedProg","calculate","bslField","rows","cols","readOnly","defaultValue","id","htmlFor","Boolean","window","location","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8f29999c.chunk.js","sourcesContent":["/*******************************************\n    This here is the image library in js\n*******************************************/\n\n\n/***\n    Data Definitions:\nAn Image is one of \n      - Circle\n      - Rectangle\n      - Triangle\n      - Polygon\n      - Beside\n      - Above\n      - Overlay\n      - Place\n\n    A Circle is\n      {r:     Integer,\n       color: Color,\n       mode:  String,\n       type:  'circle'}\n     \n    A Rectangle is\n      {width:  Integer,\n       height: Integer,\n       color:  Color,\n       mode:   String,\n       type:   'rect'}\n       \n    A Triangle is                   \n      {A:      Integer,             /\\\n       B:      Integer,            /  \\\n       C:      Integer,        B  /    \\  C\n       color:  Color,            /      \\\n       mode:   String,          /________\\\n       type:   'triangle'}          A      \n       \n    A Polygon is\n      {coordinates: [{x: Integer, y: Integer}],\n       color:       Color,\n       mode:        String,\n       type:        'polygon'}\n       \n    note: only acute triangles are handled\n       \n    A Beside is\n      {type:   'beside',\n       yplace:  String,\n       images: [Image]} note: images must be non-empty\n       \n    An Above is\n      {type:   'above',\n       xplace:  String,\n       images: [Image]} note: images must be non-empty\n\n    An Overlay is\n      {type:   'overlay',\n       yplace: String\n       xplace: String,\n       images: [Image]} note: images must be non-empty\n       \n   A Place is\n     {type: place,\n      x:     Integer,\n      y:     Integer,\n      image: Image,\n      scene: Image}\n       \n    A Color is\n      {r: Integer,\n       g: Integer,\n       b: Integer,\n       a: Integer}\n***/\n\nimport React from 'react';\n\n// these colors taken from https://github.com/brownplt/code.pyret.org/blob/horizon/src/web/js/trove/image-lib.js\nconst colorDb = {\n    \"DARK-RED\" : makeColor(139, 0, 0),\n    \"FIRE-BRICK\" : makeColor(178, 34, 34),\n    \"DEEP-PINK\" : makeColor(255, 20, 147),\n    \"INDIAN-RED\" : makeColor(205, 92, 92),\n    \"MEDIUM-VIOLET-RED\" : makeColor(199, 21, 133),\n    \"VIOLET-RED\" : makeColor(208, 32, 144),\n    \"LIGHT-CORAL\" : makeColor(240, 128, 128),\n    \"HOT-PINK\" : makeColor(255, 105, 180),\n    \"PALE-VIOLET-RED\" : makeColor(219, 112, 147),\n    \"LIGHT-PINK\" : makeColor(255, 182, 193),\n    \"ROSY-BROWN\" : makeColor(188, 143, 143),\n    \"LAVENDER-BLUSH\" : makeColor(255, 240, 245),\n    \"SADDLE-BROWN\" : makeColor(139, 69, 19),\n    \"DARK-ORANGE\" : makeColor(255, 140, 0),\n    \"DARK-GOLDENRON\" : makeColor(184, 134, 11),\n    \"SANDY-BROWN\" : makeColor(244, 164, 96),\n    \"LIGHT-SALMON\" : makeColor(255, 160, 122),\n    \"DARK-SALMON\" : makeColor(233, 150, 122),\n    \"NAVAJO-WHITE\" : makeColor(255, 222, 173),\n    \"PEACH-PUFF\" : makeColor(255, 218, 185),\n    \"DARK-KHAKI\" : makeColor(189, 183, 107),\n    \"PALE-GOLDENROD\" : makeColor(238, 232, 170),\n    \"BLANCHE-DIAMOND\" : makeColor(255, 235, 205),\n    \"MEDIUM-GOLDENROD\" : makeColor(234, 234, 173),\n    \"PAPAYA-WHIP\" : makeColor(255, 239, 213),\n    \"MISTY-ROSE\" : makeColor(255, 228, 225),\n    \"LEMON-CHIFFON\" : makeColor(255, 250, 205),\n    \"ANTIQUE-WHITE\" : makeColor(250, 235, 215),\n    \"CORN-SILK\" : makeColor(255, 248, 220),\n    \"LIGHT-GOLDENRON-YELLOW\" : makeColor(250, 250, 210),\n    \"OLD-LACE\" : makeColor(253, 245, 230),\n    \"LIGHT-YELLOW\" : makeColor(255, 255, 224),\n    \"FLORAL-WHITE\" : makeColor(255, 250, 240),\n    \"LAWN-GREEN\" : makeColor(124, 252, 0),\n    \"GREEN-YELLOW\" : makeColor(173, 255, 47),\n    \"YELLOW-GREEN\" : makeColor(154, 205, 50),\n    \"OLIVE-DRAB\" : makeColor(107, 142, 35),\n    \"MEDIUM-FOREST-GREEN\" : makeColor(107, 142, 35),\n    \"DARK-OLIVE-GREEN\" : makeColor(85, 107, 47),\n    \"DARK-SEA-GREEN\" : makeColor(143, 188, 139),\n    \"DARK-GREEN\" : makeColor(0, 100, 0),\n    \"LIME-GREEN\" : makeColor(50, 205, 50),\n    \"FOREST-GREEN\" : makeColor(34, 139, 34),\n    \"SPRING-GREEN\" : makeColor(0, 255, 127),\n    \"MEDIUM-SPRING-GREEN\" : makeColor(0, 250, 154),\n    \"SEA-GREEN\" : makeColor(46, 139, 87),\n    \"MEDIUM-SEA-GREEN\" : makeColor(60, 179, 113),\n    \"LIGHT-GREEN\" : makeColor(144, 238, 144),\n    \"PALE-GREEN\" : makeColor(152, 251, 152),\n    \"MEDIUM-AQUAMARINE\" : makeColor(102, 205, 170),\n    \"LIGHT-SEA-GREEN\" : makeColor(32, 178, 170),\n    \"MEDIUM-TURQUOISE\" : makeColor(72, 209, 204),\n    \"MINT-CREAM\" : makeColor(245, 255, 250),\n    \"ROYAL-BLUE\" : makeColor(65, 105, 225),\n    \"DODGER-BLUE\" : makeColor(30, 144, 255),\n    \"DEEP-SKY-BLUE\" : makeColor(0, 191, 255),\n    \"CORNFLOWER-BLUE\" : makeColor(100, 149, 237),\n    \"STEEL-BLUE\" : makeColor(70, 130, 180),\n    \"LIGHT-SKY-BLUE\" : makeColor(135, 206, 250),\n    \"DARK-TURQUOISE\" : makeColor(0, 206, 209),\n    \"DARKTURQUOISE\" : makeColor(0, 206, 209),\n    \"SKY-BLUE\" : makeColor(135, 206, 235),\n    \"SKYBLUE\" : makeColor(135, 206, 235),\n    \"CADET-BLUE\" : makeColor(96, 160, 160),\n    \"DARK-SLATE-GRAY\" : makeColor(47, 79, 79),\n    \"LIGHT-STEEL-BLUE\" : makeColor(176, 196, 222),\n    \"LIGHT-BLUE\" : makeColor(173, 216, 230),\n    \"POWDER-BLUE\" : makeColor(176, 224, 230),\n    \"PALE-TURQUOISE\" : makeColor(175, 238, 238),\n    \"LIGHT-CYAN\" : makeColor(224, 255, 255),\n    \"ALICE-BLUE\" : makeColor(240, 248, 255),\n    \"MEDIUM-BLUE\" : makeColor(0, 0, 205),\n    \"DARK-BLUE\" : makeColor(0, 0, 139),\n    \"MIDNIGHT-BLUE\" : makeColor(25, 25, 112),\n    \"BLUE-VIOLET\" : makeColor(138, 43, 226),\n    \"MEDIUM-SLATE-BLUE\" : makeColor(123, 104, 238),\n    \"SLATE-BLUE\" : makeColor(106, 90, 205),\n    \"DARK-SLATE-BLUE\" : makeColor(72, 61, 139),\n    \"DARK-VIOLET\" : makeColor(148, 0, 211),\n    \"DARK-ORCHID\" : makeColor(153, 50, 204),\n    \"MEDIUM-PURPLE\" : makeColor(147, 112, 219),\n    \"MEDIUM-ORCHID\" : makeColor(186, 85, 211),\n    \"DARK-MAGENTA\" : makeColor(139, 0, 139),\n    \"GHOST-WHITE\" : makeColor(248, 248, 255),\n    \"WHITE-SMOKE\" : makeColor(245, 245, 245),\n    \"LIGHT-GRAY\" : makeColor(211, 211, 211),\n    \"DARK-GRAY\" : makeColor(169, 169, 169),\n    \"DIM-GRAY\" : makeColor(105, 105, 105),\n\n    \"ORANGE\" : makeColor(255, 165, 0),\n    \"ORANGERED\" : makeColor(255, 69, 0),\n    \"TOMATO\" : makeColor(255, 99, 71),\n    \"DARKRED\" : makeColor(139, 0, 0),\n    \"RED\" : makeColor(255, 0, 0),\n    \"FIREBRICK\" : makeColor(178, 34, 34),\n    \"CRIMSON\" : makeColor(220, 20, 60),\n    \"DEEPPINK\" : makeColor(255, 20, 147),\n    \"MAROON\" : makeColor(176, 48, 96),\n    \"INDIAN RED\" : makeColor(205, 92, 92),\n    \"INDIANRED\" : makeColor(205, 92, 92),\n    \"MEDIUM VIOLET RED\" : makeColor(199, 21, 133),\n    \"MEDIUMVIOLETRED\" : makeColor(199, 21, 133),\n    \"VIOLET RED\" : makeColor(208, 32, 144),\n    \"VIOLETRED\" : makeColor(208, 32, 144),\n    \"LIGHTCORAL\" : makeColor(240, 128, 128),\n    \"HOTPINK\" : makeColor(255, 105, 180),\n    \"PALEVIOLETRED\" : makeColor(219, 112, 147),\n    \"LIGHTPINK\" : makeColor(255, 182, 193),\n    \"ROSYBROWN\" : makeColor(188, 143, 143),\n    \"PINK\" : makeColor(255, 192, 203),\n    \"ORCHID\" : makeColor(218, 112, 214),\n    \"LAVENDERBLUSH\" : makeColor(255, 240, 245),\n    \"SNOW\" : makeColor(255, 250, 250),\n    \"CHOCOLATE\" : makeColor(210, 105, 30),\n    \"SADDLEBROWN\" : makeColor(139, 69, 19),\n    \"BROWN\" : makeColor(132, 60, 36),\n    \"DARKORANGE\" : makeColor(255, 140, 0),\n    \"CORAL\" : makeColor(255, 127, 80),\n    \"SIENNA\" : makeColor(160, 82, 45),\n    \"SALMON\" : makeColor(250, 128, 114),\n    \"PERU\" : makeColor(205, 133, 63),\n    \"DARKGOLDENROD\" : makeColor(184, 134, 11),\n    \"GOLDENROD\" : makeColor(218, 165, 32),\n    \"SANDYBROWN\" : makeColor(244, 164, 96),\n    \"LIGHTSALMON\" : makeColor(255, 160, 122),\n    \"DARKSALMON\" : makeColor(233, 150, 122),\n    \"GOLD\" : makeColor(255, 215, 0),\n    \"YELLOW\" : makeColor(255, 255, 0),\n    \"OLIVE\" : makeColor(128, 128, 0),\n    \"BURLYWOOD\" : makeColor(222, 184, 135),\n    \"TAN\" : makeColor(210, 180, 140),\n    \"NAVAJOWHITE\" : makeColor(255, 222, 173),\n    \"PEACHPUFF\" : makeColor(255, 218, 185),\n    \"KHAKI\" : makeColor(240, 230, 140),\n    \"DARKKHAKI\" : makeColor(189, 183, 107),\n    \"MOCCASIN\" : makeColor(255, 228, 181),\n    \"WHEAT\" : makeColor(245, 222, 179),\n    \"BISQUE\" : makeColor(255, 228, 196),\n    \"PALEGOLDENROD\" : makeColor(238, 232, 170),\n    \"BLANCHEDALMOND\" : makeColor(255, 235, 205),\n    \"MEDIUM GOLDENROD\" : makeColor(234, 234, 173),\n    \"MEDIUMGOLDENROD\" : makeColor(234, 234, 173),\n    \"PAPAYAWHIP\" : makeColor(255, 239, 213),\n    \"MISTYROSE\" : makeColor(255, 228, 225),\n    \"LEMONCHIFFON\" : makeColor(255, 250, 205),\n    \"ANTIQUEWHITE\" : makeColor(250, 235, 215),\n    \"CORNSILK\" : makeColor(255, 248, 220),\n    \"LIGHTGOLDENRODYELLOW\" : makeColor(250, 250, 210),\n    \"OLDLACE\" : makeColor(253, 245, 230),\n    \"LINEN\" : makeColor(250, 240, 230),\n    \"LIGHTYELLOW\" : makeColor(255, 255, 224),\n    \"SEASHELL\" : makeColor(255, 245, 238),\n    \"BEIGE\" : makeColor(245, 245, 220),\n    \"FLORALWHITE\" : makeColor(255, 250, 240),\n    \"IVORY\" : makeColor(255, 255, 240),\n    \"GREEN\" : makeColor(0, 255, 0),\n    \"LAWNGREEN\" : makeColor(124, 252, 0),\n    \"CHARTREUSE\" : makeColor(127, 255, 0),\n    \"GREEN YELLOW\" : makeColor(173, 255, 47),\n    \"GREENYELLOW\" : makeColor(173, 255, 47),\n    \"YELLOW GREEN\" : makeColor(154, 205, 50),\n    \"YELLOWGREEN\" : makeColor(154, 205, 50),\n    \"MEDIUM FOREST GREEN\" : makeColor(107, 142, 35),\n    \"OLIVEDRAB\" : makeColor(107, 142, 35),\n    \"MEDIUMFORESTGREEN\" : makeColor(107, 142, 35),\n    \"DARK OLIVE GREEN\" : makeColor(85, 107, 47),\n    \"DARKOLIVEGREEN\" : makeColor(85, 107, 47),\n    \"DARKSEAGREEN\" : makeColor(143, 188, 139),\n    \"LIME\" : makeColor(0, 255, 0),\n    \"DARK GREEN\" : makeColor(0, 100, 0),\n    \"DARKGREEN\" : makeColor(0, 100, 0),\n    \"LIME GREEN\" : makeColor(50, 205, 50),\n    \"LIMEGREEN\" : makeColor(50, 205, 50),\n    \"FOREST GREEN\" : makeColor(34, 139, 34),\n    \"FORESTGREEN\" : makeColor(34, 139, 34),\n    \"SPRING GREEN\" : makeColor(0, 255, 127),\n    \"SPRINGGREEN\" : makeColor(0, 255, 127),\n    \"MEDIUM SPRING GREEN\" : makeColor(0, 250, 154),\n    \"MEDIUMSPRINGGREEN\" : makeColor(0, 250, 154),\n    \"SEA GREEN\" : makeColor(46, 139, 87),\n    \"SEAGREEN\" : makeColor(46, 139, 87),\n    \"MEDIUM SEA GREEN\" : makeColor(60, 179, 113),\n    \"MEDIUMSEAGREEN\" : makeColor(60, 179, 113),\n    \"AQUAMARINE\" : makeColor(112, 216, 144),\n    \"LIGHTGREEN\" : makeColor(144, 238, 144),\n    \"PALE GREEN\" : makeColor(152, 251, 152),\n    \"PALEGREEN\" : makeColor(152, 251, 152),\n    \"MEDIUM AQUAMARINE\" : makeColor(102, 205, 170),\n    \"MEDIUMAQUAMARINE\" : makeColor(102, 205, 170),\n    \"TURQUOISE\" : makeColor(64, 224, 208),\n    \"LIGHTSEAGREEN\" : makeColor(32, 178, 170),\n    \"MEDIUM TURQUOISE\" : makeColor(72, 209, 204),\n    \"MEDIUMTURQUOISE\" : makeColor(72, 209, 204),\n    \"HONEYDEW\" : makeColor(240, 255, 240),\n    \"MINTCREAM\" : makeColor(245, 255, 250),\n    \"ROYALBLUE\" : makeColor(65, 105, 225),\n    \"DODGERBLUE\" : makeColor(30, 144, 255),\n    \"DEEPSKYBLUE\" : makeColor(0, 191, 255),\n    \"CORNFLOWERBLUE\" : makeColor(100, 149, 237),\n    \"STEEL BLUE\" : makeColor(70, 130, 180),\n    \"STEELBLUE\" : makeColor(70, 130, 180),\n    \"LIGHTSKYBLUE\" : makeColor(135, 206, 250),\n    \"DARK TURQUOISE\" : makeColor(0, 206, 209),\n    \"CYAN\" : makeColor(0, 255, 255),\n    \"AQUA\" : makeColor(0, 255, 255),\n    \"DARKCYAN\" : makeColor(0, 139, 139),\n    \"TEAL\" : makeColor(0, 128, 128),\n    \"SKY BLUE\" : makeColor(135, 206, 235),\n    \"CADET BLUE\" : makeColor(96, 160, 160),\n    \"CADETBLUE\" : makeColor(95, 158, 160),\n    \"DARK SLATE GRAY\" : makeColor(47, 79, 79),\n    \"DARKSLATEGRAY\" : makeColor(47, 79, 79),\n    \"LIGHTSLATEGRAY\" : makeColor(119, 136, 153),\n    \"SLATEGRAY\" : makeColor(112, 128, 144),\n    \"LIGHT STEEL BLUE\" : makeColor(176, 196, 222),\n    \"LIGHTSTEELBLUE\" : makeColor(176, 196, 222),\n    \"LIGHT BLUE\" : makeColor(173, 216, 230),\n    \"LIGHTBLUE\" : makeColor(173, 216, 230),\n    \"POWDERBLUE\" : makeColor(176, 224, 230),\n    \"PALETURQUOISE\" : makeColor(175, 238, 238),\n    \"LIGHTCYAN\" : makeColor(224, 255, 255),\n    \"ALICEBLUE\" : makeColor(240, 248, 255),\n    \"AZURE\" : makeColor(240, 255, 255),\n    \"MEDIUM BLUE\" : makeColor(0, 0, 205),\n    \"MEDIUMBLUE\" : makeColor(0, 0, 205),\n    \"DARKBLUE\" : makeColor(0, 0, 139),\n    \"MIDNIGHT BLUE\" : makeColor(25, 25, 112),\n    \"MIDNIGHTBLUE\" : makeColor(25, 25, 112),\n    \"NAVY\" : makeColor(36, 36, 140),\n    \"BLUE\" : makeColor(0, 0, 255),\n    \"INDIGO\" : makeColor(75, 0, 130),\n    \"BLUE VIOLET\" : makeColor(138, 43, 226),\n    \"BLUEVIOLET\" : makeColor(138, 43, 226),\n    \"MEDIUM SLATE BLUE\" : makeColor(123, 104, 238),\n    \"MEDIUMSLATEBLUE\" : makeColor(123, 104, 238),\n    \"SLATE BLUE\" : makeColor(106, 90, 205),\n    \"SLATEBLUE\" : makeColor(106, 90, 205),\n    \"PURPLE\" : makeColor(160, 32, 240),\n    \"DARK SLATE BLUE\" : makeColor(72, 61, 139),\n    \"DARKSLATEBLUE\" : makeColor(72, 61, 139),\n    \"DARKVIOLET\" : makeColor(148, 0, 211),\n    \"DARK ORCHID\" : makeColor(153, 50, 204),\n    \"DARKORCHID\" : makeColor(153, 50, 204),\n    \"MEDIUMPURPLE\" : makeColor(147, 112, 219),\n    \"CORNFLOWER BLUE\" : makeColor(68, 64, 108),\n    \"MEDIUM ORCHID\" : makeColor(186, 85, 211),\n    \"MEDIUMORCHID\" : makeColor(186, 85, 211),\n    \"MAGENTA\" : makeColor(255, 0, 255),\n    \"FUCHSIA\" : makeColor(255, 0, 255),\n    \"DARKMAGENTA\" : makeColor(139, 0, 139),\n    \"VIOLET\" : makeColor(238, 130, 238),\n    \"PLUM\" : makeColor(221, 160, 221),\n    \"LAVENDER\" : makeColor(230, 230, 250),\n    \"THISTLE\" : makeColor(216, 191, 216),\n    \"GHOSTWHITE\" : makeColor(248, 248, 255),\n    \"WHITE\" : makeColor(255, 255, 255),\n    \"WHITESMOKE\" : makeColor(245, 245, 245),\n    \"GAINSBORO\" : makeColor(220, 220, 220),\n    \"LIGHT GRAY\" : makeColor(211, 211, 211),\n    \"LIGHTGRAY\" : makeColor(211, 211, 211),\n    \"SILVER\" : makeColor(192, 192, 192),\n    \"GRAY\" : makeColor(190, 190, 190),\n    \"DARK GRAY\" : makeColor(169, 169, 169),\n    \"DARKGRAY\" : makeColor(169, 169, 169),\n    \"DIM GRAY\" : makeColor(105, 105, 105),\n    \"DIMGRAY\" : makeColor(105, 105, 105),\n    \"BLACK\" : makeColor(0, 0, 0),\n    \"TRANSPARENT\" : makeColor(0, 0, 0, 0),\n};\n\n// Integer\n// generates a random key so react stops complaining\nfunction genKey() {\n    return Math.round(Math.random() * 100000000);\n}\n\n/*\nTODO:\n  Figure out how triangles should work\n*/\n\n// Integer, Integer, Integer[, Integer] -> Color \nfunction makeColor (r, g, b, a = 255) {\n    if (r < 0 || r > 255 ||\n        g < 0 || g > 255 ||\n        b < 0 || b > 255 ||\n        a < 0 || a > 255 ){\n        throw new Error('r g b a values must be between 0 and 255 (inclusive)');\n    }\n\n    return {r, g, b, a};\n}\n\n// Color, Integer -> Color\nfunction changeAlpha (color, a) {\n    return makeColor(color.r, color.g, color.b, a);\n}\n\n// Integer -> Integer\n// pretty much makes sure the argument is non-negative\nfunction checkDimension(maybeDimension) {\n    if (maybeDimension < 0) {\n        throw new Error('shape dimensions must be non-negative');\n    }\n\n    return maybeDimension;\n}\n\n// (String or Color) -> Color\nfunction checkColor(maybeColor) {\n    if (typeof maybeColor === 'string') {\n        let color = colorDb[maybeColor.replace(' ', '').toUpperCase()];\n        if (color === undefined) {\n            throw new Error(`${maybeColor} is not a valid color`);\n        }\n\n        return color;\n    } \n\n    // TODO: check if maybeColor is actually a color object\n    return maybeColor;\n}\n\nfunction checkMode(maybeMode) {\n    if (maybeMode !== 'solid' && maybeMode !== 'outline') {\n        throw new Error(`${maybeMode} is not a valid mode`);\n    }\n\n    return maybeMode;\n}\n\nfunction checkXPlace(maybeXPlace) {\n    if (maybeXPlace === 'middle') {\n        return 'center';\n    }\n\n    if (maybeXPlace !== 'left' && maybeXPlace !== 'right' && maybeXPlace !== 'center') {\n        throw new Error(`${maybeXPlace} is not a valid x-place`);\n    }\n\n    return maybeXPlace;\n}\n\nfunction checkYPlace(maybeYPlace) {\n    if (maybeYPlace === 'middle') {\n        return 'center';\n    }\n\n    if (maybeYPlace !== 'top' && maybeYPlace !== 'bottom' && maybeYPlace !== 'center') {\n        throw new Error(`${maybeYPlace} is not a valid y-place`);\n    }\n\n    return maybeYPlace;\n}\n\n// Integer (String or Integer) Color -> Circle\nfunction makeCircle (r, mode, color) {\n    if (typeof mode === 'string') {\n        return {r: checkDimension(r), mode: checkMode(mode), color: checkColor(color), type: 'circle'};\n    } else {\n        return {r: checkDimension(r), mode: 'solid', color: changeAlpha(checkColor(color), mode), type: 'circle'};\n    }\n}\n\n// Integer Integer (String or Integer) Color -> Rectangle\nfunction makeRectangle (width, height, mode, color) {\n    if (typeof mode === 'string') {\n        return {width: checkDimension(width), height: checkDimension(height), mode: checkMode(mode),  color: checkColor(color), type: 'rect'};\n    } else {\n        return {width: checkDimension(width), height: checkDimension(height), mode: 'solid',  color: changeAlpha(checkColor(color), mode), type: 'rect'};\n    }\n}\n\n// Integer Integer Integer (String or Integer) Color -> Triangle\nfunction makeTriangle (A, B, C, mode, color) {\n    if (typeof mode === 'string') {\n        return {A: checkDimension(A), B: checkDimension(B), C: checkDimension(C), mode: checkMode(mode), color: checkColor(color), type: 'triangle'};\n    } else {\n        return {A: checkDimension(A), B: checkDimension(B), C: checkDimension(C), mode: 'solid', color: changeAlpha(checkColor(color), mode), type: 'triangle'};\n    }\n}\n\n// Integer (String or Integer) Color -> Triangle\nfunction makeEquiTriangle (length, mode, color) {\n    return makeTriangle(length, length, length, mode, color);\n}\n\n// [{x: Integer, y: Integer}], (String or Integer), Color -> Polygon\nfunction makePolygon (coords, mode, color) {\n    if (typeof mode === 'string') {\n        return {coordinates: coords, mode: checkMode(mode), color: checkColor(color), type: 'polygon'};\n    } else {\n        return {coordinates: coords, mode: 'solid', color: changeAlpha(checkColor(color), mode), type: 'polygon'};\n    }\n}\n\n// Integer, (String or Integer), Color -> Polygon\nfunction makePentagon (length, mode, color) {\n}\n\n// Integer, (String or Integer), Color -> Polygon\nfunction makeHexagon (length, mode, color) {\n}\n\n// Integer, (String or Integer), Color -> Polygon\nfunction makeStar (length, mode, color) {\n}\n\n// [Image] -> Image\nfunction makeBeside (images, yplace = 'center') {\n    return {images, yplace: checkYPlace(yplace), type: 'beside'};\n}\n\n// [Image] -> Image\nfunction makeAbove (images, xplace = 'center') {\n    return {images, xplace: checkXPlace(xplace), type: 'above'};\n}\n\n// [Image] -> Image\nfunction makeOverlay (images, xplace = 'center', yplace = 'center') {\n    return {images, xplace: checkXPlace(xplace), yplace: checkYPlace(yplace), type: 'overlay'};\n}\n\nfunction makePlace (image, x, y, scene) {\n    return {image, x, y, scene, type: 'place'};\n}\n\nlet circle = makeCircle;\nlet rectangle = makeRectangle;\nlet triangle = makeEquiTriangle;\nlet beside = makeBeside;\nlet above = makeAbove;\nlet overlay = makeOverlay;\nlet placeImage = makePlace;\n\n// Image -> Integer\nfunction width (image) {\n    switch (image.type) {\n    case 'circle':\n        return image.r * 2;\n    case 'rect':\n        return image.width;\n    case 'triangle':\n        return image.A;\n    case 'polygon':\n        return image.coordinates.map((coord) => coord.x).reduce((acc, x) => Math.max(acc, x));\n    case 'beside':\n        return image.images.reduce((acc, image) => acc + width(image), 0);\n    case 'above':\n        return image.images.reduce((acc, image) => Math.max(acc, width(image)), 0);\n    case 'overlay':\n        return image.images.reduce((acc, image) => Math.max(acc, width(image)), 0);\n    case 'place':\n        return width(image.scene);\n    default:\n        return new Error (`Unknown Image Type: ${image.type}`);\n    }\n}\n\n// Image -> Integer\nfunction height (image) {\n    switch (image.type) {\n    case 'circle':\n        return image.r * 2;\n    case 'rect':\n        return image.height;\n    case 'triangle':\n        // Heron's Formula, I went on Wikihow for this, don't judge\n        let s = (image.A + image.B + image.C) / 2;\n        let area = Math.sqrt(s * (s  - image.A) * (s - image.B) * (s - image.C));\n        return Math.round((area * 2) / image.A);\n    case 'polygon':\n        return image.coordinates.map((coord) => coord.y).reduce((acc, y) => Math.max(acc, y));\n    case 'beside':\n        return image.images.reduce((acc, image) => Math.max(acc, height(image)), 0);\n    case 'above':\n        return image.images.reduce((acc, image) => acc + height(image), 0);\n    case 'overlay':\n        return image.images.reduce((acc, image) => Math.max(acc, height(image)), 0);\n    case 'place':\n        return height(image.scene);\n    default:\n        return new Error (`Unknown Image Type: ${image.type}`);\n    }\n}\n\n\n// Image Integer Integer -> SVG\nfunction render (image, x, y) {\n    switch (image.type) {\n    case 'circle':\n        return render_circle(image, x, y);\n    case 'rect':\n        return render_rect(image, x, y);\n    case 'triangle':\n        return render_triangle(image, x, y);\n    case 'polygon':\n        return render_polygon(image, x, y);\n    case 'beside':\n        return render_beside(image, x, y);\n    case 'above':\n        return render_above(image, x, y);\n    case 'overlay':\n        return render_overlay(image, x, y);\n    case 'place':\n        return render_place(image, x, y);\n    default:\n        throw new Error (`Unknown Image Type: ${image.type}`);\n    }\n}\n\n// Image Integer Integer -> SVG\nfunction render_circle (image, x, y) {\n    let red = image.color.r;\n    let green = image.color.g;\n    let blue = image.color.b;\n    // for some reason alpha is the only float in rgba in css...\n    let alpha = image.color.a / 255;\n    switch (image.mode) {\n    case 'solid':\n        return <circle cx={x + image.r}\n                       cy={y + image.r}\n                       r={image.r}\n                       fill={`rgba(${red}, ${green}, ${blue}, ${alpha})`}\n                       key={genKey()}\n               />;\n    case 'outline':\n        // stroke is pretty annoying...\n        // it draws both outside of the shape and inside it...\n        //so it's difficult to figure out where exactly it wants to draw\n\n        // this should draw the outline of a circle (approximately)\n        // not sure how it works on browsers besides firefox though\n        return <circle cx={x + image.r}\n                       cy={y + image.r}\n                       r={image.r - .5}\n                       fill='none'\n                       stroke={`rgba(${red}, ${green}, ${blue}, ${alpha})`}\n                       strokeWidth={1}\n                       key={genKey()}\n               />;\n    default:\n        throw new Error (`Unknown Image Mode: ${image.mode}`);\n    }\n}\n\n// Image Integer Integer -> SVG\nfunction render_rect (image, x, y) {\n    let red = image.color.r;\n    let green = image.color.g;\n    let blue = image.color.b;\n    let alpha = image.color.a / 255;\n\n    switch (image.mode) {\n    case 'solid':\n        return <rect x={x}\n                     y={y}\n                     width={image.width}\n                     height={image.height}\n                     fill={`rgba(${red}, ${green}, ${blue}, ${alpha})`}\n                     key={genKey()}\n               />;\n    case 'outline':\n        // stroke has similar problems here as it does in circle\n        return <rect x={x + .5}\n                      y={y + .5}\n                      width={image.width - 1}\n                      height={image.height - 1}\n                      fill='none'\n                      stroke={`rgba(${red}, ${green}, ${blue}, ${alpha})`}\n                      strokeWidth={1}\n                      key={genKey()}\n                 />;\n    default:\n        throw new Error (`Unknown Image Mode: ${image.mode}`);\n    }\n}\n\n// Image Integer Integer -> SVG\nfunction render_triangle (image, x, y) {\n    let red = image.color.r;\n    let green = image.color.g;\n    let blue = image.color.b;\n    let alpha = image.color.a / 255;\n\n    let D = Math.round(Math.sqrt(Math.pow(image.B, 2) - Math.pow(height(image), 2))); \n    // these are coordinates                                   //         b       \n    let a = {x: x, y: y + height(image)};                      //         .       \n    let b = {x: x + D, y: y};                                  //        /|\\      \n    let c = {x: x + width(image), y: y + height(image)};       //       / | \\     \n                                                               //   B  /  |  \\  C\n                                                               //     /   |h  \\\n                                                               //    /    |    \\\n                                                               //   ._____|_____.\n                                                               //  a   D  A      c\n    switch (image.mode) {                                       \n    case 'solid':                                               \n        return <polygon\n                 points={`${a.x},${a.y} ${b.x},${b.y} ${c.x},${c.y}`}\n                 fill={`rgba(${red}, ${green}, ${blue}, ${alpha})`}\n                 key={genKey()}\n               />;\n    case 'outline':\n        return <polygon\n                 points={`${a.x},${a.y} ${b.x},${b.y} ${c.x},${c.y}`}\n                 fill='none'\n                 stroke={`rgba(${red}, ${green}, ${blue}, ${alpha})`}\n                 strokeWidth={1}\n                 key={genKey()}\n               />;\n    default:\n        throw new Error (`Unknown Image Mode: ${image.mode}`);\n    }\n}\n\nfunction render_polygon (image, x, y) {\n    let red = image.color.r;\n    let green = image.color.g;\n    let blue = image.color.b;\n    let alpha = image.color.a / 255;\n\n    let points = image.coordinates.map((coord) => `${coord.x + x},${coord.y + y}`).reduce((acc, cur) => acc + ' ' + cur);\n    switch (image.mode) {\n    case 'solid':                                               \n        return <polygon\n                 points={points}\n                 fill={`rgba(${red}, ${green}, ${blue}, ${alpha})`}\n                 key={genKey()}\n               />;\n    case 'outline':\n        return <polygon\n                 points={points}\n                 fill='none'\n                 stroke={`rgba(${red}, ${green}, ${blue}, ${alpha})`}\n                 strokeWidth={1}\n                 key={genKey()}\n               />;\n    default:\n        throw new Error (`Unknown Image Mode: ${image.mode}`);\n    }\n}\n\n\n// should I flatten [SVG]s?\n// no\n\n// (Integer, Integer -> Integer), (Integer, Integer -> Integer), (Integer, Integer -> Integer), (Integer, Integer -> Integer) -> ([Image], Integer, Integer) -> [SVG]\nfunction make_list_renderer (xCorrect, yCorrect, xChange, yChange) {\n    function render_list (images, x, y) {\n        if (images.length === 0) {\n            throw new Error('I need at least 1 image to render!');\n        }\n\n        let w = width(images[0]);\n        let h = height(images[0]);\n\n        let first = render(images[0], xCorrect(x, w), yCorrect(y, h));\n\n        if (images.length === 1) {\n            return [first];\n        }\n\n        let rest = render_list(images.slice(1), xChange(x, w), yChange(y, h));\n\n        // return list in reverse because the last child of an svg tag is shown on top\n        // this matters for overlay, but makes no difference in beside, above\n        return [...rest, first];\n    }\n\n    return render_list;\n}\n\n// Image Integer Integer -> [SVG]\nfunction render_beside (image, x, y) {\n    let initY = y,\n        yCorrect = (y, h) => y;\n\n    switch(image.yplace) {\n    case 'top':\n        break;\n    case 'center':\n        initY = y + height(image) / 2;\n        yCorrect = (y, h) => y - h/2;\n        break;\n    case 'bottom':\n        initY = y + height(image);\n        yCorrect = (y, h) => y - h;\n        break;\n    default:\n        throw new Error(`Unknown y-place: ${image.yplace}`);\n    }\n\n    let renderoozle = make_list_renderer((x, w) => x,\n                                         yCorrect,\n                                         (x, dx) => x + dx,\n                                         (y, dy) => y);\n    return renderoozle(image.images, x, initY);\n}\n\n// Image Integer Integer -> [SVG]\nfunction render_above (image, x, y) {\n    let initX = x,\n        xCorrect = (x, w) => x;\n\n    switch(image.xplace) {\n    case 'left':\n        break;\n    case 'center':\n        initX = x + width(image) / 2;\n        xCorrect = (x, w) => x - w/2;\n        break;\n    case 'right':\n        initX = x + width(image);\n        xCorrect = (x, w) => x - w;\n        break;\n    default:\n        throw new Error(`Unknown x-place: ${image.xplace}`);\n    }\n\n    let renderoozle = make_list_renderer(xCorrect,\n                                         (y, h) => y,\n                                         (x, dx) => x,\n                                         (y, dy) => y + dy);\n    return renderoozle(image.images, initX, y);\n\n}\n\nfunction render_overlay (image, x, y) {\n    let initX = x,\n        initY = y,\n        xCorrect = (x, w) => x,\n        yCorrect = (y, h) => y;\n    \n    switch(image.xplace) {\n    case 'left':\n        break;\n    case 'center':\n        initX = x + width(image) / 2;\n        xCorrect = (x, w) => x - w/2;\n        break;\n    case 'right':\n        initX = x + width(image);\n        xCorrect = (x, w) => x - w;\n        break;\n    default:\n        throw new Error(`Unknown x-place: ${image.xplace}`);\n    }\n\n    switch(image.yplace) {\n    case 'top':\n        break;\n    case 'center':\n        initY = y + height(image) / 2;\n        yCorrect = (y, h) => y - h/2;\n        break;\n    case 'bottom':\n        initY = y + height(image);\n        yCorrect = (y, h) => y - h;\n        break;\n    default:\n        throw new Error(`Unknown y-place: ${image.yplace}`);\n    }\n\n    let renderoozle = make_list_renderer(xCorrect,\n                                         yCorrect,\n                                         (x, dx) => x,\n                                         (y, dy) => y);\n    return renderoozle(image.images, initX, initY);\n}\n\nfunction render_place (image, x, y) {\n    return [render(image.scene, x, y), render(image.image, image.x - width(image.image) / 2, image.y - height(image.image) / 2)];\n}\n\nfunction emptyScene (w, h, color = 'white') {\n    return overlay([rectangle(w, h, 'outline', 'black'), rectangle(w, h, 'solid', color)]);\n}\n\n// Image -> top level SVG\nfunction paint (image) {\n    let picture = render(image, 0, 0);\n    return (\n        <svg viewBox={`0 0 ${width(image)} ${height(image)}`}\n             xmlns='http://www.w3.org/2000/svg'\n             width={width(image)}\n             height={height(image)}\n        >\n          {picture}\n        </svg>\n    );\n}\n\n//export paint;\nexport {makeCircle, makeRectangle, makeEquiTriangle,\n        makeBeside, makeAbove, makeOverlay,\n        makePlace, emptyScene, makeColor,\n        paint};\n","import {makeCircle, makeRectangle, makeEquiTriangle,\n        makeBeside, makeAbove, makeOverlay,\n        makePlace, emptyScene, makeColor,\n        paint} from './image.js';\n\n/****************\n   Interpreter\n****************/\n\nconst RVAR_T =    0;\nconst RAPP_T =    1;\nconst RFUNCT_T =   2;\nconst RNUM_T =    3;\nconst RBOOL_T =   4;\nconst RSTRING_T = 5;\nconst RLIST_T =   6;\nconst RSYM_T =    7;\nconst RIMAGE_T =  8;\nconst RCOLOR_T =  9;\nconst RIF_T =   10;\n\nconst varRE = /^[^\\s\",'`()[\\]{}|;#]+/; // except numbers\nconst appRE = /^\\(/;\nconst numRE = /^-?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?=$|[\\s\",'`()[\\]{}|;#])/; // this one doesn't permit fractions\nconst boolRE = /^#(?:[tfTF]|true|false)(?=$|[\\s\",'`()[\\]{}|;#])/;\nconst strRE = /^\"[^\\\\\"]*\"/; // TODO: handle backslash escape\nconst quoteRE = /^'/;\nconst symRE = /^[^\\s\",'`()[\\]{}|;#]+/; // except numbers\nconst listRE = /^\\(/;\n\nconst initEnv = [\n    // functions\n    {name: '+', binding: {type: RFUNCT_T,\n                          value: plus}},\n    {name: 'add1', binding: {type: RFUNCT_T,\n                          value: add1}},\n    {name: '-', binding: {type: RFUNCT_T,\n                          value: minus}},\n    {name: 'sub1', binding: {type: RFUNCT_T,\n                          value: sub1}},\n    {name: '*', binding: {type: RFUNCT_T,\n                          value: times}},\n    {name: '/', binding: {type: RFUNCT_T,\n                          value: divide}},\n    {name: 'car', binding: {type: RFUNCT_T,\n                            value: car}},\n    {name: 'first', binding: {type: RFUNCT_T,\n                              value: car}},\n    {name: 'cdr', binding: {type: RFUNCT_T,\n                            value: cdr}},\n    {name: 'rest', binding: {type: RFUNCT_T,\n                             value: cdr}},\n    {name: 'cons', binding: {type: RFUNCT_T,\n                             value: cons}},\n    {name: 'list', binding: {type: RFUNCT_T,\n                             value: list}},\n    {name: 'not', binding: {type: RFUNCT_T,\n                            value: not}},\n    {name: 'and', binding: {type: RFUNCT_T,\n                            value: and}},\n    {name: 'or', binding: {type: RFUNCT_T,\n                           value: or}},\n    {name: 'eqv?', binding: {type: RFUNCT_T,\n                             value: iseqv}},\n    {name: 'null?', binding: {type: RFUNCT_T,\n                              value: isnull}},\n    {name: 'empty?', binding: {type: RFUNCT_T,\n                               value: isnull}},\n    {name: 'cons?', binding: {type: RFUNCT_T,\n                               value: iscons}},\n    {name: '=', binding: {type: RFUNCT_T,\n                          value: equalsign}},\n    {name: '>', binding: {type: RFUNCT_T,\n                          value: gtsign}},\n    {name: '>=', binding: {type: RFUNCT_T,\n                           value: gesign}},\n    {name: '<', binding: {type: RFUNCT_T,\n                          value: ltsign}},\n    {name: '<=', binding: {type: RFUNCT_T,\n                           value: lesign}},\n    {name: 'string-length', binding: {type: RFUNCT_T,\n                           value: stringLength}},\n    {name: 'string-append', binding: {type: RFUNCT_T,\n                           value: stringAppend}},\n    {name: 'circle', binding: {type: RFUNCT_T,\n                               value: circle}},\n    {name: 'rectangle', binding: {type: RFUNCT_T,\n                               value: rectangle}},\n    {name: 'square', binding: {type: RFUNCT_T,\n                               value: square}},\n    {name: 'triangle', binding: {type: RFUNCT_T,\n                               value: triangle}},\n    {name: 'beside', binding: {type: RFUNCT_T,\n                               value: beside}},\n    {name: 'beside/align', binding: {type: RFUNCT_T,\n                               value: besideAlign}},\n    {name: 'above', binding: {type: RFUNCT_T,\n                               value: above}},\n    {name: 'above/align', binding: {type: RFUNCT_T,\n                               value: aboveAlign}},\n    {name: 'overlay', binding: {type: RFUNCT_T,\n                               value: overlay}},\n    {name: 'overlay/align', binding: {type: RFUNCT_T,\n                               value: overlayAlign}},\n    {name: 'place-image', binding: {type: RFUNCT_T,\n                                    value: placeImage}},\n    {name: 'empty-scene', binding: {type: RFUNCT_T,\n                                    value: empty_Scene}},\n    {name: 'color', binding: {type: RFUNCT_T,\n                              value: color}},\n    // constants\n    {name: 'true', binding: {type: RBOOL_T,\n                             value: true}},\n    {name: 'false', binding: {type: RBOOL_T,\n                              value: false}},\n    {name: 'null', binding: {type: RLIST_T,\n                             value: null}},\n    {name: 'empty', binding: {type: RLIST_T,\n                              value: null}},\n];\n\n// String -> {prog: Program, rest: String}\n// parses all expressions except quoted expressions\nfunction parse(text) {\n    if (numRE.test(text)) {\n        let matches = text.match(numRE);\n        let numStr = matches[0];\n        let rest = text.slice(numStr.length).trim();\n        let num = {value: +numStr, type: RNUM_T};\n\n        return {prog: num, rest: rest};\n    } else if (varRE.test(text)) {\n        let matches = text.match(varRE);\n        let name = matches[0];\n        let rest = text.slice(name.length).trim();\n        let variable = {value: name, type: RVAR_T};\n\n        return {prog: variable, rest: rest};\n\n\n    } else if (boolRE.test(text)) {\n        let matches = text.match(boolRE);\n        let boolStr = matches[0];\n        let rest = text.slice(boolStr.length).trim();\n        let bool = {value: boolStr[1].toLowerCase() === 't', type: RBOOL_T};\n\n        return {prog: bool, rest: rest};\n\n    } else if (strRE.test(text)) {\n        let matches = text.match(strRE);\n        let value = matches[0].substring(1, matches[0].length - 1); // trim off quotes\n        let str = {value: value, type: RSTRING_T};\n        let rest = text.slice(matches[0].length).trim();\n\n        return {prog: str, rest: rest};\n\n    } else if (appRE.test(text)) {\n        text = text.slice(1).trim(); // remove open paren\n        let parseFunct = parse(text); // parse function\n        let funct = parseFunct.prog; // get function\n        text = parseFunct.rest; // get past function\n        let args = [];\n\n        while (text[0] !== ')') {\n            let parseArg = parse(text);\n            args = [...args, parseArg.prog];\n            text = parseArg.rest;\n        }\n\n        let app;\n\tif (funct.value === 'or') {\n\t    if (args.length == 2) {\n\t\tapp = {value: {tst: args[0], els: args[1], thn: {value : true, type : RBOOL_T} }, type: RIF_T};\n\t    }\n\t    else if (args.length < 2) {\n\t\tthrow new SyntaxError('Invalid Syntax: \"' + text + '\"');\n\t    }\n\t    else {\n\t\t// should have a loop here\n\t\tthrow new SyntaxError('Invalid Syntax: \"' + text + '\"');\n\t    }\n\t}\n\telse if (funct.value === 'and') {\n\t    if (args.length == 2) {\n\t\tapp = {value: {tst: args[0], thn: args[1], els: {value : false, type : RBOOL_T} }, type: RIF_T};\n\t    }\n\t    else if (args.length < 2) {\n\t\tthrow new SyntaxError('Invalid Syntax: \"' + text + '\"');\n\t    }\n\t    else {\n\t\t// should have a loop here\n\t\tthrow new SyntaxError('Invalid Syntax: \"' + text + '\"');\n\t    }\n\t}\n\telse if (funct.value === 'if') {\n\t    if (args.length === 3) {\n\t\tapp = {value: {tst: args[0], thn: args[1], els: args[2]}, type: RIF_T};\n\t    }\n\t    else {\n\t\tthrow new SyntaxError('Invalid Syntax: \"' + text + '\"');\n\t    }\n\t} else {\t\n\t    app = {value: {funct: funct, args: args}, type: RAPP_T};\n\t}\n        let rest = text.slice(1).trim(); // remove close paren\n\n        return {prog: app, rest: rest};\n\n    } else if (quoteRE.test(text)) {\n        return parseQ(text.slice(1).trim());\n    }\n\n    throw new SyntaxError('Invalid Syntax: \"' + text + '\"');\n}\n\n// String -> {prog: Program, rest: String}\n// parses quoted expressions\nfunction parseQ(text) {\n    if (listRE.test(text)) {\n        text = text.slice(1).trim(); // remove quote, open paren\n        let listArr = [];\n\n        while (text[0] !== ')') {\n            let cur = parseQ(text);\n            listArr = [cur.prog, ...listArr]; // listArr is constructed backwards\n            text = cur.rest;\n        }\n\n        let rest = text.slice(1).trim();\n        let prog = listArr.reduce((acc, cur) => ({value: {a: cur, d: acc}, type: RLIST_T}), {value: null, type: RLIST_T}); // turn listArr into an Rlist\n\n        return {prog: prog, rest: rest};\n\n    } else if (numRE.test(text)) {\n        let matches = text.match(numRE);\n        let numStr = matches[0];\n        let rest = text.slice(numStr.length).trim();\n        let num = {value: +numStr, type: RNUM_T};\n\n        return {prog: num, rest: rest};\n\n    } else if (boolRE.test(text)) {\n        let matches = text.match(boolRE);\n        let boolStr = matches[0];\n        let rest = text.slice(boolStr.length).trim();\n        let bool = {value: boolStr.charAt(1).toLowerCase() === 't', type: RBOOL_T};\n\n        return {prog: bool, rest: rest};\n\n    } else if (strRE.test(text)) {\n        let matches = text.match(strRE);\n        let value = matches[0].substring(1, matches[0].length - 1); // trim off quotes\n        let str = {value: value, type: RSTRING_T};\n        let rest = text.slice(matches[0].length).trim();\n\n        return {prog: str, rest: rest};\n\n    } else if (symRE.test(text)) {\n        let matches = text.match(symRE);\n        let value = matches[0];\n        let sym = {value: value, type: RSYM_T};\n        let rest = text.slice(matches[0].length).trim();\n\n        return {prog: sym, rest: rest};\n    }\n\n    throw new SyntaxError('Invalid Syntax: \"' + text + '\"');\n}\n\n/***\n    Environment: [Variable]\n    Variable:    {name:    String,\n                  binding: Program}\n***/\n\n// Program -> Environment -> Program\nfunction interp(prog, env) {\n    function lookup(name) {\n        let val = env.reduce((acc, variable) => {\n            if (acc !== undefined) {\n                return acc;\n            }\n\n            return variable.name === name ? variable.binding : undefined;\n        }, undefined);\n\n        if (val === undefined){\n            throw new ReferenceError(name + ' isn\\'t defined');\n        }\n\n        return val;\n    }\n\n    switch(prog.type) {\n    case RNUM_T:\n        return prog;\n    case RBOOL_T:\n        return prog;\n    case RSTRING_T:\n        return prog;\n    case RLIST_T:\n        return prog;\n    case RSYM_T:\n        return prog;\n    case RVAR_T:\n        return lookup(prog.value);\n    case RFUNCT_T:\n        return prog;\n    case RIF_T:\n        let tst = interp(prog.value.tst, env);\n\ttypeCheck(tst, [RBOOL_T]);\n\n\tif (tst.value) {\n\t    return interp(prog.value.thn, env);\n\t}\n\telse {\n\t    return interp(prog.value.els, env);\n\t}\n\t\n    case RAPP_T:\n        // interpret function (valof rator env)\n        let funct = interp(prog.value.funct, env);\n\n        // interpret arguments (valof rand env)\n        let args = prog.value.args.map((arg) => interp(arg, env));\n\n        typeCheck(funct, [RFUNCT_T]);\n\n        return funct.value(args);\n    case RIMAGE_T:\n        return prog;\n    case RCOLOR_T:\n        return prog;\n\n    default:\n        console.log(prog);\n        throw new TypeError(\"Unknown Type \" + prog.value);\n    }\n}\n\n// Program -> String\nfunction toString_cons(prog) {\n    switch (prog.type) {\n    case RNUM_T:\n        return prog.value;\n    case RBOOL_T:\n        return '#' + prog.value;\n    case RSTRING_T:\n        return `\"${prog.value}\"`;\n    case RLIST_T:\n        if (prog.value === null) {\n            return '\\'()';\n        } else {\n            return `(cons ${toString_cons(prog.value.a)} ${toString_cons(prog.value.d)})`;\n        }\n    case RSYM_T:\n        return \"'\" + prog.value;\n    case RVAR_T:\n        return prog.value;\n    case RFUNCT_T:\n        return '#<procedure>';\n    case RAPP_T:\n        return `(${toString_cons(prog.value.funct)} ${prog.value.args.map(toString_cons).join(' ')})`;\n    case RIMAGE_T:\n        return '#<image>';\n    case RCOLOR_T:\n        return '#<color>';\n    default:\n        return 'error or something';\n    }\n}\n\n// Program -> String\nfunction toString_list (prog) {\n    switch (prog.type) {\n    case RNUM_T:\n        return prog.value;\n    case RBOOL_T:\n        return '#' + prog.value;\n    case RSTRING_T:\n        return `\"${prog.value}\"`;\n    case RLIST_T:\n        let elems = '';\n        while (prog.value !== null) {\n            elems += ' ' + toString_list(prog.value.a);\n            prog = prog.value.d;\n        }\n        return `(list${elems})`;\n    case RSYM_T:\n        return \"'\" + prog.value;\n    case RVAR_T:\n        return prog.value;\n    case RFUNCT_T:\n        return '#<procedure>';\n    case RAPP_T:\n        return `(${toString_cons(prog.value.funct)} ${prog.value.args.map(toString_cons).join(' ')})`;\n    case RIMAGE_T:\n        return '#<image>';\n    case RCOLOR_T:\n        return '#<color>';\n    default:\n        return 'error or something';\n    }\n}\n\n// Program -> [(String or SVG)]\nfunction unparse_cons(prog) {\n    switch (prog.type) {\n    case RNUM_T:\n        return [prog.value];\n    case RBOOL_T:\n        return ['#' + prog.value];\n    case RSTRING_T:\n        return [`\"${prog.value}\"`];\n    case RLIST_T:\n        if (prog.value === null) {\n            return ['\\'()'];\n        } else {\n            return ['(cons ', ...unparse_cons(prog.value.a), ...unparse_cons(prog.value.d), ')'];\n        }\n    case RSYM_T:\n        return [\"'\" + prog.value];\n    case RVAR_T:\n        return [prog.value];\n    case RFUNCT_T:\n        return ['#<procedure>'];\n    case RAPP_T:\n        return ['(', ...unparse_cons(prog.value.funct), ...prog.value.args.map(unparse_cons).flat(), ')'];\n    case RIMAGE_T:\n        return [paint(prog.value)];\n    case RCOLOR_T:\n        return ['#<color>'];\n    default:\n        return 'error or something';\n    }\n}\n\n// Program -> [(String or SVG)]\nfunction unparse_list (prog) {\n    switch (prog.type) {\n    case RNUM_T:\n        return [prog.value];\n    case RBOOL_T:\n        return ['#' + prog.value];\n    case RSTRING_T:\n        return [`\"${prog.value}\"`];\n    case RLIST_T:\n        // special case for empty list\n        if (prog.value === null) {\n            return ['\\'()'];\n        }\n\n        let elems = [];\n        while (prog.value !== null) {\n            elems = [...elems, ' ', ...unparse_list(prog.value.a)];\n            prog = prog.value.d;\n        }\n\n        return ['(list', ...elems, ')'];\n    case RSYM_T:\n        return [\"'\" + prog.value];\n    case RVAR_T:\n        return [prog.value];\n    case RFUNCT_T:\n        return ['#<procedure>'];\n    case RAPP_T:\n        return ['(', ...unparse_cons(prog.value.funct), ...prog.value.args.map(unparse_cons).flat(), ')'];\n    case RIMAGE_T:\n        return [paint(prog.value)];\n    case RCOLOR_T:\n        return ['#<color>'];\n    default:\n        return 'error or something';\n    }\n}\n\n// String -> Program\n// parses text and checks for syntax errors based on what's returned\nfunction parseCheck(text) {\n    let parsed = parse(text);\n\n    switch (parsed.rest) {\n    case '':\n        break;\n    default:\n        throw new SyntaxError('Parsing Error');\n    }\n\n    return parsed.prog;\n}\n\n// Program -> [Number] -> Error Maybe\n// checks if prog is of one of the types in types\nfunction typeCheck(prog, types) {\n    // Number -> String\n    function getType(type) {\n        switch (type) {\n        case RVAR_T:\n            return 'variable';\n        case RAPP_T:\n            return 'application';\n        case RFUNCT_T:\n            return 'function';\n        case RNUM_T:\n            return 'number';\n        case RBOOL_T:\n            return 'boolean';\n        case RSTRING_T:\n            return 'string';\n        case RLIST_T:\n            return 'list';\n        case RSYM_T:\n            return 'symbol';\n        case RIMAGE_T:\n            return 'image';\n        case RCOLOR_T:\n            return 'color';\n        default:\n            return '???';\n        }\n    }\n\n    if (!types.includes(prog.type)) {\n        let typesString = types.map(getType).reduce((acc, type) => acc + ` or a ${type}`);\n        throw new TypeError(toString_cons(prog) + ' ain\\'t a ' + typesString);\n    }\n}\n\nfunction plus(args) {\n    if (args.length < 2) {\n        throw new Error('arity mismatch');\n    }\n\n    args.forEach((arg) => typeCheck(arg, [RNUM_T]));\n\n    return args.reduce((acc, arg) => (\n        {value: acc.value + arg.value,\n         type: RNUM_T}\n    ));\n}\nfunction add1(args) {\n    if (args.length !== 1) {\n        throw new Error('arity mismatch');\n    }\n\n    typeCheck(args[0], [RNUM_T]);\n\n    return {value: args[0].value + 1,\n            type: RNUM_T};\n}\nfunction minus(args) {\n    if (args.length < 1) {\n        throw new Error('arity mismatch');\n    }\n\n    args.forEach((arg) => typeCheck(arg, [RNUM_T]));\n\n    if (args.length === 1) {\n        return {value: 0 - args[0].value,\n                type: RNUM_T};\n    }\n\n    return args.reduce((acc, arg) => (\n        {value: acc.value - arg.value,\n         type: RNUM_T}\n    ));\n}\nfunction sub1(args) {\n    if (args.length !== 1) {\n        throw new Error('arity mismatch');\n    }\n\n    typeCheck(args[0], [RNUM_T]);\n\n    return {value: args[0].value - 1,\n            type: RNUM_T};\n}\nfunction times(args) {\n    if (args.length < 2) {\n        throw new Error('arity mismatch');\n    }\n\n    args.forEach((arg) => typeCheck(arg, [RNUM_T]));\n\n    return args.reduce((acc, arg) => (\n        {value: acc.value * arg.value,\n         type: RNUM_T}\n    ));\n}\nfunction divide(args) {\n    args.forEach((arg) => typeCheck(arg, [RNUM_T]));\n\n    if (args.length === 1) {\n        let firstArg = args[0];\n\n        typeCheck(firstArg, [RNUM_T]);\n\n        return {value: 1 / firstArg.value,\n                type: RNUM_T};\n    } else if (args.length === 2) {\n        let firstArg = args[0];\n        let secondArg = args[1];\n\n        typeCheck(firstArg, [RNUM_T]);\n        typeCheck(secondArg, [RNUM_T]);\n\n        return {value: firstArg.value / secondArg.value,\n                type: RNUM_T};\n    }\n\n    return {value: false, type: RBOOL_T};\n}\nfunction car(args) {\n    if (args.length !== 1) {\n        throw new Error('arity mismatch');\n    }\n\n    let firstArg = args[0];\n\n    typeCheck(firstArg, [RLIST_T]);\n\n    if (firstArg.value === null) {\n        throw new Error('expected a cons, but given empty list');\n    }\n\n    return firstArg.value.a;\n}\nfunction cdr(args) {\n    if (args.length !== 1) {\n        throw new Error('arity mismatch');\n    }\n\n    let firstArg = args[0];\n\n    if (firstArg.value === null) {\n        throw new Error('expected a cons, but given empty list');\n    }\n\n    typeCheck(firstArg, [RLIST_T]);\n\n    return firstArg.value.d;\n}\nfunction cons(args) {\n    if (args.length !== 2) {\n        throw new Error('arity mismatch');\n    }\n\n    let firstArg = args[0];\n    let secondArg = args[1];\n\n    // because BSL\n    typeCheck(secondArg, [RLIST_T]);\n\n    return {value: {a: firstArg, d: secondArg},\n            type: RLIST_T};\n}\nfunction list(args) {\n    // this indentation is pretty jank\n    return args.reverse().reduce((acc, arg) => (\n        {value: {a: arg, d: acc},\n         type: RLIST_T}),\n                                 {value: null,\n                                  type: RLIST_T});\n}\nfunction not(args) {\n    if (args.length !== 1) {\n        throw new Error('arity mismatch');\n    }\n\n    let firstArg = args[0];\n\n    return {value: firstArg.value === false,\n            type: RBOOL_T};\n}\nfunction iseqv(args) {\n    if (args.length !== 2) {\n        throw new Error('arity mismatch');\n    }\n\n    let firstArg = args[0];\n    let secondArg = args[1];\n\n    return {value: firstArg.value === secondArg.value,\n            type: RBOOL_T};\n}\nfunction and(args) {\n    return args.reduce((acc, cur) => {\n        return acc.value !== false ? cur : {value: false, type: RBOOL_T};\n    }, {value: true, type: RBOOL_T});\n\n} function or(args) {return args.reduce((acc, cur) => {\n        return acc.value !== false ? acc : cur;\n    }, {value: true, type: RBOOL_T});\n\n}\nfunction isnull(args) {\n    if (args.length !== 1) {\n        throw new Error('arity mismatch');\n    }\n\n    let firstArg = args[0];\n\n    return {value: firstArg.value === null && firstArg.type === RLIST_T,\n            type: RBOOL_T};\n}\nfunction iscons(args) {\n    if (args.length !== 1) {\n        throw new Error('arity mismatch');\n    }\n\n    let firstArg = args[0];\n\n    return {value: firstArg.value !== null && firstArg.type === RLIST_T,\n            type: RBOOL_T};\n}\nfunction equalsign(args) {\n    args.forEach((cur) => typeCheck(cur, [RNUM_T]));\n\n    let val = args.reduce((acc, cur) => {\n\n        if (acc.value === false) {\n            return {value: false, type: RBOOL_T};\n        }\n\n        return acc.value===cur.value ? acc : {value: false, type: RBOOL_T};\n    });\n\n    if (val.value === false){\n        return val;\n    } else {\n        return {value: true, type: RBOOL_T};\n    }\n}\nfunction gtsign(args) {\n    args.forEach((cur) => typeCheck(cur, [RNUM_T]));\n\n    let val = args.reduce((acc, cur) => {\n\n        if (acc.value === false) {\n            return {value: false, type: RBOOL_T};\n        }\n\n        return acc.value > cur.value ? acc : {value: false, type: RBOOL_T};\n    });\n\n    if (val.value === false){\n        return val;\n    } else {\n        return {value: true, type: RBOOL_T};\n    }\n}\nfunction gesign(args) {\n    args.forEach((cur) => typeCheck(cur, [RNUM_T]));\n\n    let val = args.reduce((acc, cur) => {\n\n        if (acc.value === false) {\n            return {value: false, type: RBOOL_T};\n        }\n\n        return acc.value >= cur.value ? acc : {value: false, type: RBOOL_T};\n    });\n\n    if (val.value === false){\n        return val;\n    } else {\n        return {value: true, type: RBOOL_T};\n    }\n}\nfunction ltsign(args) {\n    args.forEach((cur) => typeCheck(cur, [RNUM_T]));\n\n    let val = args.reduce((acc, cur) => {\n\n        if (acc.value === false) {\n            return {value: false, type: RBOOL_T};\n        }\n\n        return acc.value < cur.value ? acc : {value: false, type: RBOOL_T};\n    });\n\n    if (val.value === false){\n        return val;\n    } else {\n        return {value: true, type: RBOOL_T};\n    }\n}\nfunction lesign(args) {\n    args.forEach((cur) => typeCheck(cur, [RNUM_T]));\n\n    let val = args.reduce((acc, cur) => {\n\n        if (acc.value === false) {\n            return {value: false, type: RBOOL_T};\n        }\n\n        return acc.value <= cur.value ? acc : {value: false, type: RBOOL_T};\n    });\n\n    if (val.value === false){\n        return val;\n    } else {\n        return {value: true, type: RBOOL_T};\n    }\n}\nfunction stringLength(args) {\n    if (args.length !== 1) {\n        throw new Error('arity mismatch');\n    }\n\n    let firstArg = args[0];\n\n    typeCheck(firstArg, [RSTRING_T]);\n\n    return {value: firstArg.value.length,\n            type: RNUM_T};\n}\nfunction stringAppend(args) {\n    if (args.length < 2) {\n        throw new Error('arity mismatch');\n    }\n\n    args.forEach((arg) => typeCheck(arg, [RSTRING_T]));\n\n    return args.reduce((acc, arg) => (\n        {value: acc.value + arg.value,\n         type: RSTRING_T}\n    ));\n}\nfunction circle(args) {\n    if (args.length < 3) {\n        throw new Error('arity mismatch');\n    }\n\n    let firstArg = args[0];\n    let secondArg = args[1];\n    let thirdArg = args[2];\n    \n    typeCheck(firstArg, [RNUM_T]);\n    typeCheck(secondArg, [RNUM_T, RSTRING_T, RSYM_T]);\n    typeCheck(thirdArg, [RSTRING_T, RSYM_T, RCOLOR_T]);\n\n    let value = makeCircle(firstArg.value, secondArg.value, thirdArg.value);\n\n    return {value, type: RIMAGE_T};\n}\nfunction rectangle(args) {\n    if (args.length < 4) {\n        throw new Error('arity mismatch');\n    }\n\n    let firstArg = args[0];\n    let secondArg = args[1];\n    let thirdArg = args[2];\n    let fourthArg = args[3];\n\n    typeCheck(firstArg, [RNUM_T]);\n    typeCheck(secondArg, [RNUM_T]);\n    typeCheck(thirdArg, [RNUM_T, RSTRING_T, RSYM_T]);\n    typeCheck(fourthArg, [RSTRING_T, RSYM_T, RCOLOR_T]);\n\n    let value = makeRectangle(firstArg.value, secondArg.value, thirdArg.value, fourthArg.value);\n\n    return {value, type: RIMAGE_T};\n}\nfunction square(args) {\n    if (args.length < 3) {\n        throw new Error('arity mismatch');\n    }\n\n    let firstArg = args[0];\n    let secondArg = args[1];\n    let thirdArg = args[2];\n\n    typeCheck(firstArg, [RNUM_T]);\n    typeCheck(secondArg, [RNUM_T, RSTRING_T, RSYM_T]);\n    typeCheck(thirdArg, [RSTRING_T, RSYM_T, RCOLOR_T]);\n\n    let value = makeRectangle(firstArg.value, firstArg.value, secondArg.value, thirdArg.value);\n\n    return {value, type: RIMAGE_T};\n}\nfunction triangle(args) {\n    if (args.length < 3) {\n        throw new Error('arity mismatch');\n    }\n\n    let firstArg = args[0];\n    let secondArg = args[1];\n    let thirdArg = args[2];\n    \n    typeCheck(firstArg, [RNUM_T]);\n    typeCheck(secondArg, [RNUM_T, RSTRING_T, RSYM_T]);\n    typeCheck(thirdArg, [RSTRING_T, RSYM_T, RCOLOR_T]);\n\n    let value = makeEquiTriangle(firstArg.value, secondArg.value, thirdArg.value);\n\n    return {value, type: RIMAGE_T};\n}\nfunction beside(args) {\n    if (args.length < 2) {\n        throw new Error('arity mismatch');\n    }\n\n    args.forEach((arg) => typeCheck(arg, [RIMAGE_T]));\n\n    let value = makeBeside(args.map((arg) => arg.value));\n\n    return {value, type: RIMAGE_T};\n}\nfunction besideAlign(args) {\n    if (args.length < 3) {\n        throw new Error('arity mismatch');\n    }\n\n    let firstArg = args[0];\n    let restArgs = args.slice(1);\n\n    typeCheck(firstArg, [RSTRING_T, RSYM_T]);\n    restArgs.forEach((arg) => typeCheck(arg, [RIMAGE_T]));\n\n    let value = makeBeside(restArgs.map((arg) => arg.value), firstArg.value);\n\n    return {value, type: RIMAGE_T};\n}\nfunction above(args) {\n    if (args.length < 2) {\n        throw new Error('arity mismatch');\n    }\n\n    args.forEach((arg) => typeCheck(arg, [RIMAGE_T]));\n\n    let value = makeAbove(args.map((arg) => arg.value));\n\n    return {value, type: RIMAGE_T};\n}\nfunction aboveAlign(args) {\n    if (args.length < 3) {\n        throw new Error('arity mismatch');\n    }\n\n    let firstArg = args[0];\n    let restArgs = args.slice(1);\n\n    typeCheck(firstArg, [RSTRING_T, RSYM_T]);\n    restArgs.forEach((arg) => typeCheck(arg, [RIMAGE_T]));\n\n    let value = makeAbove(restArgs.map((arg) => arg.value), firstArg.value);\n\n    return {value, type: RIMAGE_T};\n}\nfunction overlay(args) {\n    if (args.length < 2) {\n        throw new Error('arity mismatch');\n    }\n\n    args.forEach((arg) => typeCheck(arg, [RIMAGE_T]));\n\n    let value = makeOverlay(args.map((arg) => arg.value));\n\n    return {value, type: RIMAGE_T};\n}\nfunction overlayAlign(args) {\n    if (args.length < 4) {\n        throw new Error('arity mismatch');\n    }\n\n    let firstArg = args[0];\n    let secondArg = args[1];\n    let restArgs = args.slice(2);\n\n    typeCheck(firstArg, [RSTRING_T, RSYM_T]);\n    typeCheck(secondArg, [RSTRING_T, RSYM_T]);\n    restArgs.forEach((arg) => typeCheck(arg, [RIMAGE_T]));\n\n    let value = makeOverlay(restArgs.map((arg) => arg.value), firstArg.value, secondArg.value);\n\n    return {value, type: RIMAGE_T};\n}\nfunction placeImage(args) {\n    if (args.length < 4) {\n        throw new Error('arity mismatch');\n    }\n\n    let img = args[0];\n    let x = args[1];\n    let y = args[2];\n    let scene = args[3];\n\n    typeCheck(img, [RIMAGE_T]);\n    typeCheck(x, [RNUM_T]);\n    typeCheck(y, [RNUM_T]);\n    typeCheck(scene, [RIMAGE_T]);\n\n    let value = makePlace(img.value, x.value, y.value, scene.value);\n\n    return {value, type: RIMAGE_T};\n}\nfunction empty_Scene(args) {\n    if (args.length < 2) {\n        throw new Error('arity mismatch');\n    }\n\n    let firstArg = args[0];\n    let secondArg = args[1];\n    let thirdArg = args[2];\n\n    typeCheck(firstArg, [RNUM_T]);\n    typeCheck(secondArg, [RNUM_T]);\n\n    let value;\n    if (thirdArg !== undefined) {\n        typeCheck(thirdArg, [RCOLOR_T, RSTRING_T, RSYM_T]);\n        value = emptyScene(firstArg.value, secondArg.value, thirdArg.value);\n    } else {\n        value = emptyScene(firstArg.value, secondArg.value);\n    }\n\n    return {value, type: RIMAGE_T};\n}\nfunction color(args) {\n    if (args.length < 3) {\n        throw new Error('arity mismatch');\n    }\n\n    let firstArg = args[0];\n    let secondArg = args[1];\n    let thirdArg = args[2];\n    let fourthArg = args[3];\n    \n    typeCheck(firstArg, [RNUM_T]);\n    typeCheck(secondArg, [RNUM_T]);\n    typeCheck(thirdArg, [RNUM_T]);\n\n    let value;\n    if (fourthArg !== undefined) {\n        typeCheck(fourthArg, [RNUM_T]);\n        value = makeColor(firstArg.value, secondArg.value, thirdArg.value, fourthArg.value);\n    } else {\n        value = makeColor(firstArg.value, secondArg.value, thirdArg.value);\n    }\n\n    return {value, type: RCOLOR_T};\n}\n\nexport {interp, parseCheck, initEnv,\n        RVAR_T, RAPP_T, RFUNCT_T, RNUM_T, RBOOL_T, RSTRING_T, RLIST_T, RSYM_T, RIMAGE_T, RCOLOR_T,\n        unparse_cons, unparse_list, toString_cons, toString_list,\n        varRE};\n","import {RBOOL_T} from './interpreter.js';\n\n/************\n    Colors\n************/\n\n// value to put in child formulas that don't have an output for that row\nexport const gray = {gray: 'gray'};\n// value to put in child formulas that have an error output for that row (non-boolean and non-gray)\nexport const pink = {pink: 'pink'};\n// value that indicates an uninitialized input\nexport const yellow = {yellow: 'yellow'};\n\n/*********************\n   Functions I Want\n*********************/\n// [Program] -> Boolean\n// returns true if progs has at least one member and all of its members are boooleans\n//    otherwise returns false\nexport function allBools(progs){\n    if (progs.length === 0 || progs.every((prog) => prog === gray)) {\n        return false;\n    }\n\n    return progs.every((prog) => prog.type === RBOOL_T || prog === gray);\n}\n\nexport function isBooleanFormula(formula) {\n    return allBools(formula.outputs) || formula.thenChildren !== undefined;\n}\n\n","import {yellow, isBooleanFormula} from './header.js';\nimport {RVAR_T, RAPP_T, RFUNCT_T, RNUM_T, RBOOL_T, RSTRING_T, RLIST_T, RSYM_T} from './interpreter.js';\n\n/*********************\n    Pretty Printer\n*********************/\n\n/***\n  Data Definitions\n  \n  A Doc is one of\n    - Nil\n    - Compose\n    - Nest\n    - Text\n    - Line\n    - Union\n  \n  A Nil is\n    {type: 'nil'}\n    \n  A Compose is\n    {type: 'compose',\n     left: Doc,\n     right: Doc}\n     \n  A Nest is\n    {type:   'nest',\n     indent: Integer,\n     rest:   Doc}\n\n  A Text is\n     {type: 'text',\n      text: String}\n      \n  A Line is\n    {type: 'line'}\n     \n  A Union is\n    {type:  'union',\n     left:  Doc,\n     right: Doc}\n     \n  A Pair is\n    {doc:    Doc,\n     indent: Integer}\n***/\n\n// Doc\nconst nil = {type: 'nil'};\n\n// String -> Doc\nfunction text (string) {\n    if (string === '') {\n        return nil;\n    } else {\n        return {type: 'text', text: String(string)};\n    }\n}\n\n// String -> Doc -> Doc\nfunction Text (string, doc) {\n    return compose(text(string), doc);\n}\n\n// Doc\nconst line = {type: 'line'};\n\n// Integer -> Doc -> Doc\nfunction Line (i, doc) {\n    return compose(nest(i, line), doc);\n}\n\n// Doc -> Doc -> Doc\nfunction union (docL, docR) {\n    return {type: 'union', left: docL, right: docR};\n}\n\nfunction Union (docL, docR) {\n    return union(docL, docR);\n}\n\n// Doc -> Doc -> Doc\n// in the paper this is written as <> and is sometimes called 'concatenate'\n//   I prefer the name 'compose' so as to not confuse the term with\n//   string concatenation\n// however it may be confused with function composition...\nfunction compose (docL, docR) {\n    // switch(docR.type) {\n    // case 'union':\n    //     return union(compose(docL, docR.left), compose(docL, docR.right));\n    // default:\n    //     break;\n    // }\n    switch (docL.type) {\n    case 'nil':\n        return docR;\n    case 'compose':\n        return {type: 'compose', left: docL.left, right: compose(docL.right, docR)};\n    case 'union':\n        return union(compose(docL.left, docR), compose(docL.right, docR));\n    default:\n        return {type: 'compose', left: docL, right: docR};\n    }\n}\n\n// Integer -> Doc -> Doc\nfunction nest (i, doc) {\n    switch (doc.type) {\n    case 'nil':\n        return nil;\n    case 'compose':\n        return compose(nest(i, doc.left), nest(i, doc.right));\n    case 'nest':\n        return {type: 'nest', indent: doc.indent + i, rest: doc.rest};\n    case 'text':\n        return doc;\n    case 'line':\n        return {type: 'nest', indent: i, rest: doc};\n    case 'union':\n        return union(nest(i, doc.left), nest(i, doc.right));\n    default:\n        throw Error(`unnexpected document type: ${doc.type}`);\n    }\n}\n\n// Doc -> String\nfunction layout (doc) {\n    switch (doc.type) {\n    case 'nil':\n        return '';\n    case 'compose':\n        return layout(doc.left) + layout(doc.right);\n    case 'nest':\n        return layout(doc.rest) +  ' '.repeat(doc.indent); // doc.rest has to be a line\n    case 'text':\n        return doc.text;\n    case 'line':\n        return '\\n';\n    default:\n        throw Error(`unnexpected document type: ${doc.type}`);\n    }\n}\n\n// Doc -> Doc\nfunction group (doc) {\n    return union(flatten(doc), doc);\n}\n\n// Doc -> Doc\nfunction flatten (doc) {\n    switch (doc.type) {\n    case 'nil':\n        return nil;\n    case 'compose':\n        return compose(flatten(doc.left), flatten(doc.right));\n    case 'nest':\n        return flatten(doc.rest);\n    case 'text':\n        return doc;\n    case 'line':\n        return text(' ');\n    case 'union':\n        return flatten(doc.left);\n    default:\n        throw Error(`unnexpected document type: ${doc.type}`);\n    }\n}\n\n// Integer -> Integer -> (Doc -> String)\nfunction makePretty (width, ribbon) {\n\n    // Integer -> Integer  -> [Pair] -> Doc\n    // it's like best, but better!\n    function be (r, k, pairs) {\n        if (pairs.length === 0) {\n            return nil;\n        }\n\n        let doc = pairs[0].doc;\n        let indent = pairs[0].indent;\n        let rest = pairs.splice(1);\n\n        switch (doc.type) {\n        case 'nil':\n            return be(r, k, rest);\n        case 'compose':\n            return be(r, k, [{indent, doc: doc.left}, {indent, doc: doc.right}, ...rest]);\n        case 'nest':\n            return be(r, k, [{indent: indent + doc.indent, doc: doc.rest}, ...rest]);\n        case 'text':\n            return Text(doc.text, be(r, k + doc.text.length, rest));\n        case 'line':\n            return Line(indent, be(r + indent, indent, rest));\n        case 'union':\n            return better(r, k, be(r, k, [{indent, doc: doc.left}, ...rest]),\n                                be(r, k, [{indent, doc: doc.right}, ...rest]));\n        default:\n            throw Error(`unnexpected document type: ${doc.type}`);\n        }\n    }\n\n    // Integer -> Integer -> Doc -> Doc\n    function best (thisRibbon, current, doc) {\n        return be(thisRibbon, current, [{indent: 0, doc: doc}])\n    }\n\n    // Integer -> Integer -> Integer -> Doc -> Doc -> Doc\n    function better (thisRibbon, current, docL, docR) {\n        if (fits(width - current, thisRibbon - current, docL)) {\n            return docL;\n        } else {\n            return docR;\n        }\n    }\n\n    // Integer -> Integer -> Doc -> Boolean\n    function fits(diffWidth, diffRibbon, doc) {\n        if (diffWidth < 0 || diffRibbon < 0) {\n            return false;\n        }\n\n        switch (doc.type) {\n        case 'nil':\n            return true;\n        case 'compose':\n            switch (doc.left.type) {\n            case 'text':\n                return fits(diffWidth - doc.left.text.length, diffRibbon - doc.left.text.length, doc.right);\n            case 'nest': // TODO: not sure if this should be here\n                return fits(diffWidth - doc.left.indent, diffRibbon - doc.left.indent, doc.right);\n            case 'line':\n                return true;\n            default:\n                throw Error(`unnexpected document type: ${doc.left.type}`);\n            }\n        default:\n            throw Error(`unnexpected document type: ${doc.type}`);\n        }\n    }\n\n    // Doc -> String\n    function pretty (doc) {\n        return layout(best(ribbon, 0, doc));\n        //return layout(best(ribbon, 0, doc));\n    }\n\n    return pretty;\n}\n\n/***\n   Utility Functions\n                   ***/\n\n// Doc -> Doc -> Doc\nfunction putSpace (docL, docR) {\n    return compose(docL, compose(text(' '), docR));\n}\n\n// Doc -> Doc -> Doc\nfunction putLine (docL, docR) {\n    return compose(docL, compose(line, docR));\n}\n\n// Doc -> Doc -> Doc\nfunction spaceOrLine(docL, docR) {\n    return union(putSpace(docL, docR), putLine(docL, docR));\n}\n\n// (Doc -> Doc -> Doc) -> [Doc] -> Doc\nfunction folddoc (f, docs) {\n    if (docs.length === 0) {\n        return nil;\n    } else if (docs.length === 1) {\n        return docs[0];\n    } else {\n        return f(docs[0], folddoc(f, docs.splice(1)));\n    }\n}\n\n// [☺String, Doc☹] -> Doc\n// where [☺String, Doc☹] means an array of elements that are either a Doc or a String (disjunction or whatever)\nfunction docify(stuff) {\n    return stuff.map((elem) => typeof elem === 'string' ? text(elem) : elem);\n}\n\n// [Doc] -> Doc\n// puts a space between docs\nfunction spread (docs) {\n    return folddoc(putSpace, docs);\n}\n\n// [Doc] -> Doc\n// puts a line between docs\nfunction stack (docs) {\n    return folddoc(putLine, docs);\n}\n\n// [Doc] -> Doc\n// puts more lines between docs\nfunction superstack (docs) {\n    return folddoc((docL, docR) => compose(docL, compose(line, compose(line, compose(line, docR)))), docs);\n}\n\n// [Doc] -> Doc\n// fills available horizontal space\nfunction fill(docs){\n    return folddoc(spaceOrLine, docs);\n}\n\n// [Doc] -> Doc\n// puts docs right next to eachother\nfunction level (docs) {\n    return folddoc(compose, docs);\n}\n\n// String -> Doc -> String -> Doc\n// puts the given document between left and right\nfunction bracket (left, doc, right) {\n    return level([text(left), doc, text(right)]);\n}\n\n\n/**************************************\n    Thing that Turns Tables Into BSL\n**************************************/\n\n// Program -> Doc\nfunction progToDoc (program) {\n    switch (program.type) {\n    case RVAR_T:\n        return text(program.value);\n    case RAPP_T:\n        return nest(1, bracket('(', group(stack([progToDoc(program.value.funct), ...program.value.args.map(progToDoc)])), ')'));\n    case RFUNCT_T:\n        return text('function');\n    case RNUM_T:\n        return text(program.value);\n    case RBOOL_T:\n        return text('#' + program.value);\n    case RSTRING_T:\n        return text('\"' + program.value + '\"');\n    case RLIST_T: // this just does cons, not list\n        if (program.value === null) {\n            return text(\"'()\");\n        } else {\n            return nest(1, bracket('(', group(stack([text('cons'), progToDoc(program.value.a), progToDoc(program.value.d)])), ')'));\n        }\n    case RSYM_T:\n        return text(\"'\" + program.value);\n    default:\n        throw new Error('unknown program type');\n    }\n}\n\n// Program -> Doc\nfunction progToDoc_list (program) {\n    switch (program.type) {\n    case RVAR_T:\n        return text(program.value);\n    case RAPP_T:\n        return nest(1, bracket('(', group(stack([progToDoc(program.value.funct), ...program.value.args.map(progToDoc)])), ')'));\n    case RFUNCT_T:\n        return text('function');\n    case RNUM_T:\n        return text(program.value);\n    case RBOOL_T:\n        return text('#' + program.value);\n    case RSTRING_T:\n        return text('\"' + program.value + '\"');\n    case RLIST_T:\n        if (program.value === null) {\n            return text(\"'()\");\n        }\n\n        let list = program.value.d,\n            elems = progToDoc_list(program.value.a);\n        while (list.value !== null) {\n            elems = stack([elems, progToDoc_list(list.value.a)]);\n        }\n\n        return bracket('(', spread([text('list'), group(elems)]), ')');\n    case RSYM_T:\n        return text(\"'\" + program.value);\n    default:\n        throw new Error('unknown program type');\n    }\n}\n\n// makes a Haskell document (as defined in projects/haskellPretty/prettier.hs)\n// I'm too lazy to do this by hand\nfunction toHaskDoc (doc) {\n    switch (doc.type) {\n    case 'nil':\n        return 'nil';\n    case 'compose':\n        return `${toHaskDoc(doc.left)} :<> ${toHaskDoc(doc.right)}`;\n    case 'nest':\n        return `nest ${doc.indent} ${toHaskDoc(doc.rest)}`;\n    case 'text':\n        return `text \"${doc.text}\"`;\n    case 'line':\n        return 'line';\n    case 'union':\n        return `${toHaskDoc(doc.left)} :<|> ${toHaskDoc(doc.right)}`;\n    default:\n        throw Error('invalid doc type: '+doc.type);\n    }\n}\n\n// [Table] -> String\nfunction toBSL(tables, unparse, width, ribbon) {\n    let pretty = makePretty(width, ribbon);\n    let essaie = stack([...tables.map(tableToDoc), nil]);\n    //return toHaskDoc(essaie);\n    return pretty(essaie);\n    //return `${pretty(essaie)}\\n\\n\\n${toHaskDoc(essaie)}`;\n    //return 'hi';\n\n    // Table -> Doc\n    function tableToDoc(table) {\n        let name = fieldToDoc(table.name);\n        let params = spread(table.params.map((param) => fieldToDoc(param.name)));\n\n        let checkExpects = stack(table.examples.map((example) => {\n            let inputs = stack(example.inputs.map((input) => fieldToDoc(input.prog)));\n            let want = fieldToDoc(example.want);\n\n            return nest(1, bracket('(', group(stack([text('check-expect'), bracket('(', nest(1, stack([name, inputs])), ')'), want])), ')'));\n        }));\n\n        let body = formulasToDoc(table.formulas);\n        let funct = nest(2, bracket('(', spread([text('define'), group(stack([bracket('(', spread([name, params]), ')'), body]))]), ')'));\n        return stack([funct, line, checkExpects]);\n    }\n\n    // [Formula] -> Doc\n    function formulasToDoc(formulas) {\n        // [Formula] -> {bools: [Formula], nonbools: [Formula]}\n        function splitFormulas(formulas) {\n            let bools = formulas.filter(isBooleanFormula);\n            let nonbools = formulas.filter((formula) => !isBooleanFormula(formula));\n            return {bools, nonbools};\n        }\n\n        let splitForms = splitFormulas(formulas);\n\n        // this one's a doc\n        let nonbools = stack(splitForms.nonbools.map((form) => fieldToDoc(form.prog))),\n            bools;\n\n        if (splitForms.bools.length !== 0) {\n            // this is an array of documents\n            let condRows = splitForms.bools.map((form) => (\n                nest(1, bracket('[', stack([fieldToDoc(form.prog), formulasToDoc(form.thenChildren)]),']'))\n            ));\n            // this one is just a doc\n            bools = nest(2, bracket('(', stack([text('cond'), ...condRows]),')'));\n        }\n\n        if (splitForms.bools.length !== 0 && splitForms.nonbools.length !== 0) {\n            return stack([bools, nonbools]);\n        } else if (splitForms.bools.length !== 0) {\n            return bools;\n        } else if (splitForms.nonbools.length !== 0) {\n            return nonbools;\n        } else {\n            return nil;\n        }\n    }\n\n    // Field (yellow or string or program) -> Doc\n    function fieldToDoc(input) {\n        if (input === yellow) {                 // empty\n            return text('...');\n        } else if (typeof input === 'string') { // name\n            return text(input);\n        } else {                                // program\n            return progToDoc(input);\n        }\n    }\n}\n\n// Program -> Doc\nfunction progToDoc_noGroup (program) {\n    switch (program.type) {\n    case RVAR_T:\n        return text(program.value);\n    case RAPP_T:\n        return nest(1, bracket('(', spread([progToDoc_noGroup(program.value.funct), ...program.value.args.map(progToDoc_noGroup)]), ')'));\n    case RFUNCT_T:\n        return text('function');\n    case RNUM_T:\n        return text(program.value);\n    case RBOOL_T:\n        return text('#' + program.value);\n    case RSTRING_T:\n        return text('\"' + program.value + '\"');\n    case RLIST_T:\n        if (program.value === null) {\n            return text(\"'()\");\n        } else {\n            return nest(1, bracket('(', spread([text('cons'), progToDoc_noGroup(program.value.a), progToDoc_noGroup(program.value.d)]), ')'));\n        }\n    case RSYM_T:\n        return text(\"'\" + program.value);\n    default:\n        throw new Error('unknown program type');\n    }\n}\n\n// [Table] -> String\nfunction toBSL_noGroup(tables, unparse, width, ribbon) {\n    let pretty = makePretty(width, ribbon);\n    let essaie = stack([...tables.map(tableToDoc), nil]);\n    //return toHaskDoc(essaie);\n    return pretty(essaie);\n    //return `${pretty(essaie)}\\n\\n\\n${toHaskDoc(essaie)}`;\n    //return 'hi';\n\n    // Table -> Doc\n    function tableToDoc(table) {\n        let name = fieldToDoc(table.name);\n        let params = spread(table.params.map((param) => fieldToDoc(param.name)));\n\n        let checkExpects = stack(table.examples.map((example) => {\n            let inputs = stack(example.inputs.map((input) => fieldToDoc(input.prog)));\n            let want = fieldToDoc(example.want);\n\n            return nest(1, bracket('(', stack([text('check-expect'), bracket('(', nest(1, stack([name, inputs])), ')'), want]), ')'));\n        }));\n\n        let body = formulasToDoc(table.formulas);\n        let funct = nest(2, bracket('(', spread([text('define'), stack([bracket('(', spread([name, params]), ')'), body])]), ')'));\n        return stack([funct, line, checkExpects]);\n    }\n\n    // [Formula] -> Doc\n    function formulasToDoc(formulas) {\n        // [Formula] -> {bools: [Formula], nonbools: [Formula]}\n        function splitFormulas(formulas) {\n            let bools = formulas.filter(isBooleanFormula);\n            let nonbools = formulas.filter((formula) => !isBooleanFormula(formula));\n            return {bools, nonbools};\n        }\n\n        let splitForms = splitFormulas(formulas);\n\n        // this one's a doc\n        let nonbools = stack(splitForms.nonbools.map((form) => fieldToDoc(form.prog))),\n            bools;\n\n        if (splitForms.bools.length !== 0) {\n            // this is an array of documents\n            let condRows = splitForms.bools.map((form) => (\n                nest(1, bracket('[', stack([fieldToDoc(form.prog), formulasToDoc(form.thenChildren)]),']'))\n            ));\n            // this one is just a doc\n            bools = nest(2, bracket('(', stack([text('cond'), ...condRows]),')'));\n        }\n\n        if (splitForms.bools.length !== 0 && splitForms.nonbools.length !== 0) {\n            return stack([bools, nonbools]);\n        } else if (splitForms.bools.length !== 0) {\n            return bools;\n        } else if (splitForms.nonbools.length !== 0) {\n            return nonbools;\n        } else {\n            return nil;\n        }\n    }\n\n    // Field (yellow or string or program) -> Doc\n    function fieldToDoc(input) {\n        if (input === yellow) {                 // empty\n            return text('...');\n        } else if (typeof input === 'string') { // name\n            return text(input);\n        } else {                                // program\n            return progToDoc_noGroup(input);\n        }\n    }\n}\n\n/****************\n    Unparsers\n****************/\nconst widePretty = makePretty(Infinity, Infinity);\n\nexport let unparse_cons = (prog) => widePretty(progToDoc(prog));\nexport let unparse_list = (prog) => widePretty(progToDoc_list(prog));\n\nexport default toBSL_noGroup;\n// export default toBSL;\n","import React from 'react';\nimport {interp, parseCheck, unparse_cons, toString_cons, toString_list, unparse_list, initEnv, RAPP_T, RFUNCT_T, RBOOL_T, RLIST_T, RIMAGE_T, varRE} from './interpreter.js';\nimport {gray, pink, yellow, allBools, isBooleanFormula} from './header.js';\nimport toBSL_noGroup from './prettyprint.js';\nimport './App.css';\n\n/*****************************\n  Universal Constants I Want\n*****************************/\n// value to indicate a dry run, i.e. don't actually change the underlying structure, just say\n// if the given value exists or not\nconst dryRun = {yo: 'don\\'t actually change anything'};\n// image path\nconst imgPath = './images/';\n\n\n/*********************\n    Key Management\n*********************/\n// variable used by takeKey and peekKey to generate keys\nlet keyCount = 0;\n\n// Number\n// returns a unique key\nfunction takeKey() {\n    return keyCount++;\n}\n\n// [Number] -> Number (the brackets here mean optional, not array)\n// returns current key without changing it\n// shoud be used to look at current state of key without actually taking it\n// optionally takes a number as an argument, in which case it returns the key that number\n// of steps ahead of the current key\nfunction peekKey(lookahead) {\n    if (lookahead === undefined) {\n        return keyCount;\n    } else {\n        return keyCount + lookahead;\n    }\n}\n\n/**************\n    Globals\n**************/\nlet unparse = unparse_cons;\nlet toString = toString_cons;\nlet showBSL = false;\n\n/*****************\n    Deep Equals\n*****************/\n// Program -> Program -> Boolean\n// checks if two programs are equivalent, recurs on lists and applications\n// may not quite work on functions because I use js functions, not data represented closures or something\n//    thus 2 functions are only equal if they're a reference to the same object\nfunction deepEquals(proga, progb) {\n    if (proga.type !== progb.type) {\n        return false;\n    }\n\n    if (proga.type === RLIST_T) {\n        if (proga.value === null || progb.value === null) {\n            return proga.value === progb.value;\n        }\n        return deepEquals(proga.value.a, progb.value.a) && deepEquals(proga.value.d, progb.value.d);\n    }\n\n    // this case will prolly never even happen...\n    if (proga.type === RAPP_T) {\n        if (proga.value.args.length !== progb.value.args.length) {\n            return false;\n        }\n        let functCheck = deepEquals(proga.value.funct, progb.value.funct);\n        let argCheck = proga.value.args.map((arga, i) => deepEquals(arga, progb.value.args[i])).every((elem) => elem);\n        return functCheck && argCheck;\n    }\n\n    if (proga.type === RIMAGE_T) {\n        // TODO: figure out Image comparison\n        return false;\n    }\n\n    return proga.value === progb.value;\n}\n\n/*********************\n   React Components\n*********************/\n\n/*** Buttons ***/\n// Button that probably removes something\nfunction RemButton(props){\n    return (\n        <div className='cross_button'>\n          <input\n            type={'image'}\n            style={props.style}\n            src={'./images/smallCross.png'}\n            alt='Remove'\n            title={props.title}\n            onClick={props.onClick}/>\n        </div>\n    );\n}\n\n/*** Inputs ***/\nclass ValidatedInput extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {text: ''};\n\n        this.textChange = this.textChange.bind(this);\n    }\n\n    textChange(e) {\n        let text = e.target.value;\n\n        this.setState((state) => ({text}));\n\n        if (this.props.isValid(text)) {\n            this.props.onValid(text);\n        } else if (text === '' && !this.props.dummy) {\n            this.props.onEmpty();\n        }\n\n    }\n\n    render() {\n        let className;\n        if (this.props.dummy && this.state.text === '') { // empty dummy\n            className = 'dummy_input';\n        } else if (this.props.isValid(this.state.text)) { // valid\n            className = 'valid_input';\n        } else if (this.state.text === '') { // empty non-dummy\n            className = 'empty_input';\n        } else { // invalid\n            className = 'invalid_input';\n        }\n        \n        let size;\n        if (this.state.text.length === 0)\n            size = this.props.placeholder.length;\n        else\n            size = Math.max(this.state.text.length + 2, 4);\n\n        return (\n            <input\n              className={className}\n              size={size}\n              placeholder={this.props.placeholder}\n              type={'text'}\n              value={this.state.text}\n              onChange={this.textChange}\n            />\n        );\n    }\n}\n\n/*** Table Sections ***/\n// let's put everything in one table woo\nfunction Succinct(props) {\n\n    function tableChange(newTab, oldTab) {\n        const exists = props.tables.indexOf(oldTab) !== -1;\n\n        let alteredTabs;\n        if (exists) {\n            alteredTabs = props.tables.map((table) => table === oldTab ? newTab : table);\n        } else {\n            alteredTabs = [...props.tables, newTab];\n        }\n\n        props.programChange(alteredTabs);\n    }\n\n    function remTable(deadTab) {\n        let aliveTabs = props.tables.filter((table) => table !== deadTab);\n        props.programChange(aliveTabs);\n    }\n\n    // String -> Boolean\n    function validName(text, modTab) {\n        function lookup(name, env) {\n            return env.reduce((acc, variable) => {\n                if (acc) {\n                    return true;\n                }\n\n                return variable.name === name;\n\n            }, false);\n        }\n\n        let tableVars = props.tables.filter((table) => table !== modTab).map((otherTab) => ({name: otherTab.name, binding: null}));\n        let paramVars = modTab.params.map((param) => ({name: param, binding: null}));\n        let env = [...initEnv, ...tableVars, ...paramVars];\n\n        return varRE.test(text) && !lookup(text, env);\n    }\n\n    const reals = props.tables.map((table) => (\n        <div key={table.key} className='table_method' >\n          <div className='full_cell'>\n            <ValidatedInput\n              dummy={false}\n              placeholder='Table Name'\n              isValid={(text) => validName(text, table)}\n              onValid={(text) => tableChange({...table,\n                                              name: text},\n                                             table)}\n              onEmpty={() => tableChange({...table,\n                                          name: yellow},\n                                         table)}\n            />\n            <RemButton\n              onClick={() => remTable(table)}\n              title='Remove this table'\n            />\n          </div>\n          <SuccinctTab\n            table={table}\n            tableNames={props.tables.map((table) => table.name)}\n            tableChange={(newTab) => tableChange(newTab, table)}\n          />\n        </div>\n    ));\n\n    const dummy = (\n        <div key={peekKey()} className='table_method'>\n          <div className='full_cell'>\n            <ValidatedInput\n              dummy={true}\n              placeholder='Table Name'\n              isValid={(text) => validName(text, {params: []})}\n              onValid={(text) => tableChange({name: text,\n                                              examples: [],\n                                              formulas: [],\n                                              params: [],\n                                              key: takeKey()},\n                                             {})}\n            />\n          </div>\n          <SuccinctTab\n            table={{name: yellow,\n                    examples: [],\n                    formulas: [],\n                    params: [],\n                    key: peekKey()}}\n            tableNames={props.tables.map((table) => table.name)}\n            tableChange={(newTab) => tableChange(newTab, {})}\n          />\n        </div>\n    );\n\n    return (\n        <div>\n          {[...reals, dummy]}\n        </div>\n    );\n}\n\nfunction SuccinctTab(props) {\n    function paramsExamplesChange(params, examples) {\n        props.tableChange({...props.table, params, examples});\n    }\n\n    function formulasChange(formulas) {\n        props.tableChange({...props.table, formulas});\n    }\n\n    function examplesFormulasChange(examples, formulas) {\n        props.tableChange({...props.table, examples, formulas});\n    }\n\n    return (\n        <table className={'html_table'}>\n          <SuccinctHead\n            params={props.table.params}\n            examples={props.table.examples}\n            tableNames={props.tableNames}\n            paramsExamplesChange={paramsExamplesChange}\n\n            formulas={props.table.formulas}\n            formulasChange={formulasChange}\n          />\n          <SuccinctBody\n            examples={props.table.examples}\n            formulas={props.table.formulas}\n            paramNames={props.table.params.map((param) => param.name)}\n            examplesFormulasChange={examplesFormulasChange}\n            formulasChange={formulasChange}\n          />\n        </table>\n    );\n}\n\nfunction SuccinctHead(props) {\n    // String -> Boolean\n    // checks if the given string is a valid program\n    function validProg(text) {\n        let isgood = true;\n\n        try {\n            parseCheck(text);\n        } catch(e) {\n            if (e instanceof SyntaxError) {\n                isgood = false;\n            } else { // this should never happen\n                throw e;\n            }\n        }\n\n        return isgood;\n    }\n\n    // Formula -> Side Effect\n    // removes a given formula from the tree\n    function remFormula(deadForm) {\n        const aliveForms = props.formulas.filter((formula) => formula !== deadForm);\n        props.formulasChange(aliveForms);\n    }\n\n    // Formula -> Formula -> Side Effect\n    // replaces one formula with another one\n    function formulaChange(newForm, oldForm) {\n\n        let alteredForms;\n        if (props.formulas.indexOf(oldForm) === -1) {\n            alteredForms = [...props.formulas, newForm];\n        } else {\n            alteredForms = props.formulas.map((form) => form === oldForm ? newForm : form);\n        }\n        props.formulasChange(alteredForms);\n    }\n\n    // Formula -> Number -> Number\n    // gives the maximum depth of a Formula, second parameter is an accumulator\n    function maxDepth(formula, curMax) {\n        if (!isBooleanFormula(formula)) {\n            return curMax;\n        } else {\n            return formula.thenChildren.reduce((acc, child) => Math.max(acc, maxDepth(child, curMax + 1)), curMax + 1);\n        }\n    }\n\n    function countWidth(formula) {\n        if (!isBooleanFormula(formula)) {\n            return 1;\n        } else {\n            return formula.thenChildren.reduce((acc, child) => acc + countWidth(child), 2);\n        }\n    }\n\n\n    // Number -> [Number]\n    // takes a number, returns an array that counts from 1 to that number, input of 0 gives empty array\n    // e.g. countUp(5) -> [1, 2, 3, 4, 5]\n    function countUp(num) {\n        // special case: want an empty array for 0\n        if (num === 0) {\n            return [];\n        } else if (num === 1)\n            return [1];\n        else\n            return [...countUp(num - 1), num];\n    }\n\n    const abyss = props.formulas.reduce((acc, formula) => Math.max(acc, maxDepth(formula, 0)), 0);\n    const numParams = props.params.length;\n\n    const reals = props.formulas.map((formula) => (\n        <th key={formula.key} colSpan={countWidth(formula)} >\n          <div className='full_cell'>\n            <ValidatedInput\n              placeholder={'Formula'}\n              dummy={false}\n              isValid={validProg}\n              onValid={(text) => formulaChange({...formula,\n                                                prog: parseCheck(text)},\n                                               formula)}\n              onEmpty={() => formulaChange({...formula,\n                                            prog: yellow},\n                                           formula)}\n            />\n            <RemButton\n              title={'Remove formula'}\n              onClick={() => remFormula(formula)}\n            />\n          </div>\n        </th>\n    ));\n\n    const dummy = (\n        <th key={peekKey()} colSpan={1}>\n          <div className='full_cell'>\n            <ValidatedInput\n              dummy={true}\n              placeholder='Formula'\n              isValid={validProg}\n              onValid={(text) => formulaChange({prog: parseCheck(text),\n                                                outputs: props.examples.map((_) => yellow),\n                                                key: takeKey()},\n                                               {})}\n            />\n          </div>\n        </th>\n    );\n\n    const children = countUp(abyss).map((depth) => (\n        <tr key={depth}>\n          <th colSpan={numParams + 2}>{/* empty cell to align with example RemButton and Parameters */}</th>\n          {props.formulas.map((formula) => (\n              <DepictFormula\n                key={formula.key}\n                formula={formula}\n                depth={depth}\n                numExamples={props.examples.length}\n                formulaChange={(newForm) => formulaChange(newForm, formula)}\n              />\n          ))}\n          {Array(depth).map((_, i) => (<th key={i}>{/* empty cell under some parent dummy formula */}</th>))}\n          <th>{/* empty cell above wants */}</th>\n        </tr>\n    ));\n\n    return (\n        <thead>\n          <tr>\n            <Parameters\n              params={props.params}\n              examples={props.examples}\n              tableNames={props.tableNames}\n              paramsExamplesChange={props.paramsExamplesChange}\n            />\n            {/* top level formulas */}\n            {[...reals, dummy, <th key={peekKey(1)}>{/* empty cell above wants */}</th>]}\n          </tr>\n          {/* rest of formulas */}\n          {children}\n        </thead>\n    );\n}\n\nfunction Parameters(props) {\n    function validParam(text, modParam) {\n        function lookup(name, env) {\n            return env.reduce((acc, variable) => {\n                if (acc) {\n                    return true;\n                }\n\n                return variable.name === name;\n\n            }, false);\n        }\n\n        // These are not technically Variables, see note above\n        let paramVars = props.params.filter((param) => param !== modParam).map((param) => ({name: param.name, binding: null}));\n        let tableVars = props.tableNames.map((name) => ({name: name, binding: null}));\n        let env = [...initEnv, ...tableVars, ...paramVars];\n\n        return varRE.test(text) && !lookup(text, env);\n    }\n\n    function remParam(deadParam) {\n        const deadIndex = props.params.indexOf(deadParam);\n        const aliveParams = props.params.filter((param) => param !== deadParam);\n\n        // need to maintain #inputs = #params\n        const modExamples = props.examples.map((example => ({...example,\n                                                             inputs: example.inputs.filter((_, i) => i !== deadIndex)})));\n\n        props.paramsExamplesChange(aliveParams, modExamples);\n    }\n\n    // String -> Number -> Side Effect\n    // changes the name of the given parameter\n    // if that parameter doesn't exist yet, it makes it\n    function paramChange(newParam, modParam) {\n\n        let alteredParams, alteredExamples;\n        if (props.params.indexOf(modParam) === -1) {\n            alteredParams = [...props.params, newParam];\n            // need to maintain #inputs = #params\n            alteredExamples = props.examples.map((example) => ({...example,\n                                                                inputs: [...example.inputs, {prog: yellow, key: takeKey()}]}));\n        } else {\n            alteredParams = props.params.map((param) => param === modParam ? newParam : param);\n            // examples don't actually change\n            alteredExamples = props.examples;\n        }\n\n        props.paramsExamplesChange(alteredParams, alteredExamples);\n    }\n\n    const reals = props.params.map((param) => (\n        <th key={param.key} >\n          <div className='full_cell'>\n            <ValidatedInput\n              dummy={false}\n              placeholder='Parameter'\n              isValid={(text) => validParam(text, param)}\n              onValid={(text) => paramChange({...param,\n                                              name: text},\n                                             param)}\n              onEmpty={() => paramChange({...param,\n                                          name: yellow},\n                                         param)}\n            />\n            <RemButton\n              title='remove this parameter'\n              onClick={() => remParam(param)}\n            />\n          </div>\n        </th>\n    ));\n\n    const dummy = (\n        <th key={peekKey()}>\n          <div className='full_cell'>\n            <ValidatedInput\n              dummy={true}\n              placeholder='Parameter'\n              isValid={(text) => validParam(text, {})}\n              onValid={(text) => paramChange({name: text,\n                                              key: takeKey()},\n                                             {})}\n            />\n          </div>\n        </th>\n    );\n\n    return (\n        <React.Fragment>\n          <th>{/* empty cell to align with example RemButtons */}</th>\n          <React.Fragment>\n            {[...reals, dummy]}\n          </React.Fragment>\n        </React.Fragment>\n    );\n}\n\n/*\n  props: formula, depth, kill, formulaChange\n*/\nfunction DepictFormula(props) {\n    function validProg(text) {\n        let isgood = true;\n\n        try {\n            parseCheck(text);\n        } catch(e) {\n            if (e instanceof SyntaxError) {\n                isgood = false;\n            } else {\n                throw e;\n            }\n        }\n\n        return isgood;\n    }\n\n    // this is pretty macabre...\n    function remChild(deadChild) {\n        const aliveChildren = props.formula.thenChildren.filter((child) => child !== deadChild);\n        props.formulaChange({...props.formula, thenChildren: aliveChildren});\n    }\n\n    function childChange(newChild, modChild) {\n        let children;\n        if (props.formula.thenChildren.indexOf(modChild) === -1) {\n            children = [...props.formula.thenChildren, newChild];\n        } else {\n            children = props.formula.thenChildren.map((child) => child === modChild ? newChild : child);\n        }\n        props.formulaChange({...props.formula, thenChildren: children});\n    }\n\n    function countWidth(formula) {\n        if (!isBooleanFormula(formula)) {\n            return 1;\n        } else {\n            return formula.thenChildren.reduce((acc, child) => acc + countWidth(child), 2);\n        }\n    }\n\n    if (props.depth > 1) {\n        return (\n            <React.Fragment>\n              <th>{/* empty cell to align with parent input */}</th>\n              {isBooleanFormula(props.formula) ?\n               <React.Fragment>\n                 {props.formula.thenChildren.map((child) => (\n                     <DepictFormula\n                       key={child.key}\n                       formula={child}\n                       depth={props.depth - 1}\n                       numExamples={props.numExamples}\n                       formulaChange={(formula) => childChange(formula, child)}\n                     />))}\n                 <th>{/* empty cell to align with child input */}</th>\n               </React.Fragment>\n               : <script/> }\n            </React.Fragment>\n        );\n    } else {\n        if (isBooleanFormula(props.formula)) {\n            const reals = props.formula.thenChildren.map((child) => (\n                <th key={child.key} colSpan={countWidth(child)} >\n                  <div className='full_cell'>\n                    <ValidatedInput\n                      dummy={false}\n                      placeholder={'Formula'}\n                      isValid={validProg}\n                      onValid={(text) => childChange({...child,\n                                                      prog: parseCheck(text)},\n                                                     child)}\n                      onEmpty={() => childChange({...child,\n                                                  prog: yellow},\n                                                 child)}\n                    />\n                    <RemButton\n                      title={'Remove formula'}\n                      onClick={() => remChild(child)}\n                    />\n                  </div>\n                </th>\n            ));\n\n            const dummy = (\n                <th key={peekKey()} colSpan={1}>\n                  <div className='full_cell'>\n                    <ValidatedInput\n                      dummy={true}\n                      placeholder='Formula'\n                      isValid={validProg}\n                      onValid={(text) => childChange({prog: parseCheck(text),\n                                                      outputs: Array(props.numExamples).fill(yellow),\n                                                      key: takeKey()},\n                                                     {})}\n                    />\n                  </div>\n                </th>\n            );\n\n            return (\n                <React.Fragment>\n                  <th>{/* empty cell to align with parent input */}</th>\n                   <React.Fragment>\n                     {[...reals, dummy]}\n                   </React.Fragment>\n                </React.Fragment>\n            );\n        } else {\n\n            return (\n                <React.Fragment>\n                  <th>{/* empty cell to align with parent input */}</th>\n                </React.Fragment>\n            );\n        }\n    }\n}\n\nfunction SuccinctBody(props) {\n    function remExample(deadExample) {\n        const deadIndex = props.examples.indexOf(deadExample);\n        // Formula -> Formula\n        // removes the output at deadIndex from the given formula and all of its children (if it has any) so stuff works\n        function removeOutputFromFormula(formula) {\n            let outputs = formula.outputs.filter((_, i) => i !== deadIndex);\n\n            if (isBooleanFormula(formula)) {\n                const thenChildren = formula.thenChildren.map(removeOutputFromFormula);\n                return {...formula,\n                        outputs,\n                        thenChildren};\n            } else {\n                return {...formula,\n                        outputs};\n            }\n        }\n\n\n        const aliveExamples = props.examples.filter((example) => example !== deadExample);\n        const alteredForms = props.formulas.map(removeOutputFromFormula);\n        props.examplesFormulasChange(aliveExamples, alteredForms);\n    }\n\n    function exampleChange(newExample, oldExample) {\n        const exists = props.examples.indexOf(oldExample) !== -1;\n\n        if (newExample === dryRun) {\n            return exists;\n        }\n\n        // Formula -> Formula\n        // adds an init output to the given formula and all of its children (if it has any) so stuff works\n        function addAnotherOutputToFormula(formula) {\n            let outputs = [...formula.outputs, yellow];\n\n            if (isBooleanFormula(formula)) {\n                const thenChildren = formula.thenChildren.map(addAnotherOutputToFormula);\n                return {...formula,\n                        outputs,\n                        thenChildren};\n            } else {\n                return {...formula,\n                        outputs};\n            }\n        }\n\n        let alteredExamples, alteredForms;\n        if (exists) {\n            alteredExamples = props.examples.map((example) => example === oldExample ? newExample : example);\n            alteredForms = props.formulas;\n        } else {\n            alteredExamples = [...props.examples, newExample];\n            alteredForms = props.formulas.map(addAnotherOutputToFormula);\n        }\n\n        props.examplesFormulasChange(alteredExamples, alteredForms);\n        return true; // this doesn't actually do anything\n    }\n\n    const reals = props.examples.map((example, i) => (\n          <tr key={example.key}>\n            <td>\n              <RemButton\n                onClick={() => remExample(example)}\n                title={'Remove this example'}\n              />\n            </td>\n            <Inputs\n              dummy={false}\n              inputs={example.inputs}\n              inputsChange={(inputs) => exampleChange({...example, inputs},\n                                                      example)}\n            />\n            <td>{/* empty cell to align with param dummy input */}</td>\n            <Outputs\n              dummy={false}\n              formulas={props.formulas}\n              want={example.want}\n              row={i}\n            />\n            <td>{/* empty cell to align with top level formula dummy input */}</td>\n            <Want\n              dummy={false}\n              want={example.want}\n              wantChange={(want) => exampleChange({...example, want},\n                                                  example)}\n            />\n          </tr>\n    ));\n    \n    const dummy = (\n          <tr key={peekKey(props.paramNames.length)}>\n            <td>{/* empty cell to offset rembutton */}</td>\n            <Inputs\n              dummy={true}\n              inputs={props.paramNames.map((_, i) => ({key: peekKey(i)}))}\n              inputsChange={(inputs) => exampleChange({inputs,\n                                                       want: yellow,\n                                                       key: takeKey()},\n                                                      {})}\n            />\n            <td>{/* empty cell to align with param dummy input */}</td>\n            <Outputs\n              dummy={true}\n              formulas={props.formulas}\n            />\n            <td>{/* empty cell to align with top level formula dummy input */}</td>\n            <Want\n              dummy={true}\n              wantChange={(want) => exampleChange({want,\n                                                   inputs: props.paramNames.map((_) => ({prog: yellow, key: takeKey()})),\n                                                   key: takeKey()},\n                                                  {})}\n            />\n          </tr>\n    );\n\n    return (\n        <tbody>\n          {[...reals, dummy]}\n        </tbody>\n    );\n}\n\nfunction Inputs(props) {\n    function validProg(text) {\n        try {\n            interp(parseCheck(text), initEnv);\n        } catch(e) {\n            return false;\n        }\n        return true;\n    }\n\n    function inputChange(newInput, oldInput) {\n        let alteredInputs;\n        if (props.dummy) {\n            alteredInputs = props.inputs.map((input) => input === oldInput ? {...newInput, key: takeKey()} : {prog: yellow, key: takeKey()});\n        } else {\n            alteredInputs = props.inputs.map((input) => input === oldInput ? newInput : input);\n        }\n        props.inputsChange(alteredInputs);\n    }\n\n    return (\n        <React.Fragment>\n          {props.inputs.map((input, i) => (\n              <td key={input.key} >\n                <div className='full_cell'>\n                  <ValidatedInput\n                    dummy={props.dummy}\n                    placeholder={'Input'}\n                    isValid={validProg}\n                    onValid={props.dummy ?\n                             (text) => inputChange({prog: parseCheck(text)},\n                                                   input)\n                             :\n                             (text) => inputChange({...input,\n                                                    prog: parseCheck(text)},\n                                                   input)}\n                    \n                    onEmpty={() => inputChange({...input,\n                                                prog: yellow},\n                                               input)}\n                  />\n                </div>\n              </td>\n          ))}\n        </React.Fragment>\n    );\n}\n\nfunction Outputs(props) {\n    function countWidth(formula) {\n        if (!isBooleanFormula(formula)) {\n            return 1;\n        } else {\n            return formula.thenChildren.reduce((acc, child) => acc + countWidth(child), 2);\n        }\n    }\n\n    if (props.dummy) {\n        return (\n            <React.Fragment>\n            {props.formulas.map((formula) => (\n                <td key={formula.key} colSpan={countWidth(formula)}>{/* empty cell */}</td>\n            ))}\n            </React.Fragment>\n        );\n    } else {\n        return (\n            <React.Fragment>\n              {props.formulas.map((formula) => (\n                  <React.Fragment key={formula.key}>\n                    <TestCell\n                      output={formula.outputs[props.row]}\n                      want={props.want}\n                    />\n                    {isBooleanFormula(formula) ?\n                     <React.Fragment>\n                       <Outputs\n                         formulas={formula.thenChildren}\n                         want={props.want}\n                         row={props.row}\n                       />\n                       {/* make dummy outputs look like the cell to their left */}\n                       {/* this is pretty jank */}\n                       {formula.thenChildren.length > 0 ?\n                        <DummyCell\n                          output={formula.thenChildren[0].outputs[props.row]}\n                        />\n                        :\n                        <td></td>\n                       }\n                     </React.Fragment>\n                     : <script/> }\n                  </React.Fragment>\n              ))}\n            </React.Fragment>\n        );\n    }\n}\n\nfunction TestCell(props) {\n\n    if (props.output === gray) {\n        return (\n            <td className={'gray'}>\n            </td>\n        );\n    }\n\n    if (props.output === pink) {\n        return (\n            <td className={'pink'}>\n            </td>\n        );\n    }\n\n    if (props.output === yellow) {\n        return (\n            <td className={'yellow'}>\n            </td>\n        );\n    }\n\n    let output = props.output;\n    let want = yellow;\n\n    if (props.want !== yellow) {\n        want = interp(props.want, initEnv);\n    }\n\n    let text, error;\n    if (output instanceof Error) {\n        text = output.message;\n        error = true;\n    } else {\n        text = unparse(output);\n        error = false;\n    }\n\n    let face;\n    if (error) {\n        face = <img\n                src={imgPath + 'frowneyface.png'}\n                alt='Error!'\n                style={{float: 'right'}}\n                title={\"Oh no! You got an error!\"}/>;\n    }else if (want === yellow) { // I should make this better\n        face = '';\n    } else if (deepEquals(output, want)) {\n        face =  <img\n                 src={imgPath + 'smileyface.png'}\n                 alt='Yay!'\n                 style={{float: 'right'}}\n                 title={\"Yay! It's right!\"}/>;\n    } else {\n        face = '';\n    }\n\n    return (\n        <td className={'output'}>\n          {text}\n          {face}\n        </td>\n    );\n}\n\nfunction DummyCell (props) {\n    console.log(props.output);\n    if (props.output === gray) {\n        return (\n            <td className={'gray'}>\n            </td>\n        );\n    } else if (props.output === pink) {\n        return (\n            <td className={'pink'}>\n            </td>\n        );\n    } else {\n        return <td></td>;\n    }\n}\n\nfunction Want(props) {\n    function validProg(text) {\n        try {\n            interp(parseCheck(text), initEnv);\n        } catch(e) {\n            return false;\n        }\n        return true;\n    }\n\n    let valueCell;\n    if (props.dummy || props.want === yellow) {\n        valueCell = <script/>;\n    } else {\n        let evalWant = interp(props.want, initEnv);\n        if (deepEquals(evalWant, props.want)) {\n            valueCell = <script/>;\n        } else {\n            valueCell = <td>{unparse(evalWant)}</td>;\n        }\n    }\n\n\n    return (\n        <React.Fragment>\n          <td>\n            <div className='full_cell'>\n              <ValidatedInput\n                dummy={props.dummy}\n                placeholder={'Want'}\n                isValid={validProg}\n                onValid={(text) => props.wantChange(parseCheck(text))}\n                onEmpty={() => props.wantChange(yellow)}\n              />\n            </div>\n          </td>\n          {valueCell}\n        </React.Fragment>\n    );\n}\n\n/*\n  notes:\n  #inputs === #params\n  #outputs === #examples\n  ---------------------\n  |#inputs !== #outputs| (well it can but not always)\n  ---------------------\n*/\n\nclass App extends React.Component {\n    constructor(props){\n        super(props);\n        let tables = [{examples: [{inputs: [{prog: yellow, key: takeKey()}], want: yellow, key: takeKey()}],\n                       formulas: [{prog: yellow, outputs: [yellow], key: takeKey()}],\n                       params: [{name: yellow, key: takeKey()}],\n                       name: yellow,\n                       key: takeKey()}];\n        this.state = {tables};\n\n        this.programChange = this.programChange.bind(this);\n    }\n\n    calculate(program) {\n        function makeLookup(table) {\n            function lookup(args) {\n                if (args.length !== table.params.length) {\n                    throw new Error('Arity Mismatch, expected ' + table.params.length + ' argument' + (table.params.length === 1 ? '' : 's'));\n                }\n\n                let expr = table.examples.reduce((acc, example) => {\n                    if (acc !== undefined) {\n                        return acc;\n                    }\n\n                    // I have no idea what should happen if this is called on a table with no params\n                    if (example.inputs.every((input, i) => {\n                        if (input.prog === yellow) {\n                            return false;\n                        }\n                        return deepEquals(interp(input.prog, initEnv), args[i]);\n                    })) {\n                        if (example.want === yellow) {\n                            throw new ReferenceError(`(${table.name} ${args.map(toString).join(' ')}) doesn't have a want`);\n                        } else {\n                            return interp(example.want, initEnv);\n                        }\n                    }\n\n                    return undefined;\n                }, undefined);\n\n                if (expr === undefined) {\n                    // it's like a reference error in the super meta table language\n                    throw new ReferenceError(args.map(toString).join() + ' is not an example in ' + table.name);\n                }\n\n                return expr;\n            }\n\n            return lookup;\n        }\n\n        let lookups = program.map((table) => ({name: table.name, binding: {value: makeLookup(table), type: RFUNCT_T}}));\n        let globalEnv = [...initEnv, ...lookups];\n\n        function calcTable(table) {\n            function calcFormula(formula, examples) {\n                let outputs = examples.map((example) => {\n                    if (example === gray) {\n                        return gray;\n                    } else if (example === pink) {\n                        return pink;\n                    } else if (!example.inputs.every((input) => input.prog !== yellow) || formula.prog === yellow) {\n                        // if any of the inputs or the formula isn't initialized, return yellow\n                        return yellow;\n                    }\n\n                    let localEnv = table.params.map((param, i) => ({name: param.name, binding: interp(example.inputs[i].prog, initEnv)}));\n                    let env = [...globalEnv, ...localEnv];\n\n                    try {\n                        var output = interp(formula.prog, env);\n                    } catch (e) {\n                        output = e;\n                    }\n\n                    return output;\n                });\n\n                if (allBools(outputs) || (formula.thenChildren !== undefined && formula.thenChildren.length !== 0)) {\n                    function maybeSpecial(example, output) {\n                        if (example === gray || output.value === false)\n                            return gray;\n                        else if (typeof output.value !== 'boolean')\n                            return pink;\n                        else\n                            return example;\n                    }\n\n                    if (formula.thenChildren === undefined) {\n                        var thenChildren = [];\n                    } else {\n                        let subExamples = examples.map((example, i) => maybeSpecial(example, outputs[i]));\n                        thenChildren = formula.thenChildren.map((formula) => calcFormula(formula, subExamples));\n                    }\n\n                    return {...formula,\n                            outputs,\n                            thenChildren};\n                } else {\n                    let newFormula = {...formula,\n                                      outputs};\n                    delete newFormula.thenChildren;\n                    return newFormula;\n                }\n            }\n\n            if (table.name === yellow || !table.params.every((param) => param.name !== yellow)) {\n                // if the table or any of the table's parameters don't have a name yet, freeze outputs\n                return {...table}; \n            } else {\n                let formulas = table.formulas.map((formula) => calcFormula(formula, table.examples));\n                return {...table,\n                        formulas};\n            }\n\n        }\n\n        return program.map(calcTable);\n    }\n\n    programChange(newProg) {\n        let calkedProg = this.calculate(newProg);\n        //console.log(calkedProg);\n        //console.log('next key: ', peekKey());\n        this.setState((state) => {\n            return {tables: calkedProg};\n        });\n    }\n\n    render(){\n        let bslField;\n        if (showBSL) {\n            bslField = (\n                <textarea\n                  className='bsl_field'\n                  rows={20}\n                  cols={70}\n                  readOnly={true}\n                  value={toBSL_noGroup(this.state.tables, toString, 70, 70)}\n                />\n            );\n        } else {\n            bslField = (\n                <textarea\n                  className='bsl_field'\n                  rows={20}\n                  cols={70}\n                  readOnly={true}\n                  value={''}\n                />\n            );\n        }\n\n        return (\n            <div>\n              <Succinct\n                tables={this.state.tables}\n                programChange={this.programChange}\n              />\n              <div className='language_select'>\n                <select\n                  defaultValue='cons'\n                  onChange={(e) => {\n                      if (e.target.value === 'cons'){\n                          toString = toString_cons;\n                          unparse = unparse_cons;\n                      } else {\n                          toString = toString_list;\n                          unparse = unparse_list;\n                      }\n                      // this just rerenders everything, the state remains unchanged\n                      this.setState((state) => state);\n                  }}\n                >\n                  <option value='cons'>Beginning Student</option>\n                  <option value='list'>Beginning Student with List Abbreviations</option>\n                </select>\n              </div>\n              <div className='bsl_io'>\n                <div className='bsl_checkbox'>\n                  <input\n                    type='checkbox'\n                    id='bsl_output'\n                    name='bsl_output'\n                    onChange={(e) => {\n                        showBSL = !showBSL;\n                        // same here, state remains unchanged but everything is rerendered\n                        this.setState((state) => state);\n                    }}\n                  />\n                  <label htmlFor='bsl_output'>Show BSL Output</label>\n                </div>\n                {bslField}\n              </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}