{"version":3,"sources":["interpreter.js","header.js","prettyprint.js","image.js","App.js","serviceWorker.js","index.js"],"names":["RVAR_T","RAPP_T","RFUNCT_T","RNUM_T","RBOOL_T","RSTRING_T","RLIST_T","RSYM_T","varRE","appRE","numRE","boolRE","strRE","quoteRE","symRE","listRE","initEnv","name","binding","type","value","args","forEach","cur","typeCheck","reduce","acc","length","firstArg","secondArg","car","cdr","Error","a","d","reverse","arg","thirdArg","isnull","val","parse","text","test","numStr","match","rest","slice","trim","prog","boolStr","toLowerCase","matches","parseFunct","funct","parseArg","concat","Object","toConsumableArray","parseQ","listArr","num","bool","charAt","str","sym","SyntaxError","interp","env","variable","undefined","ReferenceError","lookup","map","TypeError","unparse_cons","join","unparse_list","elems","parseCheck","parsed","typeString","gray","pink","yellow","allBools","progs","every","isBooleanFormula","formula","outputs","thenChildren","nil","string","String","line","union","docL","docR","left","right","compose","nest","i","doc","indent","makePretty","width","ribbon","be","r","k","pairs","thisRibbon","current","splice","Text","Line","fits","diffWidth","diffRibbon","layout","repeat","best","putSpace","putLine","folddoc","f","docs","spread","stack","bracket","progToDoc_noGroup","program","Infinity","toBSL_noGroup","tables","unparse","pretty","table","fieldToDoc","params","param","checkExpects","examples","example","inputs","input","want","body","formulasToDoc","formulas","bools","splitForms","filter","nonbools","splitFormulas","form","condRows","colorDb","DARK-RED","makeColor","FIRE-BRICK","DEEP-PINK","INDIAN-RED","MEDIUM-VIOLET-RED","VIOLET-RED","LIGHT-CORAL","HOT-PINK","PALE-VIOLET-RED","LIGHT-PINK","ROSY-BROWN","LAVENDER-BLUSH","SADDLE-BROWN","DARK-ORANGE","DARK-GOLDENRON","SANDY-BROWN","LIGHT-SALMON","DARK-SALMON","NAVAJO-WHITE","PEACH-PUFF","DARK-KHAKI","PALE-GOLDENROD","BLANCHE-DIAMOND","MEDIUM-GOLDENROD","PAPAYA-WHIP","MISTY-ROSE","LEMON-CHIFFON","ANTIQUE-WHITE","CORN-SILK","LIGHT-GOLDENRON-YELLOW","OLD-LACE","LIGHT-YELLOW","FLORAL-WHITE","LAWN-GREEN","GREEN-YELLOW","YELLOW-GREEN","OLIVE-DRAB","MEDIUM-FOREST-GREEN","DARK-OLIVE-GREEN","DARK-SEA-GREEN","DARK-GREEN","LIME-GREEN","FOREST-GREEN","SPRING-GREEN","MEDIUM-SPRING-GREEN","SEA-GREEN","MEDIUM-SEA-GREEN","LIGHT-GREEN","PALE-GREEN","MEDIUM-AQUAMARINE","LIGHT-SEA-GREEN","MEDIUM-TURQUOISE","MINT-CREAM","ROYAL-BLUE","DODGER-BLUE","DEEP-SKY-BLUE","CORNFLOWER-BLUE","STEEL-BLUE","LIGHT-SKY-BLUE","DARK-TURQUOISE","DARKTURQUOISE","SKY-BLUE","SKYBLUE","CADET-BLUE","DARK-SLATE-GRAY","LIGHT-STEEL-BLUE","LIGHT-BLUE","POWDER-BLUE","PALE-TURQUOISE","LIGHT-CYAN","ALICE-BLUE","MEDIUM-BLUE","DARK-BLUE","MIDNIGHT-BLUE","BLUE-VIOLET","MEDIUM-SLATE-BLUE","SLATE-BLUE","DARK-SLATE-BLUE","DARK-VIOLET","DARK-ORCHID","MEDIUM-PURPLE","MEDIUM-ORCHID","DARK-MAGENTA","GHOST-WHITE","WHITE-SMOKE","LIGHT-GRAY","DARK-GRAY","DIM-GRAY","ORANGE","ORANGERED","TOMATO","DARKRED","RED","FIREBRICK","CRIMSON","DEEPPINK","MAROON","INDIAN RED","INDIANRED","MEDIUM VIOLET RED","MEDIUMVIOLETRED","VIOLET RED","VIOLETRED","LIGHTCORAL","HOTPINK","PALEVIOLETRED","LIGHTPINK","ROSYBROWN","PINK","ORCHID","LAVENDERBLUSH","SNOW","CHOCOLATE","SADDLEBROWN","BROWN","DARKORANGE","CORAL","SIENNA","SALMON","PERU","DARKGOLDENROD","GOLDENROD","SANDYBROWN","LIGHTSALMON","DARKSALMON","GOLD","YELLOW","OLIVE","BURLYWOOD","TAN","NAVAJOWHITE","PEACHPUFF","KHAKI","DARKKHAKI","MOCCASIN","WHEAT","BISQUE","PALEGOLDENROD","BLANCHEDALMOND","MEDIUM GOLDENROD","MEDIUMGOLDENROD","PAPAYAWHIP","MISTYROSE","LEMONCHIFFON","ANTIQUEWHITE","CORNSILK","LIGHTGOLDENRODYELLOW","OLDLACE","LINEN","LIGHTYELLOW","SEASHELL","BEIGE","FLORALWHITE","IVORY","GREEN","LAWNGREEN","CHARTREUSE","GREEN YELLOW","GREENYELLOW","YELLOW GREEN","YELLOWGREEN","MEDIUM FOREST GREEN","OLIVEDRAB","MEDIUMFORESTGREEN","DARK OLIVE GREEN","DARKOLIVEGREEN","DARKSEAGREEN","LIME","DARK GREEN","DARKGREEN","LIME GREEN","LIMEGREEN","FOREST GREEN","FORESTGREEN","SPRING GREEN","SPRINGGREEN","MEDIUM SPRING GREEN","MEDIUMSPRINGGREEN","SEA GREEN","SEAGREEN","MEDIUM SEA GREEN","MEDIUMSEAGREEN","AQUAMARINE","LIGHTGREEN","PALE GREEN","PALEGREEN","MEDIUM AQUAMARINE","MEDIUMAQUAMARINE","TURQUOISE","LIGHTSEAGREEN","MEDIUM TURQUOISE","MEDIUMTURQUOISE","HONEYDEW","MINTCREAM","ROYALBLUE","DODGERBLUE","DEEPSKYBLUE","CORNFLOWERBLUE","STEEL BLUE","STEELBLUE","LIGHTSKYBLUE","DARK TURQUOISE","CYAN","AQUA","DARKCYAN","TEAL","SKY BLUE","CADET BLUE","CADETBLUE","DARK SLATE GRAY","DARKSLATEGRAY","LIGHTSLATEGRAY","SLATEGRAY","LIGHT STEEL BLUE","LIGHTSTEELBLUE","LIGHT BLUE","LIGHTBLUE","POWDERBLUE","PALETURQUOISE","LIGHTCYAN","ALICEBLUE","AZURE","MEDIUM BLUE","MEDIUMBLUE","DARKBLUE","MIDNIGHT BLUE","MIDNIGHTBLUE","NAVY","BLUE","INDIGO","BLUE VIOLET","BLUEVIOLET","MEDIUM SLATE BLUE","MEDIUMSLATEBLUE","SLATE BLUE","SLATEBLUE","PURPLE","DARK SLATE BLUE","DARKSLATEBLUE","DARKVIOLET","DARK ORCHID","DARKORCHID","MEDIUMPURPLE","CORNFLOWER BLUE","MEDIUM ORCHID","MEDIUMORCHID","MAGENTA","FUCHSIA","DARKMAGENTA","VIOLET","PLUM","LAVENDER","THISTLE","GHOSTWHITE","WHITE","WHITESMOKE","GAINSBORO","LIGHT GRAY","LIGHTGRAY","SILVER","GRAY","DARK GRAY","DARKGRAY","DIM GRAY","DIMGRAY","BLACK","TRANSPARENT","genKey","Math","round","random","g","b","arguments","checkColor","maybeColor","color","replace","toUpperCase","makeCircle","mode","makeRectangle","height","makeEquiTriangle","A","B","C","makeTriangle","makeBeside","images","yplace","makeAbove","xplace","makeOverlay","circle","rectangle","overlay","placeImage","image","x","y","scene","max","s","area","sqrt","render","red","green","blue","alpha","react_default","createElement","cx","cy","fill","key","stroke","strokeWidth","render_circle","render_rect","D","pow","c","points","render_triangle","initY","yCorrect","h","make_list_renderer","w","dx","dy","renderoozle","render_beside","initX","xCorrect","render_above","render_overlay","render_place","xChange","yChange","render_list","first","door","dryRun","picture","viewBox","xmlns","paint","emptyScene","yo","imgPath","keyCount","takeKey","peekKey","lookahead","showBSL","deepEquals","proga","progb","functCheck","argCheck","arga","elem","RemButton","props","className","style","src","alt","title","onClick","ValidatedInput","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","textChange","bind","assertThisInitialized","e","target","setState","isValid","onValid","dummy","onEmpty","size","placeholder","onChange","React","Component","Succinct","tableChange","newTab","oldTab","alteredTabs","indexOf","programChange","validName","modTab","tableVars","otherTab","paramVars","reals","App_ValidatedInput","objectSpread","deadTab","aliveTabs","remTable","SuccinctTab","tableNames","formulasChange","SuccinctHead","paramsExamplesChange","SuccinctBody","paramNames","examplesFormulasChange","validProg","isgood","formulaChange","newForm","oldForm","alteredForms","countWidth","child","abyss","maxDepth","curMax","numParams","colSpan","deadForm","aliveForms","remFormula","_","children","countUp","depth","DepictFormula","numExamples","Array","Parameters","validParam","modParam","paramChange","newParam","alteredParams","alteredExamples","deadParam","deadIndex","aliveParams","modExamples","remParam","Fragment","childChange","newChild","modChild","deadChild","aliveChildren","remChild","exampleChange","newExample","oldExample","exists","addAnotherOutputToFormula","deadExample","aliveExamples","removeOutputFromFormula","remExample","Inputs","inputsChange","Outputs","row","Want","wantChange","inputChange","newInput","oldInput","alteredInputs","TestCell","output","DummyCell","error","img","message","float","console","log","App","_this2","makeLookup","expr","lookups","globalEnv","calcFormula","localEnv","subExamples","maybeSpecial","newFormula","newProg","calkedProg","calculate","bslField","_this3","rows","cols","readOnly","defaultValue","id","htmlFor","Boolean","window","location","hostname","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1f27beb8.chunk.js","sourcesContent":["\n/****************\n   Interpreter\n****************/\n\nconst RVAR_T =    0;\nconst RAPP_T =    1;\nconst RFUNCT_T =   2;\nconst RNUM_T =    3;\nconst RBOOL_T =   4;\nconst RSTRING_T = 5;\nconst RLIST_T =   6;\nconst RSYM_T =    7;\n\nconst varRE = /^[^\\s\",'`()[\\]{}|;#]+/; // except numbers\nconst appRE = /^\\(/;\nconst numRE = /^-?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?=$|[\\s\",'`()[\\]{}|;#])/; // this one doesn't permit fractions\nconst boolRE = /^#(?:[tfTF]|true|false)(?=$|[\\s\",'`()[\\]{}|;#])/;\nconst strRE = /^\"[^\\\\\"]*\"/; // TODO: handle backslash escape\nconst quoteRE = /^'/;\nconst symRE = /^[^\\s\",'`()[\\]{}|;#]+/; // except numbers\nconst listRE = /^\\(/;\n\nconst initEnv = [\n    // functions\n    {name: '+', binding: {type: RFUNCT_T,\n                          value: plus}},\n    {name: '-', binding: {type: RFUNCT_T,\n                          value: minus}},\n    {name: '*', binding: {type: RFUNCT_T,\n                          value: times}},\n    {name: '/', binding: {type: RFUNCT_T,\n                          value: divide}},\n    {name: 'car', binding: {type: RFUNCT_T,\n                            value: car}},\n    {name: 'first', binding: {type: RFUNCT_T,\n                              value: car}},\n    {name: 'cdr', binding: {type: RFUNCT_T,\n                            value: cdr}},\n    {name: 'rest', binding: {type: RFUNCT_T,\n                             value: cdr}},\n    {name: 'cons', binding: {type: RFUNCT_T,\n                             value: cons}},\n    {name: 'list', binding: {type: RFUNCT_T,\n                             value: list}},\n    {name: 'not', binding: {type: RFUNCT_T,\n                            value: not}},\n    {name: 'and', binding: {type: RFUNCT_T,\n                            value: and}},\n    {name: 'or', binding: {type: RFUNCT_T,\n                           value: or}},\n    {name: 'if', binding: {type: RFUNCT_T,\n                           value: rif}},\n    {name: 'eqv?', binding: {type: RFUNCT_T,\n                             value: iseqv}},\n    {name: 'null?', binding: {type: RFUNCT_T,\n                              value: isnull}},\n    {name: 'empty?', binding: {type: RFUNCT_T,\n                               value: isnull}},\n    {name: 'cons?', binding: {type: RFUNCT_T,\n                               value: iscons}},\n    {name: '=', binding: {type: RFUNCT_T,\n                          value: equalsign}},\n    {name: '>', binding: {type: RFUNCT_T,\n                          value: gtsign}},\n    {name: '>=', binding: {type: RFUNCT_T,\n                           value: gesign}},\n    {name: '<', binding: {type: RFUNCT_T,\n                          value: ltsign}},\n    {name: '<=', binding: {type: RFUNCT_T,\n                           value: lesign}},\n    // constants\n    {name: 'true', binding: {type: RBOOL_T,\n                             value: true}},\n    {name: 'false', binding: {type: RBOOL_T,\n                              value: false}},\n    {name: 'null', binding: {type: RLIST_T,\n                             value: null}},\n    {name: 'empty', binding: {type: RLIST_T,\n                              value: null}},\n];\n\n// String -> {prog: Program, rest: String}\n// parses all expressions except quoted expressions\nfunction parse(text) {\n    if (numRE.test(text)) {\n        let matches = text.match(numRE);\n        let numStr = matches[0];\n        let rest = text.slice(numStr.length).trim();\n        let num = {value: +numStr, type: RNUM_T};\n\n        return {prog: num, rest: rest};\n    } else if (varRE.test(text)) {\n        let matches = text.match(varRE);\n        let name = matches[0];\n        let rest = text.slice(name.length).trim();\n        let variable = {value: name, type: RVAR_T};\n\n        return {prog: variable, rest: rest};\n\n\n    } else if (boolRE.test(text)) {\n        let matches = text.match(boolRE);\n        let boolStr = matches[0];\n        let rest = text.slice(boolStr.length).trim();\n        let bool = {value: boolStr[1].toLowerCase() === 't', type: RBOOL_T};\n\n        return {prog: bool, rest: rest};\n\n    } else if (strRE.test(text)) {\n        let matches = text.match(strRE);\n        let str = {value: matches[0], type: RSTRING_T};\n        let rest = text.slice(matches[0].length).trim();\n\n        return {prog: str, rest: rest};\n\n    } else if (appRE.test(text)) {\n        text = text.slice(1).trim(); // remove open paren\n        let parseFunct = parse(text); // parse function\n        let funct = parseFunct.prog; // get function\n        text = parseFunct.rest; // get past function\n        let args = [];\n\n        while (text[0] !== ')') {\n            let parseArg = parse(text);\n            args = [...args, parseArg.prog];\n            text = parseArg.rest;\n        }\n\n        let app = {value: {funct: funct, args: args}, type: RAPP_T};\n        let rest = text.slice(1).trim(); // remove close paren\n\n        return {prog: app, rest: rest};\n\n    } else if (quoteRE.test(text)) {\n        return parseQ(text.slice(1).trim());\n    }\n\n    throw new SyntaxError('Invalid Syntax: \"' + text + '\"');\n}\n\n// String -> {prog: Program, rest: String}\n// parses quoted expressions\nfunction parseQ(text) {\n    if (listRE.test(text)) {\n        text = text.slice(1).trim(); // remove quote, open paren\n        let listArr = [];\n\n        while (text[0] !== ')') {\n            let cur = parseQ(text);\n            listArr = [cur.prog, ...listArr]; // listArr is constructed backwards\n            text = cur.rest;\n        }\n\n        let rest = text.slice(1).trim();\n        let prog = listArr.reduce((acc, cur) => ({value: {a: cur, d: acc}, type: RLIST_T}), {value: null, type: RLIST_T}); // turn listArr into an Rlist\n\n        return {prog: prog, rest: rest};\n\n    } else if (numRE.test(text)) {\n        let matches = text.match(numRE);\n        let numStr = matches[0];\n        let rest = text.slice(numStr.length).trim();\n        let num = {value: +numStr, type: RNUM_T};\n\n        return {prog: num, rest: rest};\n\n    } else if (boolRE.test(text)) {\n        let matches = text.match(boolRE);\n        let boolStr = matches[0];\n        let rest = text.slice(boolStr.length).trim();\n        let bool = {value: boolStr.charAt(1).toLowerCase() === 't', type: RBOOL_T};\n\n        return {prog: bool, rest: rest};\n\n    } else if (strRE.test(text)) {\n        let matches = text.match(strRE);\n        let str = {value: matches[0], type: RSTRING_T};\n        let rest = text.slice(matches[0].length).trim();\n\n        return {prog: str, rest: rest};\n\n    } else if (symRE.test(text)) {\n        let matches = text.match(symRE);\n        let value = matches[0];\n        let sym = {value: value, type: RSYM_T};\n        let rest = text.slice(matches[0].length).trim();\n\n        return {prog: sym, rest: rest};\n    }\n\n    throw new SyntaxError('Invalid Syntax: \"' + text + '\"');\n}\n\n/***\n    Environment: [Variable]\n    Variable:    {name:    String,\n    binding: Program}\n***/\n\n// Program -> Environment -> Program\nfunction interp(prog, env) {\n    function lookup(name) {\n        let val = env.reduce((acc, variable) => {\n            if (acc !== undefined) {\n                return acc;\n            }\n\n            return variable.name === name ? variable.binding : undefined;\n        }, undefined);\n\n        if (val === undefined){\n            throw new ReferenceError(name + ' isn\\'t defined');\n        }\n\n        return val;\n    }\n\n    switch(prog.type) {\n    case RNUM_T:\n        return prog;\n    case RBOOL_T:\n        return prog;\n    case RSTRING_T:\n        return prog;\n    case RLIST_T:\n        return prog;\n    case RSYM_T:\n        return prog;\n    case RVAR_T:\n        return lookup(prog.value);\n    case RFUNCT_T:\n        return prog;\n    case RAPP_T:\n        // interpret function (valof rator env)\n        let funct = interp(prog.value.funct, env);\n        // interpret arguments (valof rand env)\n        let args = prog.value.args.map((arg) => interp(arg, env));\n\n        typeCheck(funct, RFUNCT_T);\n\n        return funct.value(args);\n\n    default:\n        throw new TypeError(\"Unknown Type \" + prog.value);\n    }\n}\n\n// Program -> String\nfunction unparse_cons(prog) {\n    switch (prog.type) {\n    case RNUM_T:\n        return prog.value;\n    case RBOOL_T:\n        return '#' + (prog.value ? 'true' : 'false');\n    case RSTRING_T:\n        return prog.value;\n    case RLIST_T:\n        if (prog.value === null) {\n            return '\\'()';\n        } else {\n            return `(cons ${unparse_cons(prog.value.a)} ${unparse_cons(prog.value.d)})`;\n        }\n    case RSYM_T:\n        return \"'\" + prog.value;\n    case RVAR_T:\n        return prog.value;\n    case RFUNCT_T:\n        return 'function';\n    case RAPP_T:\n        return `(${unparse_cons(prog.value.funct)} ${prog.value.args.map(unparse_cons).join(' ')})`;\n    default:\n        return 'error or something';\n    }\n}\n\n// Program -> String\nfunction unparse_list (prog) {\n    switch (prog.type) {\n    case RNUM_T:\n        return prog.value;\n    case RBOOL_T:\n        return '#' + (prog.value ? 'true' : 'false');\n    case RSTRING_T:\n        return prog.value;\n    case RLIST_T:\n        let elems = '';\n        while (prog.value !== null) {\n            elems += ' ' + unparse_list(prog.value.a);\n            prog = prog.value.d;\n        }\n        return `(list${elems})`;\n    case RSYM_T:\n        return \"'\" + prog.value;\n    case RVAR_T:\n        return prog.value;\n    case RFUNCT_T:\n        return 'function';\n    case RAPP_T:\n        return `(${unparse_list(prog.value.funct)} ${prog.value.args.map(unparse_list).join(' ')})`;\n    default:\n        return 'error or something';\n    }\n}\n\n// String -> Program\n// parses text and checks for syntax errors based on what's returned\nfunction parseCheck(text) {\n    let parsed = parse(text);\n\n    switch (parsed.rest) {\n    case '':\n        break;\n    default:\n        throw new SyntaxError('Parsing Error');\n    }\n\n    return parsed.prog;\n}\n\n// Program -> Number -> Side Effect Maybe\nfunction typeCheck(prog, type){\n    let typeString = '';\n    switch (type) {\n    case RVAR_T:\n        typeString = 'variable';\n        break;\n    case RAPP_T:\n        typeString = 'application';\n        break;\n    case RFUNCT_T:\n        typeString = 'function';\n        break;\n    case RNUM_T:\n        typeString = 'number';\n        break;\n    case RBOOL_T:\n        typeString = 'boolean';\n        break;\n    case RSTRING_T:\n        typeString = 'string';\n        break;\n    case RLIST_T:\n        typeString = 'list';\n        break;\n    case RSYM_T:\n        typeString = 'symbol';\n        break;\n    default:\n        typeString = '???';\n    }\n\n    if (prog.type !== type){\n        // TODO maybe change me to use whatever unpareser is currently being used somehow\n        throw new TypeError(unparse_cons(prog) + ' ain\\'t a ' + typeString);\n    }\n}\n\nfunction plus(args) {\n    args.forEach((cur) => typeCheck(cur, RNUM_T));\n\n    return args.reduce((acc, cur) => {\n        return {value: acc.value + cur.value,\n                type: RNUM_T};\n    });\n}\nfunction minus(args) {\n    args.forEach((cur) => typeCheck(cur, RNUM_T));\n\n    return args.reduce((acc, cur) => {\n        return {value: acc.value - cur.value,\n                type: RNUM_T};\n    });\n}\nfunction times(args) {\n    args.forEach((cur) => typeCheck(cur, RNUM_T));\n\n    return args.reduce((acc, cur) => {\n        return {value: acc.value * cur.value,\n                type: RNUM_T};\n    });\n}\nfunction divide(args) {\n    if (args.length === 1) {\n        let firstArg = args[0];\n\n        typeCheck(firstArg, RNUM_T);\n\n        return {value: 1 / firstArg.value,\n                type: RNUM_T};\n    } else if (args.length === 2) {\n        let firstArg = args[0];\n        let secondArg = args[1];\n\n        typeCheck(firstArg, RNUM_T);\n        typeCheck(secondArg, RNUM_T);\n\n        return {value: firstArg.value / secondArg.value,\n                type: RNUM_T};\n    }\n\n    args.forEach((cur) => typeCheck(cur, RNUM_T));\n    return {value: false, type: RBOOL_T};\n}\nfunction car(args) {\n    if (args.length !== 1) {\n        throw new Error('arity mismatch');\n    }\n\n    let firstArg = args[0];\n\n    typeCheck(firstArg, RLIST_T);\n\n    return firstArg.value.a;\n}\nfunction cdr(args) {\n    if (args.length !== 1) {\n        throw new Error('arity mismatch');\n    }\n\n    let firstArg = args[0];\n\n    typeCheck(firstArg, RLIST_T);\n\n    return firstArg.value.d;\n}\nfunction cons(args) {\n    if (args.length !== 2) {\n        throw new Error('arity mismatch');\n    }\n\n    let firstArg = args[0];\n    let secondArg = args[1];\n\n    // because BSL\n    typeCheck(secondArg, RLIST_T);\n\n    return {value: {a: firstArg, d: secondArg},\n            type: RLIST_T};\n}\nfunction list(args) {\n    return args.reverse().reduce((acc, arg) => ({value: {a: arg, d: acc},\n                                                       type: RLIST_T}),\n                                       {value: null,\n                                        type: RLIST_T});\n}\nfunction not(args) {\n    if (args.length !== 1) {\n        throw new Error('arity mismatch');\n    }\n\n    let firstArg = args[0];\n\n    return {value: firstArg.value === false,\n            type: RBOOL_T};\n}\nfunction iseqv(args) {\n    if (args.length !== 2) {\n        throw new Error('arity mismatch');\n    }\n\n    let firstArg = args[0];\n    let secondArg = args[1];\n\n    return {value: firstArg.value === secondArg.value,\n            type: RBOOL_T};\n}\nfunction and(args) {\n    return args.reduce((acc, cur) => {\n        return acc.value !== false ? cur : {value: false, type: RBOOL_T};\n    }, {value: true, type: RBOOL_T});\n\n}\nfunction or(args) {\n    return args.reduce((acc, cur) => {\n        return acc.value !== false ? acc : cur;\n    }, {value: true, type: RBOOL_T});\n\n}\nfunction rif(args) {\n    if (args.length !== 3) {\n        throw new Error('arity mismatch');\n    }\n\n    let firstArg = args[0];\n    let secondArg = args[1];\n    let thirdArg = args[2];\n\n    typeCheck(firstArg, RBOOL_T);\n\n    return firstArg.value ? secondArg : thirdArg;\n}\nfunction isnull(args) {\n    if (args.length !== 1) {\n        throw new Error('arity mismatch');\n    }\n\n    let firstArg = args[0];\n\n    return {value: firstArg.value === null && firstArg.type === RLIST_T,\n            type: RBOOL_T};\n}\nfunction iscons(args) {\n    if (args.length !== 1) {\n        throw new Error('arity mismatch');\n    }\n\n    let firstArg = args[0];\n\n    return {value: firstArg.value !== null && firstArg.type === RLIST_T,\n            type: RBOOL_T};\n}\nfunction equalsign(args) {\n    args.forEach((cur) => typeCheck(cur, RNUM_T));\n\n    let val = args.reduce((acc, cur) => {\n\n        if (acc.value === false) {\n            return {value: false, type: RBOOL_T};\n        }\n\n        return acc.value===cur.value ? acc : {value: false, type: RBOOL_T};\n    });\n\n    if (val.value === false){\n        return val;\n    } else {\n        return {value: true, type: RBOOL_T};\n    }\n}\nfunction gtsign(args) {\n    args.forEach((cur) => typeCheck(cur, RNUM_T));\n\n    let val = args.reduce((acc, cur) => {\n\n        if (acc.value === false) {\n            return {value: false, type: RBOOL_T};\n        }\n\n        return acc.value > cur.value ? acc : {value: false, type: RBOOL_T};\n    });\n\n    if (val.value === false){\n        return val;\n    } else {\n        return {value: true, type: RBOOL_T};\n    }\n}\nfunction gesign(args) {\n    args.forEach((cur) => typeCheck(cur, RNUM_T));\n\n    let val = args.reduce((acc, cur) => {\n\n        if (acc.value === false) {\n            return {value: false, type: RBOOL_T};\n        }\n\n        return acc.value >= cur.value ? acc : {value: false, type: RBOOL_T};\n    });\n\n    if (val.value === false){\n        return val;\n    } else {\n        return {value: true, type: RBOOL_T};\n    }\n}\nfunction ltsign(args) {\n    args.forEach((cur) => typeCheck(cur, RNUM_T));\n\n    let val = args.reduce((acc, cur) => {\n\n        if (acc.value === false) {\n            return {value: false, type: RBOOL_T};\n        }\n\n        return acc.value < cur.value ? acc : {value: false, type: RBOOL_T};\n    });\n\n    if (val.value === false){\n        return val;\n    } else {\n        return {value: true, type: RBOOL_T};\n    }\n}\nfunction lesign(args) {\n    args.forEach((cur) => typeCheck(cur, RNUM_T));\n\n    let val = args.reduce((acc, cur) => {\n\n        if (acc.value === false) {\n            return {value: false, type: RBOOL_T};\n        }\n\n        return acc.value <= cur.value ? acc : {value: false, type: RBOOL_T};\n    });\n\n    if (val.value === false){\n        return val;\n    } else {\n        return {value: true, type: RBOOL_T};\n    }\n}\n\nexport {interp, parseCheck, unparse_cons, unparse_list, initEnv,\n        RVAR_T, RAPP_T, RFUNCT_T, RNUM_T, RBOOL_T, RSTRING_T, RLIST_T, RSYM_T,\n        varRE};\n","import {RBOOL_T} from './interpreter.js';\n\n/************\n    Colors\n************/\n\n// value to put in child formulas that don't have an output for that row\nexport const gray = {gray: 'gray'};\n// value to put in child formulas that have an error output for that row (non-boolean and non-gray)\nexport const pink = {pink: 'pink'};\n// value that indicates an uninitialized input\nexport const yellow = {yellow: 'yellow'};\n\n/*********************\n   Functions I Want\n*********************/\n// [Program] -> Boolean\n// returns true if progs has at least one member and all of its members are boooleans\n//    otherwise returns false\nexport function allBools(progs){\n    if (progs.length === 0 || progs.every((prog) => prog === gray)) {\n        return false;\n    }\n\n    return progs.every((prog) => prog.type === RBOOL_T || prog === gray);\n}\n\nexport function isBooleanFormula(formula) {\n    return allBools(formula.outputs) || formula.thenChildren !== undefined;\n}\n\n","import {yellow, isBooleanFormula} from './header.js';\nimport {RVAR_T, RAPP_T, RFUNCT_T, RNUM_T, RBOOL_T, RSTRING_T, RLIST_T, RSYM_T} from './interpreter.js';\n\n/*********************\n    Pretty Printer\n*********************/\n\n/***\n  Data Definitions\n  \n  A Doc is one of\n    - Nil\n    - Compose\n    - Nest\n    - Text\n    - Line\n    - Union\n  \n  A Nil is\n    {type: 'nil'}\n    \n  A Compose is\n    {type: 'compose',\n     left: Doc,\n     right: Doc}\n     \n  A Nest is\n    {type:   'nest',\n     indent: Integer,\n     rest:   Doc}\n\n  A Text is\n     {type: 'text',\n      text: String}\n      \n  A Line is\n    {type: 'line'}\n     \n  A Union is\n    {type:  'union',\n     left:  Doc,\n     right: Doc}\n     \n  A Pair is\n    {doc:    Doc,\n     indent: Integer}\n***/\n\n// Doc\nconst nil = {type: 'nil'};\n\n// String -> Doc\nfunction text (string) {\n    if (string === '') {\n        return nil;\n    } else {\n        return {type: 'text', text: String(string)};\n    }\n}\n\n// String -> Doc -> Doc\nfunction Text (string, doc) {\n    return compose(text(string), doc);\n}\n\n// Doc\nconst line = {type: 'line'};\n\n// Integer -> Doc -> Doc\nfunction Line (i, doc) {\n    return compose(nest(i, line), doc);\n}\n\n// Doc -> Doc -> Doc\nfunction union (docL, docR) {\n    return {type: 'union', left: docL, right: docR};\n}\n\nfunction Union (docL, docR) {\n    return union(docL, docR);\n}\n\n// Doc -> Doc -> Doc\n// in the paper this is written as <> and is sometimes called 'concatenate'\n//   I prefer the name 'compose' so as to not confuse the term with\n//   string concatenation\n// however it may be confused with function composition...\nfunction compose (docL, docR) {\n    // switch(docR.type) {\n    // case 'union':\n    //     return union(compose(docL, docR.left), compose(docL, docR.right));\n    // default:\n    //     break;\n    // }\n    switch (docL.type) {\n    case 'nil':\n        return docR;\n    case 'compose':\n        return {type: 'compose', left: docL.left, right: compose(docL.right, docR)};\n    case 'union':\n        return union(compose(docL.left, docR), compose(docL.right, docR));\n    default:\n        return {type: 'compose', left: docL, right: docR};\n    }\n}\n\n// Integer -> Doc -> Doc\nfunction nest (i, doc) {\n    switch (doc.type) {\n    case 'nil':\n        return nil;\n    case 'compose':\n        return compose(nest(i, doc.left), nest(i, doc.right));\n    case 'nest':\n        return {type: 'nest', indent: doc.indent + i, rest: doc.rest};\n    case 'text':\n        return doc;\n    case 'line':\n        return {type: 'nest', indent: i, rest: doc};\n    case 'union':\n        return union(nest(i, doc.left), nest(i, doc.right));\n    default:\n        throw Error(`unnexpected document type: ${doc.type}`);\n    }\n}\n\n// Doc -> String\nfunction layout (doc) {\n    switch (doc.type) {\n    case 'nil':\n        return '';\n    case 'compose':\n        return layout(doc.left) + layout(doc.right);\n    case 'nest':\n        return layout(doc.rest) +  ' '.repeat(doc.indent); // doc.rest has to be a line\n    case 'text':\n        return doc.text;\n    case 'line':\n        return '\\n';\n    default:\n        throw Error(`unnexpected document type: ${doc.type}`);\n    }\n}\n\n// Doc -> Doc\nfunction group (doc) {\n    return union(flatten(doc), doc);\n}\n\n// Doc -> Doc\nfunction flatten (doc) {\n    switch (doc.type) {\n    case 'nil':\n        return nil;\n    case 'compose':\n        return compose(flatten(doc.left), flatten(doc.right));\n    case 'nest':\n        return flatten(doc.rest);\n    case 'text':\n        return doc;\n    case 'line':\n        return text(' ');\n    case 'union':\n        return flatten(doc.left);\n    default:\n        throw Error(`unnexpected document type: ${doc.type}`);\n    }\n}\n\n// Integer -> Integer -> (Doc -> String)\nfunction makePretty (width, ribbon) {\n\n    // Integer -> Integer  -> [Pair] -> Doc\n    // it's like best, but better!\n    function be (r, k, pairs) {\n        if (pairs.length === 0) {\n            return nil;\n        }\n\n        let doc = pairs[0].doc;\n        let indent = pairs[0].indent;\n        let rest = pairs.splice(1);\n\n        switch (doc.type) {\n        case 'nil':\n            return be(r, k, rest);\n        case 'compose':\n            return be(r, k, [{indent, doc: doc.left}, {indent, doc: doc.right}, ...rest]);\n        case 'nest':\n            return be(r, k, [{indent: indent + doc.indent, doc: doc.rest}, ...rest]);\n        case 'text':\n            return Text(doc.text, be(r, k + doc.text.length, rest));\n        case 'line':\n            return Line(indent, be(r + indent, indent, rest));\n        case 'union':\n            return better(r, k, be(r, k, [{indent, doc: doc.left}, ...rest]),\n                                be(r, k, [{indent, doc: doc.right}, ...rest]));\n        default:\n            throw Error(`unnexpected document type: ${doc.type}`);\n        }\n    }\n\n    // Integer -> Integer -> Doc -> Doc\n    function best (thisRibbon, current, doc) {\n        return be(thisRibbon, current, [{indent: 0, doc: doc}])\n    }\n\n    // Integer -> Integer -> Integer -> Doc -> Doc -> Doc\n    function better (thisRibbon, current, docL, docR) {\n        if (fits(width - current, thisRibbon - current, docL)) {\n            return docL;\n        } else {\n            return docR;\n        }\n    }\n\n    // Integer -> Integer -> Doc -> Boolean\n    function fits(diffWidth, diffRibbon, doc) {\n        if (diffWidth < 0 || diffRibbon < 0) {\n            return false;\n        }\n\n        switch (doc.type) {\n        case 'nil':\n            return true;\n        case 'compose':\n            switch (doc.left.type) {\n            case 'text':\n                return fits(diffWidth - doc.left.text.length, diffRibbon - doc.left.text.length, doc.right);\n            case 'nest': // TODO: not sure if this should be here\n                return fits(diffWidth - doc.left.indent, diffRibbon - doc.left.indent, doc.right);\n            case 'line':\n                return true;\n            default:\n                throw Error(`unnexpected document type: ${doc.left.type}`);\n            }\n        default:\n            throw Error(`unnexpected document type: ${doc.type}`);\n        }\n    }\n\n    // Doc -> String\n    function pretty (doc) {\n        return layout(best(ribbon, 0, doc));\n        //return layout(best(ribbon, 0, doc));\n    }\n\n    return pretty;\n}\n\n/***\n   Utility Functions\n                   ***/\n\n// Doc -> Doc -> Doc\nfunction putSpace (docL, docR) {\n    return compose(docL, compose(text(' '), docR));\n}\n\n// Doc -> Doc -> Doc\nfunction putLine (docL, docR) {\n    return compose(docL, compose(line, docR));\n}\n\n// Doc -> Doc -> Doc\nfunction spaceOrLine(docL, docR) {\n    return union(putSpace(docL, docR), putLine(docL, docR));\n}\n\n// (Doc -> Doc -> Doc) -> [Doc] -> Doc\nfunction folddoc (f, docs) {\n    if (docs.length === 0) {\n        return nil;\n    } else if (docs.length === 1) {\n        return docs[0];\n    } else {\n        return f(docs[0], folddoc(f, docs.splice(1)));\n    }\n}\n\n// [☺String, Doc☹] -> Doc\n// where [☺String, Doc☹] means an array of elements that are either a Doc or a String (disjunction or whatever)\nfunction docify(stuff) {\n    return stuff.map((elem) => typeof elem === 'string' ? text(elem) : elem);\n}\n\n// [Doc] -> Doc\n// puts a space between docs\nfunction spread (docs) {\n    return folddoc(putSpace, docs);\n}\n\n// [Doc] -> Doc\n// puts a line between docs\nfunction stack (docs) {\n    return folddoc(putLine, docs);\n}\n\n// [Doc] -> Doc\n// puts more lines between docs\nfunction superstack (docs) {\n    return folddoc((docL, docR) => compose(docL, compose(line, compose(line, compose(line, docR)))), docs);\n}\n\n// [Doc] -> Doc\n// fills available horizontal space\nfunction fill(docs){\n    return folddoc(spaceOrLine, docs);\n}\n\n// [Doc] -> Doc\n// puts docs right next to eachother\nfunction level (docs) {\n    return folddoc(compose, docs);\n}\n\n// String -> Doc -> String -> Doc\n// puts the given document between left and right\nfunction bracket (left, doc, right) {\n    return level([text(left), doc, text(right)]);\n}\n\n\n/**************************************\n    Thing that Turns Tables Into BSL\n**************************************/\n\n// Program -> Doc\nfunction progToDoc (program) {\n    switch (program.type) {\n    case RVAR_T:\n        return text(program.value);\n    case RAPP_T:\n        return nest(1, bracket('(', group(stack([progToDoc(program.value.funct), ...program.value.args.map(progToDoc)])), ')'));\n    case RFUNCT_T:\n        return text('function');\n    case RNUM_T:\n        return text(program.value);\n    case RBOOL_T:\n        return text('#' + program.value);\n    case RSTRING_T:\n        return text(program.value);\n    case RLIST_T: // this just does cons, not list\n        if (program.value === null) {\n            return text(\"'()\");\n        } else {\n            return nest(1, bracket('(', group(stack([text('cons'), progToDoc(program.value.a), progToDoc(program.value.d)])), ')'));\n        }\n    case RSYM_T:\n        return text(\"'\" + program.value);\n    default:\n        throw new Error('unknown program type');\n    }\n}\n\n// Program -> Doc\nfunction progToDoc_list (program) {\n    switch (program.type) {\n    case RVAR_T:\n        return text(program.value);\n    case RAPP_T:\n        return nest(1, bracket('(', group(stack([progToDoc(program.value.funct), ...program.value.args.map(progToDoc)])), ')'));\n    case RFUNCT_T:\n        return text('function');\n    case RNUM_T:\n        return text(program.value);\n    case RBOOL_T:\n        return text('#' + program.value);\n    case RSTRING_T:\n        return text(program.value);\n    case RLIST_T:\n        if (program.value === null) {\n            return text(\"'()\");\n        }\n\n        let list = program.value.d,\n            elems = progToDoc_list(program.value.a);\n        while (list.value !== null) {\n            elems = stack([elems, progToDoc_list(list.value.a)]);\n        }\n\n        return bracket('(', spread([text('list'), group(elems)]), ')');\n    case RSYM_T:\n        return text(\"'\" + program.value);\n    default:\n        throw new Error('unknown program type');\n    }\n}\n\n// makes a Haskell document (as defined in projects/haskellPretty/prettier.hs)\n// I'm too lazy to do this by hand\nfunction toHaskDoc (doc) {\n    switch (doc.type) {\n    case 'nil':\n        return 'nil';\n    case 'compose':\n        return `${toHaskDoc(doc.left)} :<> ${toHaskDoc(doc.right)}`;\n    case 'nest':\n        return `nest ${doc.indent} ${toHaskDoc(doc.rest)}`;\n    case 'text':\n        return `text \"${doc.text}\"`;\n    case 'line':\n        return 'line';\n    case 'union':\n        return `${toHaskDoc(doc.left)} :<|> ${toHaskDoc(doc.right)}`;\n    default:\n        throw Error('invalid doc type: '+doc.type);\n    }\n}\n\n// [Table] -> String\nfunction toBSL(tables, unparse, width, ribbon) {\n    let pretty = makePretty(width, ribbon);\n    let essaie = stack([...tables.map(tableToDoc), nil]);\n    //return toHaskDoc(essaie);\n    return pretty(essaie);\n    //return `${pretty(essaie)}\\n\\n\\n${toHaskDoc(essaie)}`;\n    //return 'hi';\n\n    // Table -> Doc\n    function tableToDoc(table) {\n        let name = fieldToDoc(table.name);\n        let params = spread(table.params.map((param) => fieldToDoc(param.name)));\n\n        let checkExpects = stack(table.examples.map((example) => {\n            let inputs = stack(example.inputs.map((input) => fieldToDoc(input.prog)));\n            let want = fieldToDoc(example.want);\n\n            return nest(1, bracket('(', group(stack([text('check-expect'), bracket('(', nest(1, stack([name, inputs])), ')'), want])), ')'));\n        }));\n\n        let body = formulasToDoc(table.formulas);\n        let funct = nest(2, bracket('(', spread([text('define'), group(stack([bracket('(', spread([name, params]), ')'), body]))]), ')'));\n        return stack([funct, line, checkExpects]);\n    }\n\n    // [Formula] -> Doc\n    function formulasToDoc(formulas) {\n        // [Formula] -> {bools: [Formula], nonbools: [Formula]}\n        function splitFormulas(formulas) {\n            let bools = formulas.filter(isBooleanFormula);\n            let nonbools = formulas.filter((formula) => !isBooleanFormula(formula));\n            return {bools, nonbools};\n        }\n\n        let splitForms = splitFormulas(formulas);\n\n        // this one's a doc\n        let nonbools = stack(splitForms.nonbools.map((form) => fieldToDoc(form.prog))),\n            bools;\n\n        if (splitForms.bools.length !== 0) {\n            // this is an array of documents\n            let condRows = splitForms.bools.map((form) => (\n                nest(1, bracket('[', stack([fieldToDoc(form.prog), formulasToDoc(form.thenChildren)]),']'))\n            ));\n            // this one is just a doc\n            bools = nest(2, bracket('(', stack([text('cond'), ...condRows]),')'));\n        }\n\n        if (splitForms.bools.length !== 0 && splitForms.nonbools.length !== 0) {\n            return stack([bools, nonbools]);\n        } else if (splitForms.bools.length !== 0) {\n            return bools;\n        } else if (splitForms.nonbools.length !== 0) {\n            return nonbools;\n        } else {\n            return nil;\n        }\n    }\n\n    // Field (yellow or string or program) -> Doc\n    function fieldToDoc(input) {\n        if (input === yellow) {                 // empty\n            return text('...');\n        } else if (typeof input === 'string') { // name\n            return text(input);\n        } else {                                // program\n            return progToDoc(input);\n        }\n    }\n}\n\n// Program -> Doc\nfunction progToDoc_noGroup (program) {\n    switch (program.type) {\n    case RVAR_T:\n        return text(program.value);\n    case RAPP_T:\n        return nest(1, bracket('(', stack([progToDoc_noGroup(program.value.funct), ...program.value.args.map(progToDoc_noGroup)]), ')'));\n    case RFUNCT_T:\n        return text('function');\n    case RNUM_T:\n        return text(program.value);\n    case RBOOL_T:\n        return text('#' + program.value);\n    case RSTRING_T:\n        return text(program.value);\n    case RLIST_T:\n        if (program.value === null) {\n            return text(\"'()\");\n        } else {\n            return nest(1, bracket('(', stack([text('cons'), progToDoc_noGroup(program.value.a), progToDoc_noGroup(program.value.d)]), ')'));\n        }\n    case RSYM_T:\n        return text(\"'\" + program.value);\n    default:\n        throw new Error('unknown program type');\n    }\n}\n\n// [Table] -> String\nfunction toBSL_noGroup(tables, unparse, width, ribbon) {\n    let pretty = makePretty(width, ribbon);\n    let essaie = stack([...tables.map(tableToDoc), nil]);\n    //return toHaskDoc(essaie);\n    return pretty(essaie);\n    //return `${pretty(essaie)}\\n\\n\\n${toHaskDoc(essaie)}`;\n    //return 'hi';\n\n    // Table -> Doc\n    function tableToDoc(table) {\n        let name = fieldToDoc(table.name);\n        let params = spread(table.params.map((param) => fieldToDoc(param.name)));\n\n        let checkExpects = stack(table.examples.map((example) => {\n            let inputs = stack(example.inputs.map((input) => fieldToDoc(input.prog)));\n            let want = fieldToDoc(example.want);\n\n            return nest(1, bracket('(', stack([text('check-expect'), bracket('(', nest(1, stack([name, inputs])), ')'), want]), ')'));\n        }));\n\n        let body = formulasToDoc(table.formulas);\n        let funct = nest(2, bracket('(', spread([text('define'), stack([bracket('(', spread([name, params]), ')'), body])]), ')'));\n        return stack([funct, line, checkExpects]);\n    }\n\n    // [Formula] -> Doc\n    function formulasToDoc(formulas) {\n        // [Formula] -> {bools: [Formula], nonbools: [Formula]}\n        function splitFormulas(formulas) {\n            let bools = formulas.filter(isBooleanFormula);\n            let nonbools = formulas.filter((formula) => !isBooleanFormula(formula));\n            return {bools, nonbools};\n        }\n\n        let splitForms = splitFormulas(formulas);\n\n        // this one's a doc\n        let nonbools = stack(splitForms.nonbools.map((form) => fieldToDoc(form.prog))),\n            bools;\n\n        if (splitForms.bools.length !== 0) {\n            // this is an array of documents\n            let condRows = splitForms.bools.map((form) => (\n                nest(1, bracket('[', stack([fieldToDoc(form.prog), formulasToDoc(form.thenChildren)]),']'))\n            ));\n            // this one is just a doc\n            bools = nest(2, bracket('(', stack([text('cond'), ...condRows]),')'));\n        }\n\n        if (splitForms.bools.length !== 0 && splitForms.nonbools.length !== 0) {\n            return stack([bools, nonbools]);\n        } else if (splitForms.bools.length !== 0) {\n            return bools;\n        } else if (splitForms.nonbools.length !== 0) {\n            return nonbools;\n        } else {\n            return nil;\n        }\n    }\n\n    // Field (yellow or string or program) -> Doc\n    function fieldToDoc(input) {\n        if (input === yellow) {                 // empty\n            return text('...');\n        } else if (typeof input === 'string') { // name\n            return text(input);\n        } else {                                // program\n            return progToDoc_noGroup(input);\n        }\n    }\n}\n\n/****************\n    Unparsers\n****************/\nconst widePretty = makePretty(Infinity, Infinity);\n\nexport let unparse_cons = (prog) => widePretty(progToDoc(prog));\nexport let unparse_list = (prog) => widePretty(progToDoc_list(prog));\n\nexport default toBSL_noGroup;\n// export default toBSL;\n","/*******************************************\n    This here is the image library in js\n*******************************************/\n\n\n/***\n    Data Definitions:\n    \n    An Image is one of\n      - Circle\n      - Rectangle\n      - Triangle\n      - Beside\n      - Above\n      - Overlay\n      - Place\n\n    A Circle is\n      {r:     Integer,\n       color: Color,\n       mode:  String,\n       type:  'circle'}\n     \n    A Rectangle is\n      {width:  Integer,\n       height: Integer,\n       color:  Color,\n       mode:   String,\n       type:   'rect'}\n       \n    A Triangle is                   \n      {A:      Integer,             /\\\n       B:      Integer,            /  \\\n       C:      Integer,        B  /    \\  C\n       color:  Color,            /      \\\n       mode:   String,          /________\\\n       type:   'triangle'}          A      \n       \n    note: only acute triangles are handled\n       \n    A Beside is\n      {type:   'beside',\n       yplace:  String,\n       images: [Image]} note: images must be non-empty\n       \n    An Above is\n      {type:   'above',\n       xplace:  String,\n       images: [Image]} note: images must be non-empty\n\n    An Overlay is\n      {type:   'overlay',\n       yplace: String\n       xplace: String,\n       images: [Image]} note: images must be non-empty\n       \n   A Place is\n     {type: place,\n      x:     Integer,\n      y:     Integer,\n      image: Image,\n      scene: Image}\n       \n    A Color is\n      {r: Integer,\n       g: Integer,\n       b: Integer,\n       a: Integer}\n***/\n\nimport React from 'react';\n\n// these colors taken from https://github.com/brownplt/code.pyret.org/blob/horizon/src/web/js/trove/image-lib.js\nconst colorDb = {\n    \"DARK-RED\" : makeColor(139, 0, 0),\n    \"FIRE-BRICK\" : makeColor(178, 34, 34),\n    \"DEEP-PINK\" : makeColor(255, 20, 147),\n    \"INDIAN-RED\" : makeColor(205, 92, 92),\n    \"MEDIUM-VIOLET-RED\" : makeColor(199, 21, 133),\n    \"VIOLET-RED\" : makeColor(208, 32, 144),\n    \"LIGHT-CORAL\" : makeColor(240, 128, 128),\n    \"HOT-PINK\" : makeColor(255, 105, 180),\n    \"PALE-VIOLET-RED\" : makeColor(219, 112, 147),\n    \"LIGHT-PINK\" : makeColor(255, 182, 193),\n    \"ROSY-BROWN\" : makeColor(188, 143, 143),\n    \"LAVENDER-BLUSH\" : makeColor(255, 240, 245),\n    \"SADDLE-BROWN\" : makeColor(139, 69, 19),\n    \"DARK-ORANGE\" : makeColor(255, 140, 0),\n    \"DARK-GOLDENRON\" : makeColor(184, 134, 11),\n    \"SANDY-BROWN\" : makeColor(244, 164, 96),\n    \"LIGHT-SALMON\" : makeColor(255, 160, 122),\n    \"DARK-SALMON\" : makeColor(233, 150, 122),\n    \"NAVAJO-WHITE\" : makeColor(255, 222, 173),\n    \"PEACH-PUFF\" : makeColor(255, 218, 185),\n    \"DARK-KHAKI\" : makeColor(189, 183, 107),\n    \"PALE-GOLDENROD\" : makeColor(238, 232, 170),\n    \"BLANCHE-DIAMOND\" : makeColor(255, 235, 205),\n    \"MEDIUM-GOLDENROD\" : makeColor(234, 234, 173),\n    \"PAPAYA-WHIP\" : makeColor(255, 239, 213),\n    \"MISTY-ROSE\" : makeColor(255, 228, 225),\n    \"LEMON-CHIFFON\" : makeColor(255, 250, 205),\n    \"ANTIQUE-WHITE\" : makeColor(250, 235, 215),\n    \"CORN-SILK\" : makeColor(255, 248, 220),\n    \"LIGHT-GOLDENRON-YELLOW\" : makeColor(250, 250, 210),\n    \"OLD-LACE\" : makeColor(253, 245, 230),\n    \"LIGHT-YELLOW\" : makeColor(255, 255, 224),\n    \"FLORAL-WHITE\" : makeColor(255, 250, 240),\n    \"LAWN-GREEN\" : makeColor(124, 252, 0),\n    \"GREEN-YELLOW\" : makeColor(173, 255, 47),\n    \"YELLOW-GREEN\" : makeColor(154, 205, 50),\n    \"OLIVE-DRAB\" : makeColor(107, 142, 35),\n    \"MEDIUM-FOREST-GREEN\" : makeColor(107, 142, 35),\n    \"DARK-OLIVE-GREEN\" : makeColor(85, 107, 47),\n    \"DARK-SEA-GREEN\" : makeColor(143, 188, 139),\n    \"DARK-GREEN\" : makeColor(0, 100, 0),\n    \"LIME-GREEN\" : makeColor(50, 205, 50),\n    \"FOREST-GREEN\" : makeColor(34, 139, 34),\n    \"SPRING-GREEN\" : makeColor(0, 255, 127),\n    \"MEDIUM-SPRING-GREEN\" : makeColor(0, 250, 154),\n    \"SEA-GREEN\" : makeColor(46, 139, 87),\n    \"MEDIUM-SEA-GREEN\" : makeColor(60, 179, 113),\n    \"LIGHT-GREEN\" : makeColor(144, 238, 144),\n    \"PALE-GREEN\" : makeColor(152, 251, 152),\n    \"MEDIUM-AQUAMARINE\" : makeColor(102, 205, 170),\n    \"LIGHT-SEA-GREEN\" : makeColor(32, 178, 170),\n    \"MEDIUM-TURQUOISE\" : makeColor(72, 209, 204),\n    \"MINT-CREAM\" : makeColor(245, 255, 250),\n    \"ROYAL-BLUE\" : makeColor(65, 105, 225),\n    \"DODGER-BLUE\" : makeColor(30, 144, 255),\n    \"DEEP-SKY-BLUE\" : makeColor(0, 191, 255),\n    \"CORNFLOWER-BLUE\" : makeColor(100, 149, 237),\n    \"STEEL-BLUE\" : makeColor(70, 130, 180),\n    \"LIGHT-SKY-BLUE\" : makeColor(135, 206, 250),\n    \"DARK-TURQUOISE\" : makeColor(0, 206, 209),\n    \"DARKTURQUOISE\" : makeColor(0, 206, 209),\n    \"SKY-BLUE\" : makeColor(135, 206, 235),\n    \"SKYBLUE\" : makeColor(135, 206, 235),\n    \"CADET-BLUE\" : makeColor(96, 160, 160),\n    \"DARK-SLATE-GRAY\" : makeColor(47, 79, 79),\n    \"LIGHT-STEEL-BLUE\" : makeColor(176, 196, 222),\n    \"LIGHT-BLUE\" : makeColor(173, 216, 230),\n    \"POWDER-BLUE\" : makeColor(176, 224, 230),\n    \"PALE-TURQUOISE\" : makeColor(175, 238, 238),\n    \"LIGHT-CYAN\" : makeColor(224, 255, 255),\n    \"ALICE-BLUE\" : makeColor(240, 248, 255),\n    \"MEDIUM-BLUE\" : makeColor(0, 0, 205),\n    \"DARK-BLUE\" : makeColor(0, 0, 139),\n    \"MIDNIGHT-BLUE\" : makeColor(25, 25, 112),\n    \"BLUE-VIOLET\" : makeColor(138, 43, 226),\n    \"MEDIUM-SLATE-BLUE\" : makeColor(123, 104, 238),\n    \"SLATE-BLUE\" : makeColor(106, 90, 205),\n    \"DARK-SLATE-BLUE\" : makeColor(72, 61, 139),\n    \"DARK-VIOLET\" : makeColor(148, 0, 211),\n    \"DARK-ORCHID\" : makeColor(153, 50, 204),\n    \"MEDIUM-PURPLE\" : makeColor(147, 112, 219),\n    \"MEDIUM-ORCHID\" : makeColor(186, 85, 211),\n    \"DARK-MAGENTA\" : makeColor(139, 0, 139),\n    \"GHOST-WHITE\" : makeColor(248, 248, 255),\n    \"WHITE-SMOKE\" : makeColor(245, 245, 245),\n    \"LIGHT-GRAY\" : makeColor(211, 211, 211),\n    \"DARK-GRAY\" : makeColor(169, 169, 169),\n    \"DIM-GRAY\" : makeColor(105, 105, 105),\n\n    \"ORANGE\" : makeColor(255, 165, 0),\n    \"ORANGERED\" : makeColor(255, 69, 0),\n    \"TOMATO\" : makeColor(255, 99, 71),\n    \"DARKRED\" : makeColor(139, 0, 0),\n    \"RED\" : makeColor(255, 0, 0),\n    \"FIREBRICK\" : makeColor(178, 34, 34),\n    \"CRIMSON\" : makeColor(220, 20, 60),\n    \"DEEPPINK\" : makeColor(255, 20, 147),\n    \"MAROON\" : makeColor(176, 48, 96),\n    \"INDIAN RED\" : makeColor(205, 92, 92),\n    \"INDIANRED\" : makeColor(205, 92, 92),\n    \"MEDIUM VIOLET RED\" : makeColor(199, 21, 133),\n    \"MEDIUMVIOLETRED\" : makeColor(199, 21, 133),\n    \"VIOLET RED\" : makeColor(208, 32, 144),\n    \"VIOLETRED\" : makeColor(208, 32, 144),\n    \"LIGHTCORAL\" : makeColor(240, 128, 128),\n    \"HOTPINK\" : makeColor(255, 105, 180),\n    \"PALEVIOLETRED\" : makeColor(219, 112, 147),\n    \"LIGHTPINK\" : makeColor(255, 182, 193),\n    \"ROSYBROWN\" : makeColor(188, 143, 143),\n    \"PINK\" : makeColor(255, 192, 203),\n    \"ORCHID\" : makeColor(218, 112, 214),\n    \"LAVENDERBLUSH\" : makeColor(255, 240, 245),\n    \"SNOW\" : makeColor(255, 250, 250),\n    \"CHOCOLATE\" : makeColor(210, 105, 30),\n    \"SADDLEBROWN\" : makeColor(139, 69, 19),\n    \"BROWN\" : makeColor(132, 60, 36),\n    \"DARKORANGE\" : makeColor(255, 140, 0),\n    \"CORAL\" : makeColor(255, 127, 80),\n    \"SIENNA\" : makeColor(160, 82, 45),\n    \"SALMON\" : makeColor(250, 128, 114),\n    \"PERU\" : makeColor(205, 133, 63),\n    \"DARKGOLDENROD\" : makeColor(184, 134, 11),\n    \"GOLDENROD\" : makeColor(218, 165, 32),\n    \"SANDYBROWN\" : makeColor(244, 164, 96),\n    \"LIGHTSALMON\" : makeColor(255, 160, 122),\n    \"DARKSALMON\" : makeColor(233, 150, 122),\n    \"GOLD\" : makeColor(255, 215, 0),\n    \"YELLOW\" : makeColor(255, 255, 0),\n    \"OLIVE\" : makeColor(128, 128, 0),\n    \"BURLYWOOD\" : makeColor(222, 184, 135),\n    \"TAN\" : makeColor(210, 180, 140),\n    \"NAVAJOWHITE\" : makeColor(255, 222, 173),\n    \"PEACHPUFF\" : makeColor(255, 218, 185),\n    \"KHAKI\" : makeColor(240, 230, 140),\n    \"DARKKHAKI\" : makeColor(189, 183, 107),\n    \"MOCCASIN\" : makeColor(255, 228, 181),\n    \"WHEAT\" : makeColor(245, 222, 179),\n    \"BISQUE\" : makeColor(255, 228, 196),\n    \"PALEGOLDENROD\" : makeColor(238, 232, 170),\n    \"BLANCHEDALMOND\" : makeColor(255, 235, 205),\n    \"MEDIUM GOLDENROD\" : makeColor(234, 234, 173),\n    \"MEDIUMGOLDENROD\" : makeColor(234, 234, 173),\n    \"PAPAYAWHIP\" : makeColor(255, 239, 213),\n    \"MISTYROSE\" : makeColor(255, 228, 225),\n    \"LEMONCHIFFON\" : makeColor(255, 250, 205),\n    \"ANTIQUEWHITE\" : makeColor(250, 235, 215),\n    \"CORNSILK\" : makeColor(255, 248, 220),\n    \"LIGHTGOLDENRODYELLOW\" : makeColor(250, 250, 210),\n    \"OLDLACE\" : makeColor(253, 245, 230),\n    \"LINEN\" : makeColor(250, 240, 230),\n    \"LIGHTYELLOW\" : makeColor(255, 255, 224),\n    \"SEASHELL\" : makeColor(255, 245, 238),\n    \"BEIGE\" : makeColor(245, 245, 220),\n    \"FLORALWHITE\" : makeColor(255, 250, 240),\n    \"IVORY\" : makeColor(255, 255, 240),\n    \"GREEN\" : makeColor(0, 255, 0),\n    \"LAWNGREEN\" : makeColor(124, 252, 0),\n    \"CHARTREUSE\" : makeColor(127, 255, 0),\n    \"GREEN YELLOW\" : makeColor(173, 255, 47),\n    \"GREENYELLOW\" : makeColor(173, 255, 47),\n    \"YELLOW GREEN\" : makeColor(154, 205, 50),\n    \"YELLOWGREEN\" : makeColor(154, 205, 50),\n    \"MEDIUM FOREST GREEN\" : makeColor(107, 142, 35),\n    \"OLIVEDRAB\" : makeColor(107, 142, 35),\n    \"MEDIUMFORESTGREEN\" : makeColor(107, 142, 35),\n    \"DARK OLIVE GREEN\" : makeColor(85, 107, 47),\n    \"DARKOLIVEGREEN\" : makeColor(85, 107, 47),\n    \"DARKSEAGREEN\" : makeColor(143, 188, 139),\n    \"LIME\" : makeColor(0, 255, 0),\n    \"DARK GREEN\" : makeColor(0, 100, 0),\n    \"DARKGREEN\" : makeColor(0, 100, 0),\n    \"LIME GREEN\" : makeColor(50, 205, 50),\n    \"LIMEGREEN\" : makeColor(50, 205, 50),\n    \"FOREST GREEN\" : makeColor(34, 139, 34),\n    \"FORESTGREEN\" : makeColor(34, 139, 34),\n    \"SPRING GREEN\" : makeColor(0, 255, 127),\n    \"SPRINGGREEN\" : makeColor(0, 255, 127),\n    \"MEDIUM SPRING GREEN\" : makeColor(0, 250, 154),\n    \"MEDIUMSPRINGGREEN\" : makeColor(0, 250, 154),\n    \"SEA GREEN\" : makeColor(46, 139, 87),\n    \"SEAGREEN\" : makeColor(46, 139, 87),\n    \"MEDIUM SEA GREEN\" : makeColor(60, 179, 113),\n    \"MEDIUMSEAGREEN\" : makeColor(60, 179, 113),\n    \"AQUAMARINE\" : makeColor(112, 216, 144),\n    \"LIGHTGREEN\" : makeColor(144, 238, 144),\n    \"PALE GREEN\" : makeColor(152, 251, 152),\n    \"PALEGREEN\" : makeColor(152, 251, 152),\n    \"MEDIUM AQUAMARINE\" : makeColor(102, 205, 170),\n    \"MEDIUMAQUAMARINE\" : makeColor(102, 205, 170),\n    \"TURQUOISE\" : makeColor(64, 224, 208),\n    \"LIGHTSEAGREEN\" : makeColor(32, 178, 170),\n    \"MEDIUM TURQUOISE\" : makeColor(72, 209, 204),\n    \"MEDIUMTURQUOISE\" : makeColor(72, 209, 204),\n    \"HONEYDEW\" : makeColor(240, 255, 240),\n    \"MINTCREAM\" : makeColor(245, 255, 250),\n    \"ROYALBLUE\" : makeColor(65, 105, 225),\n    \"DODGERBLUE\" : makeColor(30, 144, 255),\n    \"DEEPSKYBLUE\" : makeColor(0, 191, 255),\n    \"CORNFLOWERBLUE\" : makeColor(100, 149, 237),\n    \"STEEL BLUE\" : makeColor(70, 130, 180),\n    \"STEELBLUE\" : makeColor(70, 130, 180),\n    \"LIGHTSKYBLUE\" : makeColor(135, 206, 250),\n    \"DARK TURQUOISE\" : makeColor(0, 206, 209),\n    \"CYAN\" : makeColor(0, 255, 255),\n    \"AQUA\" : makeColor(0, 255, 255),\n    \"DARKCYAN\" : makeColor(0, 139, 139),\n    \"TEAL\" : makeColor(0, 128, 128),\n    \"SKY BLUE\" : makeColor(135, 206, 235),\n    \"CADET BLUE\" : makeColor(96, 160, 160),\n    \"CADETBLUE\" : makeColor(95, 158, 160),\n    \"DARK SLATE GRAY\" : makeColor(47, 79, 79),\n    \"DARKSLATEGRAY\" : makeColor(47, 79, 79),\n    \"LIGHTSLATEGRAY\" : makeColor(119, 136, 153),\n    \"SLATEGRAY\" : makeColor(112, 128, 144),\n    \"LIGHT STEEL BLUE\" : makeColor(176, 196, 222),\n    \"LIGHTSTEELBLUE\" : makeColor(176, 196, 222),\n    \"LIGHT BLUE\" : makeColor(173, 216, 230),\n    \"LIGHTBLUE\" : makeColor(173, 216, 230),\n    \"POWDERBLUE\" : makeColor(176, 224, 230),\n    \"PALETURQUOISE\" : makeColor(175, 238, 238),\n    \"LIGHTCYAN\" : makeColor(224, 255, 255),\n    \"ALICEBLUE\" : makeColor(240, 248, 255),\n    \"AZURE\" : makeColor(240, 255, 255),\n    \"MEDIUM BLUE\" : makeColor(0, 0, 205),\n    \"MEDIUMBLUE\" : makeColor(0, 0, 205),\n    \"DARKBLUE\" : makeColor(0, 0, 139),\n    \"MIDNIGHT BLUE\" : makeColor(25, 25, 112),\n    \"MIDNIGHTBLUE\" : makeColor(25, 25, 112),\n    \"NAVY\" : makeColor(36, 36, 140),\n    \"BLUE\" : makeColor(0, 0, 255),\n    \"INDIGO\" : makeColor(75, 0, 130),\n    \"BLUE VIOLET\" : makeColor(138, 43, 226),\n    \"BLUEVIOLET\" : makeColor(138, 43, 226),\n    \"MEDIUM SLATE BLUE\" : makeColor(123, 104, 238),\n    \"MEDIUMSLATEBLUE\" : makeColor(123, 104, 238),\n    \"SLATE BLUE\" : makeColor(106, 90, 205),\n    \"SLATEBLUE\" : makeColor(106, 90, 205),\n    \"PURPLE\" : makeColor(160, 32, 240),\n    \"DARK SLATE BLUE\" : makeColor(72, 61, 139),\n    \"DARKSLATEBLUE\" : makeColor(72, 61, 139),\n    \"DARKVIOLET\" : makeColor(148, 0, 211),\n    \"DARK ORCHID\" : makeColor(153, 50, 204),\n    \"DARKORCHID\" : makeColor(153, 50, 204),\n    \"MEDIUMPURPLE\" : makeColor(147, 112, 219),\n    \"CORNFLOWER BLUE\" : makeColor(68, 64, 108),\n    \"MEDIUM ORCHID\" : makeColor(186, 85, 211),\n    \"MEDIUMORCHID\" : makeColor(186, 85, 211),\n    \"MAGENTA\" : makeColor(255, 0, 255),\n    \"FUCHSIA\" : makeColor(255, 0, 255),\n    \"DARKMAGENTA\" : makeColor(139, 0, 139),\n    \"VIOLET\" : makeColor(238, 130, 238),\n    \"PLUM\" : makeColor(221, 160, 221),\n    \"LAVENDER\" : makeColor(230, 230, 250),\n    \"THISTLE\" : makeColor(216, 191, 216),\n    \"GHOSTWHITE\" : makeColor(248, 248, 255),\n    \"WHITE\" : makeColor(255, 255, 255),\n    \"WHITESMOKE\" : makeColor(245, 245, 245),\n    \"GAINSBORO\" : makeColor(220, 220, 220),\n    \"LIGHT GRAY\" : makeColor(211, 211, 211),\n    \"LIGHTGRAY\" : makeColor(211, 211, 211),\n    \"SILVER\" : makeColor(192, 192, 192),\n    \"GRAY\" : makeColor(190, 190, 190),\n    \"DARK GRAY\" : makeColor(169, 169, 169),\n    \"DARKGRAY\" : makeColor(169, 169, 169),\n    \"DIM GRAY\" : makeColor(105, 105, 105),\n    \"DIMGRAY\" : makeColor(105, 105, 105),\n    \"BLACK\" : makeColor(0, 0, 0),\n    \"TRANSPARENT\" : makeColor(0, 0, 0, 0),\n};\n\n// Integer\n// generates a random key so react stops complaining\nfunction genKey() {\n    return Math.round(Math.random() * 100000000);\n}\n\n/*\nTODO:\n  Figure out how triangles should work\n*/\n\n// Integer, Integer, Integer[, Integer] -> Color \nfunction makeColor (r, g, b, a = 255) {\n    return {r, g, b, a};\n}\n\n// Color, Integer -> Color\nfunction changeAlpha (color, a) {\n    return {...color, a};\n}\n\n// String | Color -> Color\nfunction checkColor(maybeColor) {\n    if (typeof maybeColor === 'string') {\n        let color = colorDb[maybeColor.replace(' ', '').toUpperCase()];\n        if (color === undefined) {\n            throw Error(`${maybeColor} is not a valid color`);\n        }\n\n        return color;\n    } \n\n    // TODO: check if maybeColor is actually a color object\n    return maybeColor;\n}\n\n// Integer String Color -> Image\nfunction makeCircle (r, mode, color) {\n    return {r, mode, color: checkColor(color), type: 'circle'};\n}\n\n// Integer Integer String Color -> Image\nfunction makeRectangle (width, height, mode, color) {\n    return {width, mode, height, color: checkColor(color), type: 'rect'};\n}\n\n// Integer Integer String Color -> Image\nfunction makeTriangle (A, B, C, mode, color) {\n    return {A, B, C, mode, color: checkColor(color), type: 'triangle'};\n}\n\nfunction makeEquiTriangle (length, mode, color) {\n    return makeTriangle(length, length, length, mode, color);\n}\n\n// [Image] -> Image\nfunction makeBeside (images, yplace = 'center') {\n    return {images, yplace, type: 'beside'};\n}\n\n// [Image] -> Image\nfunction makeAbove (images, xplace = 'center') {\n    return {images, xplace, type: 'above'};\n}\n\n// [Image] -> Image\nfunction makeOverlay (images, xplace = 'center', yplace = 'center') {\n    return {images, xplace, yplace, type: 'overlay'};\n}\n\nfunction makePlace (image, x, y, scene) {\n    return {image, x, y, scene, type: 'place'};\n}\n\nlet circle = makeCircle;\nlet rectangle = makeRectangle;\nlet triangle = makeEquiTriangle;\nlet beside = makeBeside;\nlet above = makeAbove;\nlet overlay = makeOverlay;\nlet placeImage = makePlace;\n\n// Image -> Integer\nfunction width (image) {\n    switch (image.type) {\n    case 'circle':\n        return image.r * 2;\n    case 'rect':\n        return image.width;\n    case 'triangle':\n        return image.A;\n    case 'beside':\n        return image.images.reduce((acc, image) => acc + width(image), 0);\n    case 'above':\n        return image.images.reduce((acc, image) => Math.max(acc, width(image)), 0);\n    case 'overlay':\n        return image.images.reduce((acc, image) => Math.max(acc, width(image)), 0);\n    case 'place':\n        return width(image.scene);\n    default:\n        return Error (`Unknown Image Type: ${image.type}`);\n    }\n}\n\n// Image -> Integer\nfunction height (image) {\n    switch (image.type) {\n    case 'circle':\n        return image.r * 2;\n    case 'rect':\n        return image.height;\n    case 'triangle':\n        // Heron's Formula, I went on Wikihow for this, don't judge\n        let s = (image.A + image.B + image.C) / 2;\n        let area = Math.sqrt(s * (s  - image.A) * (s - image.B) * (s - image.C));\n        return Math.round((area * 2) / image.A);\n    case 'beside':\n        return image.images.reduce((acc, image) => Math.max(acc, height(image)), 0);\n    case 'above':\n        return image.images.reduce((acc, image) => acc + height(image), 0);\n    case 'overlay':\n        return image.images.reduce((acc, image) => Math.max(acc, height(image)), 0);\n    case 'place':\n        return height(image.scene);\n    default:\n        return Error (`Unknown Image Type: ${image.type}`);\n    }\n}\n\n\n// Image Integer Integer -> SVG\nfunction render (image, x, y) {\n    switch (image.type) {\n    case 'circle':\n        return render_circle(image, x, y);\n    case 'rect':\n        return render_rect(image, x, y);\n    case 'triangle':\n        return render_triangle(image, x, y);\n    case 'beside':\n        return render_beside(image, x, y);\n    case 'above':\n        return render_above(image, x, y);\n    case 'overlay':\n        return render_overlay(image, x, y);\n    case 'place':\n        return render_place(image, x, y);\n    default:\n        throw Error (`Unknown Image Type: ${image.type}`);\n    }\n}\n\n// Image Integer Integer -> SVG\nfunction render_circle (image, x, y) {\n    let red = image.color.r;\n    let green = image.color.g;\n    let blue = image.color.b;\n    // for some reason alpha is the only float in rgba in css...\n    let alpha = image.color.a / 255;\n    switch (image.mode) {\n    case 'solid':\n        return <circle cx={x + image.r}\n                       cy={y + image.r}\n                       r={image.r}\n                       fill={`rgba(${red}, ${green}, ${blue}, ${alpha})`}\n                       key={genKey()}\n               />;\n    case 'outline':\n        // stroke is pretty annoying...\n        // it draws both outside of the shape and inside it...\n        //so it's difficult to figure out where exactly it wants to draw\n\n        // this should draw the outline of a circle (approximately)\n        // not sure how it works on browsers besides firefox though\n        return <circle cx={x + image.r}\n                       cy={y + image.r}\n                       r={image.r - .5}\n                       fill='none'\n                       stroke={`rgba(${red}, ${green}, ${blue}, ${alpha})`}\n                       strokeWidth={1}\n                       key={genKey()}\n               />;\n    default:\n        throw Error (`Unknown Image Mode: ${image.mode}`);\n    }\n}\n\n// Image Integer Integer -> SVG\nfunction render_rect (image, x, y) {\n    let red = image.color.r;\n    let green = image.color.g;\n    let blue = image.color.b;\n    let alpha = image.color.a / 255;\n\n    switch (image.mode) {\n    case 'solid':\n        return <rect x={x}\n                     y={y}\n                     width={image.width}\n                     height={image.height}\n                     fill={`rgba(${red}, ${green}, ${blue}, ${alpha})`}\n                     key={genKey()}\n               />;\n    case 'outline':\n        // stroke has similar problems here as it does in circle\n        return <rect x={x + .5}\n                      y={y + .5}\n                      width={image.width - 1}\n                      height={image.height - 1}\n                      fill='none'\n                      stroke={`rgba(${red}, ${green}, ${blue}, ${alpha})`}\n                      strokeWidth={1}\n                      key={genKey()}\n                 />;\n    default:\n        throw Error (`Unknown Image Mode: ${image.mode}`);\n    }\n}\n\n// Image Integer Integer -> SVG\nfunction render_triangle (image, x, y) {\n    let red = image.color.r;\n    let green = image.color.g;\n    let blue = image.color.b;\n    let alpha = image.color.a / 255;\n\n    let D = Math.round(Math.sqrt(Math.pow(image.B, 2) - Math.pow(height(image), 2))); \n    // these are coordinates                                   //         b       \n    let a = {x: x, y: y + height(image)};                      //         .       \n    let b = {x: x + D, y: y};                                  //        /|\\      \n    let c = {x: x + width(image), y: y + height(image)};       //       / | \\     \n                                                               //   B  /  |  \\  C\n                                                               //     /   |h  \\\n                                                               //    /    |    \\\n                                                               //   ._____|_____.\n                                                               //  a   D  A      c\n    switch (image.mode) {                                       \n    case 'solid':                                               \n        return <polygon\n                 points={`${a.x},${a.y} ${b.x},${b.y} ${c.x},${c.y}`}\n                 fill={`rgba(${red}, ${green}, ${blue}, ${alpha})`}\n                 key={genKey()}\n               />;\n    case 'outline':                                             \n        return <polygon\n                 points={`${a.x},${a.y} ${b.x},${b.y} ${c.x},${c.y}`}\n                 fill='none'\n                 stroke={`rgba(${red}, ${green}, ${blue}, ${alpha})`}\n                 strokeWidth={1}\n                 key={genKey()}\n               />;\n    default:\n        throw Error (`Unknown Image Mode: ${image.mode}`);\n    }\n}\n\n\n// should I flatten [SVG]s?\n// no\n\n// (Integer, Integer -> Integer), (Integer, Integer -> Integer), (Integer, Integer -> Integer), (Integer, Integer -> Integer) -> ([Image], Integer, Integer) -> [SVG]\nfunction make_list_renderer (xCorrect, yCorrect, xChange, yChange) {\n    function render_list (images, x, y) {\n        if (images.length === 0) {\n            throw Error('I need at least 1 image to render!');\n        }\n\n        let w = width(images[0]);\n        let h = height(images[0]);\n\n        let first = render(images[0], xCorrect(x, w), yCorrect(y, h));\n\n        if (images.length === 1) {\n            return [first];\n        }\n\n        let rest = render_list(images.slice(1), xChange(x, w), yChange(y, h));\n\n        // return list in reverse because the last child of an svg tag is shown on top\n        // this matters for overlay, but makes no difference in beside, above\n        return [...rest, first];\n    }\n\n    return render_list;\n}\n\n// Image Integer Integer -> [SVG]\nfunction render_beside (image, x, y) {\n    let initY = y,\n        yCorrect = (y, h) => y;\n\n    switch(image.yplace) {\n    case 'top':\n        break;\n    case 'center':\n        initY = y + height(image) / 2;\n        yCorrect = (y, h) => y - h/2;\n        break;\n    case 'bottom':\n        initY = y + height(image);\n        yCorrect = (y, h) => y - h;\n        break;\n    default:\n        throw Error(`Unknown y-place: ${image.yplace}`);\n    }\n\n    let renderoozle = make_list_renderer((x, w) => x,\n                                         yCorrect,\n                                         (x, dx) => x + dx,\n                                         (y, dy) => y);\n    return renderoozle(image.images, x, initY);\n}\n\n// Image Integer Integer -> [SVG]\nfunction render_above (image, x, y) {\n    let initX = x,\n        xCorrect = (x, w) => x;\n\n    switch(image.xplace) {\n    case 'left':\n        break;\n    case 'center':\n        initX = x + width(image) / 2;\n        xCorrect = (x, w) => x - w/2;\n        break;\n    case 'right':\n        initX = x + width(image);\n        xCorrect = (x, w) => x - w;\n        break;\n    default:\n        throw Error(`Unknown x-place: ${image.xplace}`);\n    }\n\n    let renderoozle = make_list_renderer(xCorrect,\n                                         (y, h) => y,\n                                         (x, dx) => x,\n                                         (y, dy) => y + dy);\n    return renderoozle(image.images, initX, y);\n\n}\n\nfunction render_overlay (image, x, y) {\n    let initX = x,\n        initY = y,\n        xCorrect = (x, w) => x,\n        yCorrect = (y, h) => y;\n    \n    switch(image.xplace) {\n    case 'left':\n        break;\n    case 'center':\n        initX = x + width(image) / 2;\n        xCorrect = (x, w) => x - w/2;\n        break;\n    case 'right':\n        initX = x + width(image);\n        xCorrect = (x, w) => x - w;\n        break;\n    default:\n        throw Error(`Unknown x-place: ${image.xplace}`);\n    }\n\n    switch(image.yplace) {\n    case 'top':\n        break;\n    case 'center':\n        initY = y + height(image) / 2;\n        yCorrect = (y, h) => y - h/2;\n        break;\n    case 'bottom':\n        initY = y + height(image);\n        yCorrect = (y, h) => y - h;\n        break;\n    default:\n        throw Error(`Unknown y-place: ${image.yplace}`);\n    }\n\n    let renderoozle = make_list_renderer(xCorrect,\n                                         yCorrect,\n                                         (x, dx) => x,\n                                         (y, dy) => y);\n    return renderoozle(image.images, initX, initY);\n}\n\nfunction render_place (image, x, y) {\n    return [render(image.scene, x, y), render(image.image, image.x - width(image.image) / 2, image.y - height(image.image) / 2)];\n}\n\nfunction emptyScene (w, h, color = 'white') {\n    return overlay([rectangle(w, h, 'outline', 'black'), rectangle(w, h, 'solid', color)]);\n}\n\n// Image -> top level SVG\nfunction paint (image) {\n    let picture = render(image, 0, 0);\n    return (\n        <svg viewBox={`0 0 ${width(image)} ${height(image)}`}\n             xmlns='http://www.w3.org/2000/svg'\n             width={width(image)}\n             height={height(image)}\n        >\n          {picture}\n        </svg>\n    );\n}\n\nlet victorian = makeAbove([makeBeside([makeEquiTriangle(40, 'solid', 'red'), makeEquiTriangle(30, 'solid', 'red')], 'bottom'), makeRectangle(70, 40, 'solid', 'black')]);\nlet door = makeRectangle(15, 25, 'solid', 'brown');\nlet doorWithKnob = makeOverlay([makeCircle(3, 'solid', 'yellow'), door], 'right', 'center');\nlet cheese = placeImage(circle(4, 'solid', 'white'), 18, 20, placeImage(circle(4, 'solid', 'white',), 0, 6, placeImage(circle(4, 'solid', 'white'), 14, 2, placeImage(circle(4, 'solid', 'white'), 8, 14, rectangle(24, 24, 'solid', 'goldenrod')))));\nexport let test = paint(placeImage(circle(10, 'solid', 'pink'), 20, 20, emptyScene(160, 90, 'red')));\n","import React from 'react';\nimport {interp, parseCheck, unparse_cons, unparse_list, initEnv, RAPP_T, RFUNCT_T, RBOOL_T, RLIST_T, varRE} from './interpreter.js';\nimport {gray, pink, yellow, allBools, isBooleanFormula} from './header.js';\nimport toBSL_noGroup from './prettyprint.js';\nimport {test} from './image.js';\nimport './App.css';\n\n/*****************************\n  Universal Constants I Want\n*****************************/\n// value to indicate a dry run, i.e. don't actually change the underlying structure, just say\n// if the given value exists or not\nconst dryRun = {yo: 'don\\'t actually change anything'};\n// image path\nconst imgPath = './images/';\n\n\n/*********************\n    Key Management\n*********************/\n// variable used by takeKey and peekKey to generate keys\nlet keyCount = 0;\n\n// Number\n// returns a unique key\nfunction takeKey() {\n    return keyCount++;\n}\n\n// [Number] -> Number (the brackets here mean optional, not array)\n// returns current key without changing it\n// shoud be used to look at current state of key without actually taking it\n// optionally takes a number as an argument, in which case it returns the key that number\n// of steps ahead of the current key\nfunction peekKey(lookahead) {\n    if (lookahead === undefined) {\n        return keyCount;\n    } else {\n        return keyCount + lookahead;\n    }\n}\n\n/**************\n    Globals\n**************/\nlet unparse = unparse_cons;\nlet showBSL = false;\n\n/*****************\n    Deep Equals\n*****************/\n// Program -> Program -> Boolean\n// checks if two programs are equivalent, recurs on lists and applications\n// may not quite work on functions because I use js functions, not data represented closures or something\n//    thus 2 functions are only equal if they're a reference to the same object\nfunction deepEquals(proga, progb) {\n    if (proga.type !== progb.type) {\n        return false;\n    }\n\n    if (proga.type === RLIST_T) {\n        if (proga.value === null || progb.value === null) {\n            return proga.value === progb.value;\n        }\n        return deepEquals(proga.value.a, progb.value.a) && deepEquals(proga.value.d, progb.value.d);\n    }\n\n    // this case will prolly never even happen...\n    if (proga.type === RAPP_T) {\n        if (proga.value.args.length !== progb.value.args.length) {\n            return false;\n        }\n        let functCheck = deepEquals(proga.value.funct, progb.value.funct);\n        let argCheck = proga.value.args.map((arga, i) => deepEquals(arga, progb.value.args[i])).every((elem) => elem);\n        return functCheck && argCheck;\n    }\n\n    return proga.value === progb.value;\n}\n\n/*********************\n   React Components\n*********************/\n\n/*** Buttons ***/\n// Button that probably removes something\nfunction RemButton(props){\n    return (\n        <div className='cross_button'>\n          <input\n            type={'image'}\n            style={props.style}\n            src={'./images/smallCross.png'}\n            alt='Remove'\n            title={props.title}\n            onClick={props.onClick}/>\n        </div>\n    );\n}\n\n/*** Inputs ***/\nclass ValidatedInput extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {text: ''};\n\n        this.textChange = this.textChange.bind(this);\n    }\n\n    textChange(e) {\n        let text = e.target.value;\n\n        this.setState((state) => ({text}));\n\n        if (this.props.isValid(text)) {\n            this.props.onValid(text);\n        } else if (text === '' && !this.props.dummy) {\n            this.props.onEmpty();\n        }\n\n    }\n\n    render() {\n        let className;\n        if (this.props.dummy && this.state.text === '') { // empty dummy\n            className = 'dummy_input';\n        } else if (this.props.isValid(this.state.text)) { // valid\n            className = 'valid_input';\n        } else if (this.state.text === '') { // empty non-dummy\n            className = 'empty_input';\n        } else { // invalid\n            className = 'invalid_input';\n        }\n        \n        let size;\n        if (this.state.text.length === 0)\n            size = this.props.placeholder.length;\n        else\n            size = Math.max(this.state.text.length + 2, 4);\n\n        return (\n            <input\n              className={className}\n              size={size}\n              placeholder={this.props.placeholder}\n              type={'text'}\n              value={this.state.text}\n              onChange={this.textChange}\n            />\n        );\n    }\n}\n\n/*** Table Sections ***/\n// let's put everything in one table woo\nfunction Succinct(props) {\n\n    function tableChange(newTab, oldTab) {\n        const exists = props.tables.indexOf(oldTab) !== -1;\n\n        let alteredTabs;\n        if (exists) {\n            alteredTabs = props.tables.map((table) => table === oldTab ? newTab : table);\n        } else {\n            alteredTabs = [...props.tables, newTab];\n        }\n\n        props.programChange(alteredTabs);\n    }\n\n    function remTable(deadTab) {\n        let aliveTabs = props.tables.filter((table) => table !== deadTab);\n        props.programChange(aliveTabs);\n    }\n\n    // String -> Boolean\n    function validName(text, modTab) {\n        function lookup(name, env) {\n            return env.reduce((acc, variable) => {\n                if (acc) {\n                    return true;\n                }\n\n                return variable.name === name;\n\n            }, false);\n        }\n\n        let tableVars = props.tables.filter((table) => table !== modTab).map((otherTab) => ({name: otherTab.name, binding: null}));\n        let paramVars = modTab.params.map((param) => ({name: param, binding: null}));\n        let env = [...initEnv, ...tableVars, ...paramVars];\n\n        return varRE.test(text) && !lookup(text, env);\n    }\n\n    const reals = props.tables.map((table) => (\n        <div key={table.key} className='table_method' >\n          <div className='full_cell'>\n            <ValidatedInput\n              dummy={false}\n              placeholder='Table Name'\n              isValid={(text) => validName(text, table)}\n              onValid={(text) => tableChange({...table,\n                                              name: text},\n                                             table)}\n              onEmpty={() => tableChange({...table,\n                                          name: yellow},\n                                         table)}\n            />\n            <RemButton\n              onClick={() => remTable(table)}\n              title='Remove this table'\n            />\n          </div>\n          <SuccinctTab\n            table={table}\n            tableNames={props.tables.map((table) => table.name)}\n            tableChange={(newTab) => tableChange(newTab, table)}\n          />\n        </div>\n    ));\n\n    const dummy = (\n        <div key={peekKey()} className='table_method'>\n          <div className='full_cell'>\n            <ValidatedInput\n              dummy={true}\n              placeholder='Table Name'\n              isValid={(text) => validName(text, {params: []})}\n              onValid={(text) => tableChange({name: text,\n                                              examples: [],\n                                              formulas: [],\n                                              params: [],\n                                              key: takeKey()},\n                                             {})}\n            />\n          </div>\n          <SuccinctTab\n            table={{name: yellow,\n                    examples: [],\n                    formulas: [],\n                    params: [],\n                    key: peekKey()}}\n            tableNames={props.tables.map((table) => table.name)}\n            tableChange={(newTab) => tableChange(newTab, {})}\n          />\n        </div>\n    );\n\n    return (\n        <div>\n          {[...reals, dummy]}\n        </div>\n    );\n}\n\nfunction SuccinctTab(props) {\n    function paramsExamplesChange(params, examples) {\n        props.tableChange({...props.table, params, examples});\n    }\n\n    function formulasChange(formulas) {\n        props.tableChange({...props.table, formulas});\n    }\n\n    function examplesFormulasChange(examples, formulas) {\n        props.tableChange({...props.table, examples, formulas});\n    }\n\n    return (\n        <table className={'html_table'}>\n          <SuccinctHead\n            params={props.table.params}\n            examples={props.table.examples}\n            tableNames={props.tableNames}\n            paramsExamplesChange={paramsExamplesChange}\n\n            formulas={props.table.formulas}\n            formulasChange={formulasChange}\n          />\n          <SuccinctBody\n            examples={props.table.examples}\n            formulas={props.table.formulas}\n            paramNames={props.table.params.map((param) => param.name)}\n            examplesFormulasChange={examplesFormulasChange}\n            formulasChange={formulasChange}\n          />\n        </table>\n    );\n}\n\nfunction SuccinctHead(props) {\n    // String -> Boolean\n    // checks if the given string is a valid program\n    function validProg(text) {\n        let isgood = true;\n\n        try {\n            parseCheck(text);\n        } catch(e) {\n            if (e instanceof SyntaxError) {\n                isgood = false;\n            } else { // this should never happen\n                throw e;\n            }\n        }\n\n        return isgood;\n    }\n\n    // Formula -> Side Effect\n    // removes a given formula from the tree\n    function remFormula(deadForm) {\n        const aliveForms = props.formulas.filter((formula) => formula !== deadForm);\n        props.formulasChange(aliveForms);\n    }\n\n    // Formula -> Formula -> Side Effect\n    // replaces one formula with another one\n    function formulaChange(newForm, oldForm) {\n\n        let alteredForms;\n        if (props.formulas.indexOf(oldForm) === -1) {\n            alteredForms = [...props.formulas, newForm];\n        } else {\n            alteredForms = props.formulas.map((form) => form === oldForm ? newForm : form);\n        }\n        props.formulasChange(alteredForms);\n    }\n\n    // Formula -> Number -> Number\n    // gives the maximum depth of a Formula, second parameter is an accumulator\n    function maxDepth(formula, curMax) {\n        if (!isBooleanFormula(formula)) {\n            return curMax;\n        } else {\n            return formula.thenChildren.reduce((acc, child) => Math.max(acc, maxDepth(child, curMax + 1)), curMax + 1);\n        }\n    }\n\n    function countWidth(formula) {\n        if (!isBooleanFormula(formula)) {\n            return 1;\n        } else {\n            return formula.thenChildren.reduce((acc, child) => acc + countWidth(child), 2);\n        }\n    }\n\n\n    // Number -> [Number]\n    // takes a number, returns an array that counts from 1 to that number, input of 0 gives empty array\n    // e.g. countUp(5) -> [1, 2, 3, 4, 5]\n    function countUp(num) {\n        // special case: want an empty array for 0\n        if (num === 0) {\n            return [];\n        } else if (num === 1)\n            return [1];\n        else\n            return [...countUp(num - 1), num];\n    }\n\n    const abyss = props.formulas.reduce((acc, formula) => Math.max(acc, maxDepth(formula, 0)), 0);\n    const numParams = props.params.length;\n\n    const reals = props.formulas.map((formula) => (\n        <th key={formula.key} colSpan={countWidth(formula)} >\n          <div className='full_cell'>\n            <ValidatedInput\n              placeholder={'Formula'}\n              dummy={false}\n              isValid={validProg}\n              onValid={(text) => formulaChange({...formula,\n                                                prog: parseCheck(text)},\n                                               formula)}\n              onEmpty={() => formulaChange({...formula,\n                                            prog: yellow},\n                                           formula)}\n            />\n            <RemButton\n              title={'Remove formula'}\n              onClick={() => remFormula(formula)}\n            />\n          </div>\n        </th>\n    ));\n\n    const dummy = (\n        <th key={peekKey()} colSpan={1}>\n          <div className='full_cell'>\n            <ValidatedInput\n              dummy={true}\n              placeholder='Formula'\n              isValid={validProg}\n              onValid={(text) => formulaChange({prog: parseCheck(text),\n                                                outputs: props.examples.map((_) => yellow),\n                                                key: takeKey()},\n                                               {})}\n            />\n          </div>\n        </th>\n    );\n\n    const children = countUp(abyss).map((depth) => (\n        <tr key={depth}>\n          <th colSpan={numParams + 2}>{/* empty cell to align with example RemButton and Parameters */}</th>\n          {props.formulas.map((formula) => (\n              <DepictFormula\n                key={formula.key}\n                formula={formula}\n                depth={depth}\n                numExamples={props.examples.length}\n                formulaChange={(newForm) => formulaChange(newForm, formula)}\n              />\n          ))}\n          {Array(depth).map((_, i) => (<th key={i}>{/* empty cell under some parent dummy formula */}</th>))}\n          <th>{/* empty cell above wants */}</th>\n        </tr>\n    ));\n\n    return (\n        <thead>\n          <tr>\n            <Parameters\n              params={props.params}\n              examples={props.examples}\n              tableNames={props.tableNames}\n              paramsExamplesChange={props.paramsExamplesChange}\n            />\n            {/* top level formulas */}\n            {[...reals, dummy, <th key={peekKey(1)}>{/* empty cell above wants */}</th>]}\n          </tr>\n          {/* rest of formulas */}\n          {children}\n        </thead>\n    );\n}\n\nfunction Parameters(props) {\n    function validParam(text, modParam) {\n        function lookup(name, env) {\n            return env.reduce((acc, variable) => {\n                if (acc) {\n                    return true;\n                }\n\n                return variable.name === name;\n\n            }, false);\n        }\n\n        // These are not technically Variables, see note above\n        let paramVars = props.params.filter((param) => param !== modParam).map((param) => ({name: param.name, binding: null}));\n        let tableVars = props.tableNames.map((name) => ({name: name, binding: null}));\n        let env = [...initEnv, ...tableVars, ...paramVars];\n\n        return varRE.test(text) && !lookup(text, env);\n    }\n\n    function remParam(deadParam) {\n        const deadIndex = props.params.indexOf(deadParam);\n        const aliveParams = props.params.filter((param) => param !== deadParam);\n\n        // need to maintain #inputs = #params\n        const modExamples = props.examples.map((example => ({...example,\n                                                             inputs: example.inputs.filter((_, i) => i !== deadIndex)})));\n\n        props.paramsExamplesChange(aliveParams, modExamples);\n    }\n\n    // String -> Number -> Side Effect\n    // changes the name of the given parameter\n    // if that parameter doesn't exist yet, it makes it\n    function paramChange(newParam, modParam) {\n\n        let alteredParams, alteredExamples;\n        if (props.params.indexOf(modParam) === -1) {\n            alteredParams = [...props.params, newParam];\n            // need to maintain #inputs = #params\n            alteredExamples = props.examples.map((example) => ({...example,\n                                                                inputs: [...example.inputs, {prog: yellow, key: takeKey()}]}));\n        } else {\n            alteredParams = props.params.map((param) => param === modParam ? newParam : param);\n            // examples don't actually change\n            alteredExamples = props.examples;\n        }\n\n        props.paramsExamplesChange(alteredParams, alteredExamples);\n    }\n\n    const reals = props.params.map((param) => (\n        <th key={param.key} >\n          <div className='full_cell'>\n            <ValidatedInput\n              dummy={false}\n              placeholder='Parameter'\n              isValid={(text) => validParam(text, param)}\n              onValid={(text) => paramChange({...param,\n                                              name: text},\n                                             param)}\n              onEmpty={() => paramChange({...param,\n                                          name: yellow},\n                                         param)}\n            />\n            <RemButton\n              title='remove this parameter'\n              onClick={() => remParam(param)}\n            />\n          </div>\n        </th>\n    ));\n\n    const dummy = (\n        <th key={peekKey()}>\n          <div className='full_cell'>\n            <ValidatedInput\n              dummy={true}\n              placeholder='Parameter'\n              isValid={(text) => validParam(text, {})}\n              onValid={(text) => paramChange({name: text,\n                                              key: takeKey()},\n                                             {})}\n            />\n          </div>\n        </th>\n    );\n\n    return (\n        <React.Fragment>\n          <th>{/* empty cell to align with example RemButtons */}</th>\n          <React.Fragment>\n            {[...reals, dummy]}\n          </React.Fragment>\n        </React.Fragment>\n    );\n}\n\n/*\n  props: formula, depth, kill, formulaChange\n*/\nfunction DepictFormula(props) {\n    function validProg(text) {\n        let isgood = true;\n\n        try {\n            parseCheck(text);\n        } catch(e) {\n            if (e instanceof SyntaxError) {\n                isgood = false;\n            } else {\n                throw e;\n            }\n        }\n\n        return isgood;\n    }\n\n    // this is pretty macabre...\n    function remChild(deadChild) {\n        const aliveChildren = props.formula.thenChildren.filter((child) => child !== deadChild);\n        props.formulaChange({...props.formula, thenChildren: aliveChildren});\n    }\n\n    function childChange(newChild, modChild) {\n        let children;\n        if (props.formula.thenChildren.indexOf(modChild) === -1) {\n            children = [...props.formula.thenChildren, newChild];\n        } else {\n            children = props.formula.thenChildren.map((child) => child === modChild ? newChild : child);\n        }\n        props.formulaChange({...props.formula, thenChildren: children});\n    }\n\n    function countWidth(formula) {\n        if (!isBooleanFormula(formula)) {\n            return 1;\n        } else {\n            return formula.thenChildren.reduce((acc, child) => acc + countWidth(child), 2);\n        }\n    }\n\n    if (props.depth > 1) {\n        return (\n            <React.Fragment>\n              <th>{/* empty cell to align with parent input */}</th>\n              {isBooleanFormula(props.formula) ?\n               <React.Fragment>\n                 {props.formula.thenChildren.map((child) => (\n                     <DepictFormula\n                       key={child.key}\n                       formula={child}\n                       depth={props.depth - 1}\n                       numExamples={props.numExamples}\n                       formulaChange={(formula) => childChange(formula, child)}\n                     />))}\n                 <th>{/* empty cell to align with child input */}</th>\n               </React.Fragment>\n               : <script/> }\n            </React.Fragment>\n        );\n    } else {\n        if (isBooleanFormula(props.formula)) {\n            const reals = props.formula.thenChildren.map((child) => (\n                <th key={child.key} colSpan={countWidth(child)} >\n                  <div className='full_cell'>\n                    <ValidatedInput\n                      dummy={false}\n                      placeholder={'Formula'}\n                      isValid={validProg}\n                      onValid={(text) => childChange({...child,\n                                                      prog: parseCheck(text)},\n                                                     child)}\n                      onEmpty={() => childChange({...child,\n                                                  prog: yellow},\n                                                 child)}\n                    />\n                    <RemButton\n                      title={'Remove formula'}\n                      onClick={() => remChild(child)}\n                    />\n                  </div>\n                </th>\n            ));\n\n            const dummy = (\n                <th key={peekKey()} colSpan={1}>\n                  <div className='full_cell'>\n                    <ValidatedInput\n                      dummy={true}\n                      placeholder='Formula'\n                      isValid={validProg}\n                      onValid={(text) => childChange({prog: parseCheck(text),\n                                                      outputs: Array(props.numExamples).fill(yellow),\n                                                      key: takeKey()},\n                                                     {})}\n                    />\n                  </div>\n                </th>\n            );\n\n            return (\n                <React.Fragment>\n                  <th>{/* empty cell to align with parent input */}</th>\n                   <React.Fragment>\n                     {[...reals, dummy]}\n                   </React.Fragment>\n                </React.Fragment>\n            );\n        } else {\n\n            return (\n                <React.Fragment>\n                  <th>{/* empty cell to align with parent input */}</th>\n                </React.Fragment>\n            );\n        }\n    }\n}\n\nfunction SuccinctBody(props) {\n    function remExample(deadExample) {\n        const deadIndex = props.examples.indexOf(deadExample);\n        // Formula -> Formula\n        // removes the output at deadIndex from the given formula and all of its children (if it has any) so stuff works\n        function removeOutputFromFormula(formula) {\n            let outputs = formula.outputs.filter((_, i) => i !== deadIndex);\n\n            if (isBooleanFormula(formula)) {\n                const thenChildren = formula.thenChildren.map(removeOutputFromFormula);\n                return {...formula,\n                        outputs,\n                        thenChildren};\n            } else {\n                return {...formula,\n                        outputs};\n            }\n        }\n\n\n        const aliveExamples = props.examples.filter((example) => example !== deadExample);\n        const alteredForms = props.formulas.map(removeOutputFromFormula);\n        props.examplesFormulasChange(aliveExamples, alteredForms);\n    }\n\n    function exampleChange(newExample, oldExample) {\n        const exists = props.examples.indexOf(oldExample) !== -1;\n\n        if (newExample === dryRun) {\n            return exists;\n        }\n\n        // Formula -> Formula\n        // adds an init output to the given formula and all of its children (if it has any) so stuff works\n        function addAnotherOutputToFormula(formula) {\n            let outputs = [...formula.outputs, yellow];\n\n            if (isBooleanFormula(formula)) {\n                const thenChildren = formula.thenChildren.map(addAnotherOutputToFormula);\n                return {...formula,\n                        outputs,\n                        thenChildren};\n            } else {\n                return {...formula,\n                        outputs};\n            }\n        }\n\n        let alteredExamples, alteredForms;\n        if (exists) {\n            alteredExamples = props.examples.map((example) => example === oldExample ? newExample : example);\n            alteredForms = props.formulas;\n        } else {\n            alteredExamples = [...props.examples, newExample];\n            alteredForms = props.formulas.map(addAnotherOutputToFormula);\n        }\n\n        props.examplesFormulasChange(alteredExamples, alteredForms);\n        return true; // this doesn't actually do anything\n    }\n\n    const reals = props.examples.map((example, i) => (\n          <tr key={example.key}>\n            <td>\n              <RemButton\n                onClick={() => remExample(example)}\n                title={'Remove this example'}\n              />\n            </td>\n            <Inputs\n              dummy={false}\n              inputs={example.inputs}\n              inputsChange={(inputs) => exampleChange({...example, inputs},\n                                                      example)}\n            />\n            <td>{/* empty cell to align with param dummy input */}</td>\n            <Outputs\n              dummy={false}\n              formulas={props.formulas}\n              want={example.want}\n              row={i}\n            />\n            <td>{/* empty cell to align with top level formula dummy input */}</td>\n            <Want\n              dummy={false}\n              wantChange={(want) => exampleChange({...example, want},\n                                                  example)}\n            />\n          </tr>\n    ));\n    \n    const dummy = (\n          <tr key={peekKey(props.paramNames.length)}>\n            <td>{/* empty cell to offset rembutton */}</td>\n            <Inputs\n              dummy={true}\n              inputs={props.paramNames.map((_, i) => ({key: peekKey(i)}))}\n              inputsChange={(inputs) => exampleChange({inputs,\n                                                       want: yellow,\n                                                       key: takeKey()},\n                                                      {})}\n            />\n            <td>{/* empty cell to align with param dummy input */}</td>\n            <Outputs\n              dummy={true}\n              formulas={props.formulas}\n            />\n            <td>{/* empty cell to align with top level formula dummy input */}</td>\n            <Want\n              dummy={true}\n              wantChange={(want) => exampleChange({want,\n                                                   inputs: props.paramNames.map((_) => ({prog: yellow, key: takeKey()})),\n                                                   key: takeKey()},\n                                                  {})}\n            />\n          </tr>\n    );\n\n    return (\n        <tbody>\n          {[...reals, dummy]}\n        </tbody>\n    );\n}\n\nfunction Inputs(props) {\n    function validProg(text) {\n        try {\n            interp(parseCheck(text), initEnv);\n        } catch(e) {\n            return false;\n        }\n        return true;\n    }\n\n    function inputChange(newInput, oldInput) {\n        let alteredInputs;\n        if (props.dummy) {\n            alteredInputs = props.inputs.map((input) => input === oldInput ? {...newInput, key: takeKey()} : {prog: yellow, key: takeKey()});\n        } else {\n            alteredInputs = props.inputs.map((input) => input === oldInput ? newInput : input);\n        }\n        props.inputsChange(alteredInputs);\n    }\n\n    return (\n        <React.Fragment>\n          {props.inputs.map((input, i) => (\n              <td key={input.key} >\n                <div className='full_cell'>\n                  <ValidatedInput\n                    dummy={props.dummy}\n                    placeholder={'Input'}\n                    isValid={validProg}\n                    onValid={props.dummy ?\n                             (text) => inputChange({prog: parseCheck(text)},\n                                                   input)\n                             :\n                             (text) => inputChange({...input,\n                                                    prog: parseCheck(text)},\n                                                   input)}\n                    \n                    onEmpty={() => inputChange({...input,\n                                                prog: yellow},\n                                               input)}\n                  />\n                </div>\n              </td>\n          ))}\n        </React.Fragment>\n    );\n}\n\nfunction Outputs(props) {\n    function countWidth(formula) {\n        if (!isBooleanFormula(formula)) {\n            return 1;\n        } else {\n            return formula.thenChildren.reduce((acc, child) => acc + countWidth(child), 2);\n        }\n    }\n\n    if (props.dummy) {\n        return (\n            <React.Fragment>\n            {props.formulas.map((formula) => (\n                <td key={formula.key} colSpan={countWidth(formula)}>{/* empty cell */}</td>\n            ))}\n            </React.Fragment>\n        );\n    } else {\n        return (\n            <React.Fragment>\n              {props.formulas.map((formula) => (\n                  <React.Fragment key={formula.key}>\n                    <TestCell\n                      output={formula.outputs[props.row]}\n                      want={props.want}\n                    />\n                    {isBooleanFormula(formula) ?\n                     <React.Fragment>\n                       <Outputs\n                         formulas={formula.thenChildren}\n                         want={props.want}\n                         row={props.row}\n                       />\n                       {/* make dummy outputs look like the cell to their left */}\n                       {/* this is pretty jank */}\n                       {formula.thenChildren.length > 0 ?\n                        <DummyCell\n                          output={formula.thenChildren[0].outputs[props.row]}\n                        />\n                        :\n                        <td></td>\n                       }\n                     </React.Fragment>\n                     : <script/> }\n                  </React.Fragment>\n              ))}\n            </React.Fragment>\n        );\n    }\n}\n\nfunction TestCell(props) {\n\n    if (props.output === gray) {\n        return (\n            <td className={'gray'}>\n            </td>\n        );\n    }\n\n    if (props.output === pink) {\n        return (\n            <td className={'pink'}>\n            </td>\n        );\n    }\n\n    if (props.output === yellow) {\n        return (\n            <td className={'yellow'}>\n            </td>\n        );\n    }\n\n    let output = props.output;\n    let want = yellow;\n\n    if (props.want !== yellow) {\n        want = interp(props.want, initEnv);\n    }\n\n    let text, error;\n    if (output instanceof Error) {\n        text = output.message;\n        error = true;\n    } else {\n        text = unparse(output);\n        error = false;\n    }\n\n    let img;\n    if (error) {\n        img = <img\n                src={imgPath + 'frowneyface.png'}\n                alt='Error!'\n                style={{float: 'right'}}\n                title={\"Oh no! You got an error!\"}/>;\n    }else if (want === yellow) { // I should make this better\n        img = '';\n    } else if (deepEquals(output, want)) {\n        img =  <img\n                 src={imgPath + 'smileyface.png'}\n                 alt='Yay!'\n                 style={{float: 'right'}}\n                 title={\"Yay! It's right!\"}/>;\n    } else {\n        img = '';\n    }\n\n    return (\n        <td className={'output'}>\n          {text}\n          {img}\n        </td>\n    );\n}\n\nfunction DummyCell (props) {\n    console.log(props.output);\n    if (props.output === gray) {\n        return (\n            <td className={'gray'}>\n            </td>\n        );\n    } else if (props.output === pink) {\n        return (\n            <td className={'pink'}>\n            </td>\n        );\n    } else {\n        return <td></td>;\n    }\n}\n\nfunction Want(props) {\n    function validProg(text) {\n        try {\n            interp(parseCheck(text), initEnv);\n        } catch(e) {\n            return false;\n        }\n        return true;\n    }\n\n    return (\n        <td>\n          <div className='full_cell'>\n            <ValidatedInput\n              dummy={props.dummy}\n              placeholder={'Want'}\n              isValid={validProg}\n              onValid={(text) => props.wantChange(parseCheck(text))}\n              onEmpty={() => props.wantChange(yellow)}\n            />\n          </div>\n        </td>\n    );\n}\n\n/*\n  notes:\n  #inputs === #params\n  #outputs === #examples\n  ---------------------\n  |#inputs !== #outputs| (well it can but not always)\n  ---------------------\n*/\n\nclass App extends React.Component {\n    constructor(props){\n        super(props);\n        let tables = [{examples: [{inputs: [{prog: yellow, key: takeKey()}], want: yellow, key: takeKey()}],\n                       formulas: [{prog: yellow, outputs: [yellow], key: takeKey()}],\n                       params: [{name: yellow, key: takeKey()}],\n                       name: yellow,\n                       key: takeKey()}];\n        this.state = {tables};\n\n        this.programChange = this.programChange.bind(this);\n    }\n\n    calculate(program) {\n        function makeLookup(table) {\n            function lookup(args) {\n                if (args.length !== table.params.length) {\n                    throw new Error('Arity Mismatch, expected ' + table.params.length + ' argument' + (table.params.length === 1 ? '' : 's'));\n                }\n\n                let expr = table.examples.reduce((acc, example) => {\n                    if (acc !== undefined) {\n                        return acc;\n                    }\n\n                    // I have no idea what should happen if this is called on a table with no params\n                    if (example.inputs.reduce((acc, input, i) => {\n                        return acc && deepEquals(interp(input.prog, initEnv), args[i]);\n                    }, true)) {\n                        if (example.want === yellow) {\n                            throw new ReferenceError(`(${table.name} ${args.map(unparse).join(' ')}) doesn't have a want`);\n                        } else {\n                            return interp(example.want, initEnv);\n                        }\n                    }\n\n                    return undefined;\n                }, undefined);\n\n                if (expr === undefined) {\n                    // it's like a reference error in the super meta table language\n                    throw new ReferenceError(args.map(unparse).join() + ' is not an example in ' + table.name);\n                }\n\n                return expr;\n            }\n\n            return lookup;\n        }\n\n        let lookups = program.map((table) => ({name: table.name, binding: {value: makeLookup(table), type: RFUNCT_T}}));\n        let globalEnv = [...initEnv, ...lookups];\n\n        function calcTable(table) {\n            function calcFormula(formula, examples) {\n                let outputs = examples.map((example) => {\n                    if (example === gray) {\n                        return gray;\n                    } else if (example === pink) {\n                        return pink;\n                    } else if (!example.inputs.every((input) => input.prog !== yellow) || formula.prog === yellow) {\n                        // if any of the inputs or the formula isn't initialized, return yellow\n                        return yellow;\n                    }\n\n                    let localEnv = table.params.map((param, i) => ({name: param.name, binding: interp(example.inputs[i].prog, initEnv)}));\n                    let env = [...globalEnv, ...localEnv];\n\n                    try {\n                        var output = interp(formula.prog, env);\n                    } catch (e) {\n                        output = e;\n                    }\n\n                    return output;\n                });\n\n                if (allBools(outputs) || (formula.thenChildren !== undefined && formula.thenChildren.length !== 0)) {\n                    function maybeSpecial(example, output) {\n                        if (example === gray || output.value === false)\n                            return gray;\n                        else if (typeof output.value !== 'boolean')\n                            return pink;\n                        else\n                            return example;\n                    }\n\n                    if (formula.thenChildren === undefined) {\n                        var thenChildren = [];\n                    } else {\n                        let subExamples = examples.map((example, i) => maybeSpecial(example, outputs[i]));\n                        thenChildren = formula.thenChildren.map((formula) => calcFormula(formula, subExamples));\n                    }\n\n                    return {...formula,\n                            outputs,\n                            thenChildren};\n                } else {\n                    let newFormula = {...formula,\n                                      outputs};\n                    delete newFormula.thenChildren;\n                    return newFormula;\n                }\n            }\n\n            if (table.name === yellow || !table.params.every((param) => param.name !== yellow)) {\n                // if the table or any of the table's parameters don't have a name yet, freeze outputs\n                return {...table}; \n            } else {\n                let formulas = table.formulas.map((formula) => calcFormula(formula, table.examples));\n                return {...table,\n                        formulas};\n            }\n\n        }\n\n        return program.map(calcTable);\n    }\n\n    programChange(newProg) {\n        let calkedProg = this.calculate(newProg);\n        //console.log(calkedProg);\n        //console.log('next key: ', peekKey());\n        this.setState((state) => {\n            return {tables: calkedProg};\n        });\n    }\n\n    render(){\n        let bslField;\n        if (showBSL) {\n            bslField = (\n                <textarea\n                  className='bsl_field'\n                  rows={20}\n                  cols={70}\n                  readOnly={true}\n                  value={toBSL_noGroup(this.state.tables, unparse, 70, 70)}\n                />\n            );\n        } else {\n            bslField = (\n                <textarea\n                  className='bsl_field'\n                  rows={20}\n                  cols={70}\n                  readOnly={true}\n                  value={''}\n                />\n            );\n        }\n\n        return (\n            <div>\n              <Succinct\n                tables={this.state.tables}\n                programChange={this.programChange}\n              />\n              <div className='language_select'>\n                <select\n                  defaultValue='cons'\n                  onChange={(e) => {\n                      if (e.target.value === 'cons'){\n                          unparse = unparse_cons;\n                      } else {\n                          unparse = unparse_list;\n                      }\n                      // this just rerenders everything, the state remains unchanged\n                      this.setState((state) => state);\n                  }}\n                >\n                  <option value='cons'>Beginning Student</option>\n                  <option value='list'>Beginning Student with List Abbreviations</option>\n                </select>\n              </div>\n              <div className='bsl_io'>\n                <div className='bsl_checkbox'>\n                  <input\n                    type='checkbox'\n                    id='bsl_output'\n                    name='bsl_output'\n                    onChange={(e) => {\n                        showBSL = !showBSL;\n                        // same here, state remains unchanged but everything is rerendered\n                        this.setState((state) => state);\n                    }}\n                  />\n                  <label htmlFor='bsl_output'>Show BSL Output</label>\n                </div>\n                {bslField}\n              </div>\n              {/* <div> */}\n              {/*   {test} */}\n              {/* </div> */}\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}