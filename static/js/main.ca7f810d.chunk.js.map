{"version":3,"sources":["image.js","interpreter.js","header.js","prettyprint.js","App.js","serviceWorker.js","index.js"],"names":["colorDb","DARK-RED","makeColor","FIRE-BRICK","DEEP-PINK","INDIAN-RED","MEDIUM-VIOLET-RED","VIOLET-RED","LIGHT-CORAL","HOT-PINK","PALE-VIOLET-RED","LIGHT-PINK","ROSY-BROWN","LAVENDER-BLUSH","SADDLE-BROWN","DARK-ORANGE","DARK-GOLDENRON","SANDY-BROWN","LIGHT-SALMON","DARK-SALMON","NAVAJO-WHITE","PEACH-PUFF","DARK-KHAKI","PALE-GOLDENROD","BLANCHE-DIAMOND","MEDIUM-GOLDENROD","PAPAYA-WHIP","MISTY-ROSE","LEMON-CHIFFON","ANTIQUE-WHITE","CORN-SILK","LIGHT-GOLDENRON-YELLOW","OLD-LACE","LIGHT-YELLOW","FLORAL-WHITE","LAWN-GREEN","GREEN-YELLOW","YELLOW-GREEN","OLIVE-DRAB","MEDIUM-FOREST-GREEN","DARK-OLIVE-GREEN","DARK-SEA-GREEN","DARK-GREEN","LIME-GREEN","FOREST-GREEN","SPRING-GREEN","MEDIUM-SPRING-GREEN","SEA-GREEN","MEDIUM-SEA-GREEN","LIGHT-GREEN","PALE-GREEN","MEDIUM-AQUAMARINE","LIGHT-SEA-GREEN","MEDIUM-TURQUOISE","MINT-CREAM","ROYAL-BLUE","DODGER-BLUE","DEEP-SKY-BLUE","CORNFLOWER-BLUE","STEEL-BLUE","LIGHT-SKY-BLUE","DARK-TURQUOISE","DARKTURQUOISE","SKY-BLUE","SKYBLUE","CADET-BLUE","DARK-SLATE-GRAY","LIGHT-STEEL-BLUE","LIGHT-BLUE","POWDER-BLUE","PALE-TURQUOISE","LIGHT-CYAN","ALICE-BLUE","MEDIUM-BLUE","DARK-BLUE","MIDNIGHT-BLUE","BLUE-VIOLET","MEDIUM-SLATE-BLUE","SLATE-BLUE","DARK-SLATE-BLUE","DARK-VIOLET","DARK-ORCHID","MEDIUM-PURPLE","MEDIUM-ORCHID","DARK-MAGENTA","GHOST-WHITE","WHITE-SMOKE","LIGHT-GRAY","DARK-GRAY","DIM-GRAY","ORANGE","ORANGERED","TOMATO","DARKRED","RED","FIREBRICK","CRIMSON","DEEPPINK","MAROON","INDIAN RED","INDIANRED","MEDIUM VIOLET RED","MEDIUMVIOLETRED","VIOLET RED","VIOLETRED","LIGHTCORAL","HOTPINK","PALEVIOLETRED","LIGHTPINK","ROSYBROWN","PINK","ORCHID","LAVENDERBLUSH","SNOW","CHOCOLATE","SADDLEBROWN","BROWN","DARKORANGE","CORAL","SIENNA","SALMON","PERU","DARKGOLDENROD","GOLDENROD","SANDYBROWN","LIGHTSALMON","DARKSALMON","GOLD","YELLOW","OLIVE","BURLYWOOD","TAN","NAVAJOWHITE","PEACHPUFF","KHAKI","DARKKHAKI","MOCCASIN","WHEAT","BISQUE","PALEGOLDENROD","BLANCHEDALMOND","MEDIUM GOLDENROD","MEDIUMGOLDENROD","PAPAYAWHIP","MISTYROSE","LEMONCHIFFON","ANTIQUEWHITE","CORNSILK","LIGHTGOLDENRODYELLOW","OLDLACE","LINEN","LIGHTYELLOW","SEASHELL","BEIGE","FLORALWHITE","IVORY","GREEN","LAWNGREEN","CHARTREUSE","GREEN YELLOW","GREENYELLOW","YELLOW GREEN","YELLOWGREEN","MEDIUM FOREST GREEN","OLIVEDRAB","MEDIUMFORESTGREEN","DARK OLIVE GREEN","DARKOLIVEGREEN","DARKSEAGREEN","LIME","DARK GREEN","DARKGREEN","LIME GREEN","LIMEGREEN","FOREST GREEN","FORESTGREEN","SPRING GREEN","SPRINGGREEN","MEDIUM SPRING GREEN","MEDIUMSPRINGGREEN","SEA GREEN","SEAGREEN","MEDIUM SEA GREEN","MEDIUMSEAGREEN","AQUAMARINE","LIGHTGREEN","PALE GREEN","PALEGREEN","MEDIUM AQUAMARINE","MEDIUMAQUAMARINE","TURQUOISE","LIGHTSEAGREEN","MEDIUM TURQUOISE","MEDIUMTURQUOISE","HONEYDEW","MINTCREAM","ROYALBLUE","DODGERBLUE","DEEPSKYBLUE","CORNFLOWERBLUE","STEEL BLUE","STEELBLUE","LIGHTSKYBLUE","DARK TURQUOISE","CYAN","AQUA","DARKCYAN","TEAL","SKY BLUE","CADET BLUE","CADETBLUE","DARK SLATE GRAY","DARKSLATEGRAY","LIGHTSLATEGRAY","SLATEGRAY","LIGHT STEEL BLUE","LIGHTSTEELBLUE","LIGHT BLUE","LIGHTBLUE","POWDERBLUE","PALETURQUOISE","LIGHTCYAN","ALICEBLUE","AZURE","MEDIUM BLUE","MEDIUMBLUE","DARKBLUE","MIDNIGHT BLUE","MIDNIGHTBLUE","NAVY","BLUE","INDIGO","BLUE VIOLET","BLUEVIOLET","MEDIUM SLATE BLUE","MEDIUMSLATEBLUE","SLATE BLUE","SLATEBLUE","PURPLE","DARK SLATE BLUE","DARKSLATEBLUE","DARKVIOLET","DARK ORCHID","DARKORCHID","MEDIUMPURPLE","CORNFLOWER BLUE","MEDIUM ORCHID","MEDIUMORCHID","MAGENTA","FUCHSIA","DARKMAGENTA","VIOLET","PLUM","LAVENDER","THISTLE","GHOSTWHITE","WHITE","WHITESMOKE","GAINSBORO","LIGHT GRAY","LIGHTGRAY","SILVER","GRAY","DARK GRAY","DARKGRAY","DIM GRAY","DIMGRAY","BLACK","TRANSPARENT","r","g","b","a","arguments","length","undefined","Error","changeAlpha","color","checkDimension","maybeDimension","checkColor","maybeColor","replace","toUpperCase","concat","checkMode","maybeMode","checkXPlace","maybeXPlace","checkYPlace","maybeYPlace","makeRectangle","width","height","mode","type","makeEquiTriangle","A","B","C","makeTriangle","makeBeside","images","yplace","makeAbove","xplace","makeOverlay","makePlace","image","x","y","scene","emptyScene","w","h","coordinates","map","coord","reduce","acc","Math","max","s","area","sqrt","round","render","red","green","blue","alpha","react_default","createElement","cx","cy","fill","stroke","strokeWidth","render_circle","render_rect","D","pow","c","points","render_triangle","cur","render_polygon","initY","yCorrect","make_list_renderer","dx","dy","renderoozle","render_beside","initX","xCorrect","render_above","render_overlay","render_place","xChange","yChange","render_list","first","rest","slice","Object","toConsumableArray","paint","picture","viewBox","xmlns","key","random","RVAR_T","RAPP_T","RFUNCT_T","RNUM_T","RBOOL_T","RSTRING_T","RLIST_T","RSYM_T","RIMAGE_T","RCOLOR_T","RIF_T","varRE","appRE","numRE","boolRE","strRE","quoteRE","symRE","listRE","initEnv","name","binding","value","args","forEach","arg","typeCheck","firstArg","secondArg","car","cdr","d","reverse","isnull","val","thirdArg","fourthArg","restArgs","img","parse","text","test","numStr","match","trim","prog","boolStr","toLowerCase","matches","substring","parseFunct","funct","app","parseArg","SyntaxError","tst","els","thn","parseQ","listArr","num","bool","charAt","str","sym","interp","env","variable","ReferenceError","lookup","console","log","TypeError","toString_cons","join","toString_list","elems","unparse_cons","flat","unparse_list","parseCheck","parsed","types","includes","typesString","gray","pink","yellow","allBools","progs","every","isBooleanFormula","formula","outputs","thenChildren","NIL","nil","string","String","line","union","docL","docR","left","right","nest","i","doc","indent","group","flatten","makePretty","ribbon","best","thisRibbon","current","be","k","pairs","memoize","fits","diffWidth","diffRibbon","thunk","seen","layout","repeat","putSpace","putLine","compose","folddoc","f","docs","spread","stack","bracket","progToDoc","program","Infinity","toBSL","tables","unparse","pretty","table","fieldToDoc","sig","signature","purp","purpose","params","param","checkExpects","examples","example","inputs","input","want","body","formulasToDoc","formulas","bools","splitForms","filter","nonbools","splitFormulas","form","condRows","tableToDoc","dryRun","yo","keyCount","takeKey","peekKey","lookahead","toString","showBSL","deepEquals","proga","progb","functCheck","argCheck","arga","elem","toRGBAArray","ctx","document","getContext","svg","xml","ReactDOMServer","renderToString","image64","btoa","src","drawImage","getImageData","data","imgA","imgB","dataA_red","dataA_green","dataB_red","dataB_green","redSame","datumA_red","greenSame","datumA_green","Colon","props","className","RemButton","onClick","title","index_esm","icon","X","size","verticalAlign","ariaLabel","ValidatedInput","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","textChange","bind","assertThisInitialized","e","target","setState","isValid","onValid","dummy","onEmpty","placeholder","onChange","React","Component","Succinct","tableChange","newTab","oldTab","alteredTabs","indexOf","programChange","validName","modTab","tableVars","otherTab","paramVars","reals","App_ValidatedInput","objectSpread","arrows","validSignature","deadTab","aliveTabs","remTable","SuccinctTab","tableNames","formulasChange","SuccinctHead","paramsExamplesChange","SuccinctBody","paramNames","examplesFormulasChange","validProg","isgood","formulaChange","newForm","oldForm","alteredForms","countWidth","child","abyss","maxDepth","curMax","numParams","colSpan","deadForm","aliveForms","remFormula","_","children","countUp","depth","DepictFormula","numExamples","Array","Parameters","validParam","modParam","paramChange","newParam","alteredParams","alteredExamples","deadParam","deadIndex","aliveParams","modExamples","remParam","Fragment","childChange","newChild","modChild","deadChild","aliveChildren","remChild","exampleChange","newExample","oldExample","exists","addAnotherOutputToFormula","deadExample","aliveExamples","removeOutputFromFormula","remExample","Inputs","inputsChange","Outputs","row","Want","wantChange","inputChange","newInput","oldInput","alteredInputs","TestCell","output","DummyCell","error","face","message","Alert","Check","valueCell","evalWant","App","_this2","makeLookup","expr","lookups","globalEnv","calcFormula","localEnv","subExamples","maybeSpecial","newFormula","newProg","calkedProg","calculate","bslField","_this3","rows","cols","readOnly","defaultValue","id","htmlFor","Boolean","window","location","hostname","ReactDOM","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ca7f810d.chunk.js","sourcesContent":["/*******************************************\n    This here is the image library in js\n*******************************************/\n\n\n/***\n    Data Definitions:\nAn Image is one of \n      - Circle\n      - Rectangle\n      - Triangle\n      - Polygon\n      - Beside\n      - Above\n      - Overlay\n      - Place\n\n    A Circle is\n      {r:     Integer,\n       color: Color,\n       mode:  String,\n       type:  'circle'}\n     \n    A Rectangle is\n      {width:  Integer,\n       height: Integer,\n       color:  Color,\n       mode:   String,\n       type:   'rect'}\n       \n    A Triangle is                   \n      {A:      Integer,             /\\\n       B:      Integer,            /  \\\n       C:      Integer,        B  /    \\  C\n       color:  Color,            /      \\\n       mode:   String,          /________\\\n       type:   'triangle'}          A      \n       \n    A Polygon is\n      {coordinates: [{x: Integer, y: Integer}],\n       color:       Color,\n       mode:        String,\n       type:        'polygon'}\n       \n    note: only acute triangles are handled\n       \n    A Beside is\n      {type:   'beside',\n       yplace:  String,\n       images: [Image]} note: images must be non-empty\n       \n    An Above is\n      {type:   'above',\n       xplace:  String,\n       images: [Image]} note: images must be non-empty\n\n    An Overlay is\n      {type:   'overlay',\n       yplace: String\n       xplace: String,\n       images: [Image]} note: images must be non-empty\n       \n   A Place is\n     {type: place,\n      x:     Integer,\n      y:     Integer,\n      image: Image,\n      scene: Image}\n       \n    A Color is\n      {r: Integer,\n       g: Integer,\n       b: Integer,\n       a: Integer}\n***/\n\nimport React from 'react';\n\n// these colors taken from https://github.com/brownplt/code.pyret.org/blob/horizon/src/web/js/trove/image-lib.js\nconst colorDb = {\n    \"DARK-RED\" : makeColor(139, 0, 0),\n    \"FIRE-BRICK\" : makeColor(178, 34, 34),\n    \"DEEP-PINK\" : makeColor(255, 20, 147),\n    \"INDIAN-RED\" : makeColor(205, 92, 92),\n    \"MEDIUM-VIOLET-RED\" : makeColor(199, 21, 133),\n    \"VIOLET-RED\" : makeColor(208, 32, 144),\n    \"LIGHT-CORAL\" : makeColor(240, 128, 128),\n    \"HOT-PINK\" : makeColor(255, 105, 180),\n    \"PALE-VIOLET-RED\" : makeColor(219, 112, 147),\n    \"LIGHT-PINK\" : makeColor(255, 182, 193),\n    \"ROSY-BROWN\" : makeColor(188, 143, 143),\n    \"LAVENDER-BLUSH\" : makeColor(255, 240, 245),\n    \"SADDLE-BROWN\" : makeColor(139, 69, 19),\n    \"DARK-ORANGE\" : makeColor(255, 140, 0),\n    \"DARK-GOLDENRON\" : makeColor(184, 134, 11),\n    \"SANDY-BROWN\" : makeColor(244, 164, 96),\n    \"LIGHT-SALMON\" : makeColor(255, 160, 122),\n    \"DARK-SALMON\" : makeColor(233, 150, 122),\n    \"NAVAJO-WHITE\" : makeColor(255, 222, 173),\n    \"PEACH-PUFF\" : makeColor(255, 218, 185),\n    \"DARK-KHAKI\" : makeColor(189, 183, 107),\n    \"PALE-GOLDENROD\" : makeColor(238, 232, 170),\n    \"BLANCHE-DIAMOND\" : makeColor(255, 235, 205),\n    \"MEDIUM-GOLDENROD\" : makeColor(234, 234, 173),\n    \"PAPAYA-WHIP\" : makeColor(255, 239, 213),\n    \"MISTY-ROSE\" : makeColor(255, 228, 225),\n    \"LEMON-CHIFFON\" : makeColor(255, 250, 205),\n    \"ANTIQUE-WHITE\" : makeColor(250, 235, 215),\n    \"CORN-SILK\" : makeColor(255, 248, 220),\n    \"LIGHT-GOLDENRON-YELLOW\" : makeColor(250, 250, 210),\n    \"OLD-LACE\" : makeColor(253, 245, 230),\n    \"LIGHT-YELLOW\" : makeColor(255, 255, 224),\n    \"FLORAL-WHITE\" : makeColor(255, 250, 240),\n    \"LAWN-GREEN\" : makeColor(124, 252, 0),\n    \"GREEN-YELLOW\" : makeColor(173, 255, 47),\n    \"YELLOW-GREEN\" : makeColor(154, 205, 50),\n    \"OLIVE-DRAB\" : makeColor(107, 142, 35),\n    \"MEDIUM-FOREST-GREEN\" : makeColor(107, 142, 35),\n    \"DARK-OLIVE-GREEN\" : makeColor(85, 107, 47),\n    \"DARK-SEA-GREEN\" : makeColor(143, 188, 139),\n    \"DARK-GREEN\" : makeColor(0, 100, 0),\n    \"LIME-GREEN\" : makeColor(50, 205, 50),\n    \"FOREST-GREEN\" : makeColor(34, 139, 34),\n    \"SPRING-GREEN\" : makeColor(0, 255, 127),\n    \"MEDIUM-SPRING-GREEN\" : makeColor(0, 250, 154),\n    \"SEA-GREEN\" : makeColor(46, 139, 87),\n    \"MEDIUM-SEA-GREEN\" : makeColor(60, 179, 113),\n    \"LIGHT-GREEN\" : makeColor(144, 238, 144),\n    \"PALE-GREEN\" : makeColor(152, 251, 152),\n    \"MEDIUM-AQUAMARINE\" : makeColor(102, 205, 170),\n    \"LIGHT-SEA-GREEN\" : makeColor(32, 178, 170),\n    \"MEDIUM-TURQUOISE\" : makeColor(72, 209, 204),\n    \"MINT-CREAM\" : makeColor(245, 255, 250),\n    \"ROYAL-BLUE\" : makeColor(65, 105, 225),\n    \"DODGER-BLUE\" : makeColor(30, 144, 255),\n    \"DEEP-SKY-BLUE\" : makeColor(0, 191, 255),\n    \"CORNFLOWER-BLUE\" : makeColor(100, 149, 237),\n    \"STEEL-BLUE\" : makeColor(70, 130, 180),\n    \"LIGHT-SKY-BLUE\" : makeColor(135, 206, 250),\n    \"DARK-TURQUOISE\" : makeColor(0, 206, 209),\n    \"DARKTURQUOISE\" : makeColor(0, 206, 209),\n    \"SKY-BLUE\" : makeColor(135, 206, 235),\n    \"SKYBLUE\" : makeColor(135, 206, 235),\n    \"CADET-BLUE\" : makeColor(96, 160, 160),\n    \"DARK-SLATE-GRAY\" : makeColor(47, 79, 79),\n    \"LIGHT-STEEL-BLUE\" : makeColor(176, 196, 222),\n    \"LIGHT-BLUE\" : makeColor(173, 216, 230),\n    \"POWDER-BLUE\" : makeColor(176, 224, 230),\n    \"PALE-TURQUOISE\" : makeColor(175, 238, 238),\n    \"LIGHT-CYAN\" : makeColor(224, 255, 255),\n    \"ALICE-BLUE\" : makeColor(240, 248, 255),\n    \"MEDIUM-BLUE\" : makeColor(0, 0, 205),\n    \"DARK-BLUE\" : makeColor(0, 0, 139),\n    \"MIDNIGHT-BLUE\" : makeColor(25, 25, 112),\n    \"BLUE-VIOLET\" : makeColor(138, 43, 226),\n    \"MEDIUM-SLATE-BLUE\" : makeColor(123, 104, 238),\n    \"SLATE-BLUE\" : makeColor(106, 90, 205),\n    \"DARK-SLATE-BLUE\" : makeColor(72, 61, 139),\n    \"DARK-VIOLET\" : makeColor(148, 0, 211),\n    \"DARK-ORCHID\" : makeColor(153, 50, 204),\n    \"MEDIUM-PURPLE\" : makeColor(147, 112, 219),\n    \"MEDIUM-ORCHID\" : makeColor(186, 85, 211),\n    \"DARK-MAGENTA\" : makeColor(139, 0, 139),\n    \"GHOST-WHITE\" : makeColor(248, 248, 255),\n    \"WHITE-SMOKE\" : makeColor(245, 245, 245),\n    \"LIGHT-GRAY\" : makeColor(211, 211, 211),\n    \"DARK-GRAY\" : makeColor(169, 169, 169),\n    \"DIM-GRAY\" : makeColor(105, 105, 105),\n\n    \"ORANGE\" : makeColor(255, 165, 0),\n    \"ORANGERED\" : makeColor(255, 69, 0),\n    \"TOMATO\" : makeColor(255, 99, 71),\n    \"DARKRED\" : makeColor(139, 0, 0),\n    \"RED\" : makeColor(255, 0, 0),\n    \"FIREBRICK\" : makeColor(178, 34, 34),\n    \"CRIMSON\" : makeColor(220, 20, 60),\n    \"DEEPPINK\" : makeColor(255, 20, 147),\n    \"MAROON\" : makeColor(176, 48, 96),\n    \"INDIAN RED\" : makeColor(205, 92, 92),\n    \"INDIANRED\" : makeColor(205, 92, 92),\n    \"MEDIUM VIOLET RED\" : makeColor(199, 21, 133),\n    \"MEDIUMVIOLETRED\" : makeColor(199, 21, 133),\n    \"VIOLET RED\" : makeColor(208, 32, 144),\n    \"VIOLETRED\" : makeColor(208, 32, 144),\n    \"LIGHTCORAL\" : makeColor(240, 128, 128),\n    \"HOTPINK\" : makeColor(255, 105, 180),\n    \"PALEVIOLETRED\" : makeColor(219, 112, 147),\n    \"LIGHTPINK\" : makeColor(255, 182, 193),\n    \"ROSYBROWN\" : makeColor(188, 143, 143),\n    \"PINK\" : makeColor(255, 192, 203),\n    \"ORCHID\" : makeColor(218, 112, 214),\n    \"LAVENDERBLUSH\" : makeColor(255, 240, 245),\n    \"SNOW\" : makeColor(255, 250, 250),\n    \"CHOCOLATE\" : makeColor(210, 105, 30),\n    \"SADDLEBROWN\" : makeColor(139, 69, 19),\n    \"BROWN\" : makeColor(132, 60, 36),\n    \"DARKORANGE\" : makeColor(255, 140, 0),\n    \"CORAL\" : makeColor(255, 127, 80),\n    \"SIENNA\" : makeColor(160, 82, 45),\n    \"SALMON\" : makeColor(250, 128, 114),\n    \"PERU\" : makeColor(205, 133, 63),\n    \"DARKGOLDENROD\" : makeColor(184, 134, 11),\n    \"GOLDENROD\" : makeColor(218, 165, 32),\n    \"SANDYBROWN\" : makeColor(244, 164, 96),\n    \"LIGHTSALMON\" : makeColor(255, 160, 122),\n    \"DARKSALMON\" : makeColor(233, 150, 122),\n    \"GOLD\" : makeColor(255, 215, 0),\n    \"YELLOW\" : makeColor(255, 255, 0),\n    \"OLIVE\" : makeColor(128, 128, 0),\n    \"BURLYWOOD\" : makeColor(222, 184, 135),\n    \"TAN\" : makeColor(210, 180, 140),\n    \"NAVAJOWHITE\" : makeColor(255, 222, 173),\n    \"PEACHPUFF\" : makeColor(255, 218, 185),\n    \"KHAKI\" : makeColor(240, 230, 140),\n    \"DARKKHAKI\" : makeColor(189, 183, 107),\n    \"MOCCASIN\" : makeColor(255, 228, 181),\n    \"WHEAT\" : makeColor(245, 222, 179),\n    \"BISQUE\" : makeColor(255, 228, 196),\n    \"PALEGOLDENROD\" : makeColor(238, 232, 170),\n    \"BLANCHEDALMOND\" : makeColor(255, 235, 205),\n    \"MEDIUM GOLDENROD\" : makeColor(234, 234, 173),\n    \"MEDIUMGOLDENROD\" : makeColor(234, 234, 173),\n    \"PAPAYAWHIP\" : makeColor(255, 239, 213),\n    \"MISTYROSE\" : makeColor(255, 228, 225),\n    \"LEMONCHIFFON\" : makeColor(255, 250, 205),\n    \"ANTIQUEWHITE\" : makeColor(250, 235, 215),\n    \"CORNSILK\" : makeColor(255, 248, 220),\n    \"LIGHTGOLDENRODYELLOW\" : makeColor(250, 250, 210),\n    \"OLDLACE\" : makeColor(253, 245, 230),\n    \"LINEN\" : makeColor(250, 240, 230),\n    \"LIGHTYELLOW\" : makeColor(255, 255, 224),\n    \"SEASHELL\" : makeColor(255, 245, 238),\n    \"BEIGE\" : makeColor(245, 245, 220),\n    \"FLORALWHITE\" : makeColor(255, 250, 240),\n    \"IVORY\" : makeColor(255, 255, 240),\n    \"GREEN\" : makeColor(0, 255, 0),\n    \"LAWNGREEN\" : makeColor(124, 252, 0),\n    \"CHARTREUSE\" : makeColor(127, 255, 0),\n    \"GREEN YELLOW\" : makeColor(173, 255, 47),\n    \"GREENYELLOW\" : makeColor(173, 255, 47),\n    \"YELLOW GREEN\" : makeColor(154, 205, 50),\n    \"YELLOWGREEN\" : makeColor(154, 205, 50),\n    \"MEDIUM FOREST GREEN\" : makeColor(107, 142, 35),\n    \"OLIVEDRAB\" : makeColor(107, 142, 35),\n    \"MEDIUMFORESTGREEN\" : makeColor(107, 142, 35),\n    \"DARK OLIVE GREEN\" : makeColor(85, 107, 47),\n    \"DARKOLIVEGREEN\" : makeColor(85, 107, 47),\n    \"DARKSEAGREEN\" : makeColor(143, 188, 139),\n    \"LIME\" : makeColor(0, 255, 0),\n    \"DARK GREEN\" : makeColor(0, 100, 0),\n    \"DARKGREEN\" : makeColor(0, 100, 0),\n    \"LIME GREEN\" : makeColor(50, 205, 50),\n    \"LIMEGREEN\" : makeColor(50, 205, 50),\n    \"FOREST GREEN\" : makeColor(34, 139, 34),\n    \"FORESTGREEN\" : makeColor(34, 139, 34),\n    \"SPRING GREEN\" : makeColor(0, 255, 127),\n    \"SPRINGGREEN\" : makeColor(0, 255, 127),\n    \"MEDIUM SPRING GREEN\" : makeColor(0, 250, 154),\n    \"MEDIUMSPRINGGREEN\" : makeColor(0, 250, 154),\n    \"SEA GREEN\" : makeColor(46, 139, 87),\n    \"SEAGREEN\" : makeColor(46, 139, 87),\n    \"MEDIUM SEA GREEN\" : makeColor(60, 179, 113),\n    \"MEDIUMSEAGREEN\" : makeColor(60, 179, 113),\n    \"AQUAMARINE\" : makeColor(112, 216, 144),\n    \"LIGHTGREEN\" : makeColor(144, 238, 144),\n    \"PALE GREEN\" : makeColor(152, 251, 152),\n    \"PALEGREEN\" : makeColor(152, 251, 152),\n    \"MEDIUM AQUAMARINE\" : makeColor(102, 205, 170),\n    \"MEDIUMAQUAMARINE\" : makeColor(102, 205, 170),\n    \"TURQUOISE\" : makeColor(64, 224, 208),\n    \"LIGHTSEAGREEN\" : makeColor(32, 178, 170),\n    \"MEDIUM TURQUOISE\" : makeColor(72, 209, 204),\n    \"MEDIUMTURQUOISE\" : makeColor(72, 209, 204),\n    \"HONEYDEW\" : makeColor(240, 255, 240),\n    \"MINTCREAM\" : makeColor(245, 255, 250),\n    \"ROYALBLUE\" : makeColor(65, 105, 225),\n    \"DODGERBLUE\" : makeColor(30, 144, 255),\n    \"DEEPSKYBLUE\" : makeColor(0, 191, 255),\n    \"CORNFLOWERBLUE\" : makeColor(100, 149, 237),\n    \"STEEL BLUE\" : makeColor(70, 130, 180),\n    \"STEELBLUE\" : makeColor(70, 130, 180),\n    \"LIGHTSKYBLUE\" : makeColor(135, 206, 250),\n    \"DARK TURQUOISE\" : makeColor(0, 206, 209),\n    \"CYAN\" : makeColor(0, 255, 255),\n    \"AQUA\" : makeColor(0, 255, 255),\n    \"DARKCYAN\" : makeColor(0, 139, 139),\n    \"TEAL\" : makeColor(0, 128, 128),\n    \"SKY BLUE\" : makeColor(135, 206, 235),\n    \"CADET BLUE\" : makeColor(96, 160, 160),\n    \"CADETBLUE\" : makeColor(95, 158, 160),\n    \"DARK SLATE GRAY\" : makeColor(47, 79, 79),\n    \"DARKSLATEGRAY\" : makeColor(47, 79, 79),\n    \"LIGHTSLATEGRAY\" : makeColor(119, 136, 153),\n    \"SLATEGRAY\" : makeColor(112, 128, 144),\n    \"LIGHT STEEL BLUE\" : makeColor(176, 196, 222),\n    \"LIGHTSTEELBLUE\" : makeColor(176, 196, 222),\n    \"LIGHT BLUE\" : makeColor(173, 216, 230),\n    \"LIGHTBLUE\" : makeColor(173, 216, 230),\n    \"POWDERBLUE\" : makeColor(176, 224, 230),\n    \"PALETURQUOISE\" : makeColor(175, 238, 238),\n    \"LIGHTCYAN\" : makeColor(224, 255, 255),\n    \"ALICEBLUE\" : makeColor(240, 248, 255),\n    \"AZURE\" : makeColor(240, 255, 255),\n    \"MEDIUM BLUE\" : makeColor(0, 0, 205),\n    \"MEDIUMBLUE\" : makeColor(0, 0, 205),\n    \"DARKBLUE\" : makeColor(0, 0, 139),\n    \"MIDNIGHT BLUE\" : makeColor(25, 25, 112),\n    \"MIDNIGHTBLUE\" : makeColor(25, 25, 112),\n    \"NAVY\" : makeColor(36, 36, 140),\n    \"BLUE\" : makeColor(0, 0, 255),\n    \"INDIGO\" : makeColor(75, 0, 130),\n    \"BLUE VIOLET\" : makeColor(138, 43, 226),\n    \"BLUEVIOLET\" : makeColor(138, 43, 226),\n    \"MEDIUM SLATE BLUE\" : makeColor(123, 104, 238),\n    \"MEDIUMSLATEBLUE\" : makeColor(123, 104, 238),\n    \"SLATE BLUE\" : makeColor(106, 90, 205),\n    \"SLATEBLUE\" : makeColor(106, 90, 205),\n    \"PURPLE\" : makeColor(160, 32, 240),\n    \"DARK SLATE BLUE\" : makeColor(72, 61, 139),\n    \"DARKSLATEBLUE\" : makeColor(72, 61, 139),\n    \"DARKVIOLET\" : makeColor(148, 0, 211),\n    \"DARK ORCHID\" : makeColor(153, 50, 204),\n    \"DARKORCHID\" : makeColor(153, 50, 204),\n    \"MEDIUMPURPLE\" : makeColor(147, 112, 219),\n    \"CORNFLOWER BLUE\" : makeColor(68, 64, 108),\n    \"MEDIUM ORCHID\" : makeColor(186, 85, 211),\n    \"MEDIUMORCHID\" : makeColor(186, 85, 211),\n    \"MAGENTA\" : makeColor(255, 0, 255),\n    \"FUCHSIA\" : makeColor(255, 0, 255),\n    \"DARKMAGENTA\" : makeColor(139, 0, 139),\n    \"VIOLET\" : makeColor(238, 130, 238),\n    \"PLUM\" : makeColor(221, 160, 221),\n    \"LAVENDER\" : makeColor(230, 230, 250),\n    \"THISTLE\" : makeColor(216, 191, 216),\n    \"GHOSTWHITE\" : makeColor(248, 248, 255),\n    \"WHITE\" : makeColor(255, 255, 255),\n    \"WHITESMOKE\" : makeColor(245, 245, 245),\n    \"GAINSBORO\" : makeColor(220, 220, 220),\n    \"LIGHT GRAY\" : makeColor(211, 211, 211),\n    \"LIGHTGRAY\" : makeColor(211, 211, 211),\n    \"SILVER\" : makeColor(192, 192, 192),\n    \"GRAY\" : makeColor(190, 190, 190),\n    \"DARK GRAY\" : makeColor(169, 169, 169),\n    \"DARKGRAY\" : makeColor(169, 169, 169),\n    \"DIM GRAY\" : makeColor(105, 105, 105),\n    \"DIMGRAY\" : makeColor(105, 105, 105),\n    \"BLACK\" : makeColor(0, 0, 0),\n    \"TRANSPARENT\" : makeColor(0, 0, 0, 0),\n};\n\n// Integer\n// generates a random key so react stops complaining\nfunction genKey() {\n    return Math.round(Math.random() * 100000000);\n}\n\n/*\nTODO:\n  Figure out how stars, pentagons, hexagons should work (yay geometry)\n  turn rectangles and triangles into polygons?\n*/\n\n// Integer, Integer, Integer[, Integer] -> Color \nfunction makeColor (r, g, b, a = 255) {\n    if (r < 0 || r > 255 ||\n        g < 0 || g > 255 ||\n        b < 0 || b > 255 ||\n        a < 0 || a > 255 ){\n        throw new Error('r g b a values must be between 0 and 255 (inclusive)');\n    }\n\n    return {r, g, b, a};\n}\n\n// Color, Integer -> Color\nfunction changeAlpha (color, a) {\n    return makeColor(color.r, color.g, color.b, a);\n}\n\n// Integer -> Integer\n// pretty much makes sure the argument is non-negative\nfunction checkDimension(maybeDimension) {\n    if (maybeDimension < 0) {\n        throw new Error('shape dimensions must be non-negative');\n    }\n\n    return maybeDimension;\n}\n\n// (String or Color) -> Color\nfunction checkColor(maybeColor) {\n    if (typeof maybeColor === 'string') {\n        let color = colorDb[maybeColor.replace(' ', '').toUpperCase()];\n        if (color === undefined) {\n            throw new Error(`${maybeColor} is not a valid color`);\n        }\n\n        return color;\n    } \n\n    // T_ODO: check if maybeColor is actually a color object\n    // nvm, I do that in interpreter.js\n    return maybeColor;\n}\n\nfunction checkMode(maybeMode) {\n    if (maybeMode !== 'solid' && maybeMode !== 'outline') {\n        throw new Error(`${maybeMode} is not a valid mode`);\n    }\n\n    return maybeMode;\n}\n\nfunction checkXPlace(maybeXPlace) {\n    if (maybeXPlace === 'middle') {\n        return 'center';\n    }\n\n    if (maybeXPlace !== 'left' && maybeXPlace !== 'right' && maybeXPlace !== 'center') {\n        throw new Error(`${maybeXPlace} is not a valid x-place`);\n    }\n\n    return maybeXPlace;\n}\n\nfunction checkYPlace(maybeYPlace) {\n    if (maybeYPlace === 'middle') {\n        return 'center';\n    }\n\n    if (maybeYPlace !== 'top' && maybeYPlace !== 'bottom' && maybeYPlace !== 'center') {\n        throw new Error(`${maybeYPlace} is not a valid y-place`);\n    }\n\n    return maybeYPlace;\n}\n\n// Integer (String or Integer) Color -> Circle\nfunction makeCircle (r, mode, color) {\n    if (typeof mode === 'string') {\n        return {r: checkDimension(r), mode: checkMode(mode), color: checkColor(color), type: 'circle'};\n    } else {\n        return {r: checkDimension(r), mode: 'solid', color: changeAlpha(checkColor(color), mode), type: 'circle'};\n    }\n}\n\n// Integer Integer (String or Integer) Color -> Rectangle\nfunction makeRectangle (width, height, mode, color) {\n    if (typeof mode === 'string') {\n        return {width: checkDimension(width), height: checkDimension(height), mode: checkMode(mode),  color: checkColor(color), type: 'rect'};\n    } else {\n        return {width: checkDimension(width), height: checkDimension(height), mode: 'solid',  color: changeAlpha(checkColor(color), mode), type: 'rect'};\n    }\n}\n\n// Integer Integer Integer (String or Integer) Color -> Triangle\nfunction makeTriangle (A, B, C, mode, color) {\n    if (typeof mode === 'string') {\n        return {A: checkDimension(A), B: checkDimension(B), C: checkDimension(C), mode: checkMode(mode), color: checkColor(color), type: 'triangle'};\n    } else {\n        return {A: checkDimension(A), B: checkDimension(B), C: checkDimension(C), mode: 'solid', color: changeAlpha(checkColor(color), mode), type: 'triangle'};\n    }\n}\n\n// Integer (String or Integer) Color -> Triangle\nfunction makeEquiTriangle (length, mode, color) {\n    return makeTriangle(length, length, length, mode, color);\n}\n\n// [{x: Integer, y: Integer}], (String or Integer), Color -> Polygon\nfunction makePolygon (coords, mode, color) {\n    if (typeof mode === 'string') {\n        return {coordinates: coords, mode: checkMode(mode), color: checkColor(color), type: 'polygon'};\n    } else {\n        return {coordinates: coords, mode: 'solid', color: changeAlpha(checkColor(color), mode), type: 'polygon'};\n    }\n}\n\n// Integer, (String or Integer), Color -> Polygon\nfunction makePentagon (length, mode, color) {\n}\n\n// Integer, (String or Integer), Color -> Polygon\nfunction makeHexagon (length, mode, color) {\n}\n\n// Integer, (String or Integer), Color -> Polygon\nfunction makeStar (length, mode, color) {\n    \n}\n\n// [Image] -> Image\nfunction makeBeside (images, yplace = 'center') {\n    return {images, yplace: checkYPlace(yplace), type: 'beside'};\n}\n\n// [Image] -> Image\nfunction makeAbove (images, xplace = 'center') {\n    return {images, xplace: checkXPlace(xplace), type: 'above'};\n}\n\n// [Image] -> Image\nfunction makeOverlay (images, xplace = 'center', yplace = 'center') {\n    return {images, xplace: checkXPlace(xplace), yplace: checkYPlace(yplace), type: 'overlay'};\n}\n\nfunction makePlace (image, x, y, scene) {\n    return {image, x, y, scene, type: 'place'};\n}\n\n// Integer, Integer[, (Color or String)] -> Image\nfunction emptyScene (w, h, color = 'white') {\n    return makeOverlay([makeRectangle(w, h, 'outline', 'black'), makeRectangle(w, h, 'solid', color)]);\n}\n\n// Image -> Integer\nfunction width (image) {\n    switch (image.type) {\n    case 'circle':\n        return image.r * 2;\n    case 'rect':\n        return image.width;\n    case 'triangle':\n        return image.A;\n    case 'polygon':\n        return image.coordinates.map((coord) => coord.x).reduce((acc, x) => Math.max(acc, x));\n    case 'beside':\n        return image.images.reduce((acc, image) => acc + width(image), 0);\n    case 'above':\n        return image.images.reduce((acc, image) => Math.max(acc, width(image)), 0);\n    case 'overlay':\n        return image.images.reduce((acc, image) => Math.max(acc, width(image)), 0);\n    case 'place':\n        return width(image.scene);\n    default:\n        return new Error (`Unknown Image Type: ${image.type}`);\n    }\n}\n\n// Image -> Integer\nfunction height (image) {\n    switch (image.type) {\n    case 'circle':\n        return image.r * 2;\n    case 'rect':\n        return image.height;\n    case 'triangle':\n        // Heron's Formula, I went on Wikihow for this, don't judge\n        let s = (image.A + image.B + image.C) / 2;\n        let area = Math.sqrt(s * (s  - image.A) * (s - image.B) * (s - image.C));\n        return Math.round((area * 2) / image.A);\n    case 'polygon':\n        return image.coordinates.map((coord) => coord.y).reduce((acc, y) => Math.max(acc, y));\n    case 'beside':\n        return image.images.reduce((acc, image) => Math.max(acc, height(image)), 0);\n    case 'above':\n        return image.images.reduce((acc, image) => acc + height(image), 0);\n    case 'overlay':\n        return image.images.reduce((acc, image) => Math.max(acc, height(image)), 0);\n    case 'place':\n        return height(image.scene);\n    default:\n        return new Error (`Unknown Image Type: ${image.type}`);\n    }\n}\n\n\n// Image, Integer, Integer -> SVG\nfunction render (image, x, y) {\n    switch (image.type) {\n    case 'circle':\n        return render_circle(image, x, y);\n    case 'rect':\n        return render_rect(image, x, y);\n    case 'triangle':\n        return render_triangle(image, x, y);\n    case 'polygon':\n        return render_polygon(image, x, y);\n    case 'beside':\n        return render_beside(image, x, y);\n    case 'above':\n        return render_above(image, x, y);\n    case 'overlay':\n        return render_overlay(image, x, y);\n    case 'place':\n        return render_place(image, x, y);\n    default:\n        throw new Error (`Unknown Image Type: ${image.type}`);\n    }\n}\n\n// Circle, Integer, Integer -> SVG\nfunction render_circle (image, x, y) {\n    let red = image.color.r;\n    let green = image.color.g;\n    let blue = image.color.b;\n    // for some reason alpha is the only float in rgba in css...\n    let alpha = image.color.a / 255;\n    switch (image.mode) {\n    case 'solid':\n        return <circle cx={x + image.r}\n                       cy={y + image.r}\n                       r={image.r}\n                       fill={`rgba(${red}, ${green}, ${blue}, ${alpha})`}\n               />;\n    case 'outline':\n        // stroke is pretty annoying...\n        // it draws both outside of the shape and inside it...\n        //so it's difficult to figure out where exactly it wants to draw\n\n        // this should draw the outline of a circle (approximately)\n        // not sure how it works on browsers besides firefox though\n        return <circle cx={x + image.r}\n                       cy={y + image.r}\n                       r={image.r - .5}\n                       fill='none'\n                       stroke={`rgba(${red}, ${green}, ${blue}, ${alpha})`}\n                       strokeWidth={1}\n               />;\n    default:\n        throw new Error (`Unknown Image Mode: ${image.mode}`);\n    }\n}\n\n// Rectangle, Integer, Integer -> SVG\nfunction render_rect (image, x, y) {\n    let red = image.color.r;\n    let green = image.color.g;\n    let blue = image.color.b;\n    let alpha = image.color.a / 255;\n\n    switch (image.mode) {\n    case 'solid':\n        return <rect x={x}\n                     y={y}\n                     width={image.width}\n                     height={image.height}\n                     fill={`rgba(${red}, ${green}, ${blue}, ${alpha})`}\n               />;\n    case 'outline':\n        // stroke has similar problems here as it does in circle\n        return <rect x={x + .5}\n                      y={y + .5}\n                      width={image.width - 1}\n                      height={image.height - 1}\n                      fill='none'\n                      stroke={`rgba(${red}, ${green}, ${blue}, ${alpha})`}\n                      strokeWidth={1}\n                 />;\n    default:\n        throw new Error (`Unknown Image Mode: ${image.mode}`);\n    }\n}\n\n// Triangle, Integer, Integer -> SVG\nfunction render_triangle (image, x, y) {\n    let red = image.color.r;\n    let green = image.color.g;\n    let blue = image.color.b;\n    let alpha = image.color.a / 255;\n\n    let D = Math.round(Math.sqrt(Math.pow(image.B, 2) - Math.pow(height(image), 2))); \n    // these are coordinates                                   //         b       \n    let a = {x: x, y: y + height(image)};                      //         .       \n    let b = {x: x + D, y: y};                                  //        /|\\      \n    let c = {x: x + width(image), y: y + height(image)};       //       / | \\     \n                                                               //   B  /  |  \\  C\n                                                               //     /   |h  \\\n                                                               //    /    |    \\\n                                                               //   ._____|_____.\n                                                               //  a   D  A      c\n    switch (image.mode) {                                       \n    case 'solid':                                               \n        return <polygon\n                 points={`${a.x},${a.y} ${b.x},${b.y} ${c.x},${c.y}`}\n                 fill={`rgba(${red}, ${green}, ${blue}, ${alpha})`}\n               />;\n    case 'outline':\n        return <polygon\n                 points={`${a.x},${a.y} ${b.x},${b.y} ${c.x},${c.y}`}\n                 fill='none'\n                 stroke={`rgba(${red}, ${green}, ${blue}, ${alpha})`}\n                 strokeWidth={1}\n               />;\n    default:\n        throw new Error (`Unknown Image Mode: ${image.mode}`);\n    }\n}\n\n// Polygon, Integer, Integer -> SVG\nfunction render_polygon (image, x, y) {\n    let red = image.color.r;\n    let green = image.color.g;\n    let blue = image.color.b;\n    let alpha = image.color.a / 255;\n\n    let points = image.coordinates.map((coord) => `${coord.x + x},${coord.y + y}`).reduce((acc, cur) => acc + ' ' + cur);\n    switch (image.mode) {\n    case 'solid':                                               \n        return <polygon\n                 points={points}\n                 fill={`rgba(${red}, ${green}, ${blue}, ${alpha})`}\n               />;\n    case 'outline':\n        return <polygon\n                 points={points}\n                 fill='none'\n                 stroke={`rgba(${red}, ${green}, ${blue}, ${alpha})`}\n                 strokeWidth={1}\n               />;\n    default:\n        throw new Error (`Unknown Image Mode: ${image.mode}`);\n    }\n}\n\n\n// should I flatten [SVG]s?\n// no, not really any point. react seems to figure it out\n\n// (Integer, Integer -> Integer), (Integer, Integer -> Integer), (Integer, Integer -> Integer), (Integer, Integer -> Integer) -> ([Image], Integer, Integer) -> [SVG]\nfunction make_list_renderer (xCorrect, yCorrect, xChange, yChange) {\n    function render_list (images, x, y) {\n        if (images.length === 0) {\n            throw new Error('I need at least 1 image to render!');\n        }\n\n        let w = width(images[0]);\n        let h = height(images[0]);\n\n        let first = render(images[0], xCorrect(x, w), yCorrect(y, h));\n\n        if (images.length === 1) {\n            return [first];\n        }\n\n        let rest = render_list(images.slice(1), xChange(x, w), yChange(y, h));\n\n        // return list in reverse because the last child of an svg tag is shown on top\n        // this matters for overlay, but makes no difference in beside, above\n        return [...rest, first];\n    }\n\n    return render_list;\n}\n\n// Beside, Ingeger, Integer -> [SVG]\nfunction render_beside (image, x, y) {\n    let initY = y,\n        yCorrect = (y, h) => y;\n\n    switch(image.yplace) {\n    case 'top':\n        break;\n    case 'center':\n        initY = y + height(image) / 2;\n        yCorrect = (y, h) => y - h/2;\n        break;\n    case 'bottom':\n        initY = y + height(image);\n        yCorrect = (y, h) => y - h;\n        break;\n    default:\n        throw new Error(`Unknown y-place: ${image.yplace}`);\n    }\n\n    let renderoozle = make_list_renderer((x, w) => x,\n                                         yCorrect,\n                                         (x, dx) => x + dx,\n                                         (y, dy) => y);\n    return renderoozle(image.images, x, initY);\n}\n\n// Above, Integer, Integer -> [SVG]\nfunction render_above (image, x, y) {\n    let initX = x,\n        xCorrect = (x, w) => x;\n\n    switch(image.xplace) {\n    case 'left':\n        break;\n    case 'center':\n        initX = x + width(image) / 2;\n        xCorrect = (x, w) => x - w/2;\n        break;\n    case 'right':\n        initX = x + width(image);\n        xCorrect = (x, w) => x - w;\n        break;\n    default:\n        throw new Error(`Unknown x-place: ${image.xplace}`);\n    }\n\n    let renderoozle = make_list_renderer(xCorrect,\n                                         (y, h) => y,\n                                         (x, dx) => x,\n                                         (y, dy) => y + dy);\n    return renderoozle(image.images, initX, y);\n\n}\n\n// Overlay, Integer, Integer -> [SVG]\nfunction render_overlay (image, x, y) {\n    let initX = x,\n        initY = y,\n        xCorrect = (x, w) => x,\n        yCorrect = (y, h) => y;\n    \n    switch(image.xplace) {\n    case 'left':\n        break;\n    case 'center':\n        initX = x + width(image) / 2;\n        xCorrect = (x, w) => x - w/2;\n        break;\n    case 'right':\n        initX = x + width(image);\n        xCorrect = (x, w) => x - w;\n        break;\n    default:\n        throw new Error(`Unknown x-place: ${image.xplace}`);\n    }\n\n    switch(image.yplace) {\n    case 'top':\n        break;\n    case 'center':\n        initY = y + height(image) / 2;\n        yCorrect = (y, h) => y - h/2;\n        break;\n    case 'bottom':\n        initY = y + height(image);\n        yCorrect = (y, h) => y - h;\n        break;\n    default:\n        throw new Error(`Unknown y-place: ${image.yplace}`);\n    }\n\n    let renderoozle = make_list_renderer(xCorrect,\n                                         yCorrect,\n                                         (x, dx) => x,\n                                         (y, dy) => y);\n    return renderoozle(image.images, initX, initY);\n}\n\n// Place, Integer, Integer -> SVG\nfunction render_place (image, x, y) {\n    return [render(image.scene, x, y), render(image.image, image.x - width(image.image) / 2, image.y - height(image.image) / 2)];\n}\n\n// Image -> top level SVG\nfunction paint (image) {\n    let picture = render(image, 0, 0);\n    return (\n        <svg viewBox={`0 0 ${width(image)} ${height(image)}`}\n             xmlns='http://www.w3.org/2000/svg'\n             width={width(image)}\n             height={height(image)}\n             key={genKey()}\n        >\n          {picture}\n        </svg>\n    );\n}\n\nexport {makeCircle, makeRectangle, makeEquiTriangle, makeStar, makePentagon, makeHexagon,\n        makeBeside, makeAbove, makeOverlay,\n        makePlace, emptyScene, makeColor,\n        paint, width, height};\n","import {makeCircle, makeRectangle, makeEquiTriangle,\n        makeBeside, makeAbove, makeOverlay,\n        makePlace, emptyScene, makeColor,\n        paint} from './image.js';\n\n/****************\n   Interpreter\n****************/\n\nconst RVAR_T =    0;\nconst RAPP_T =    1;\nconst RFUNCT_T =   2;\nconst RNUM_T =    3;\nconst RBOOL_T =   4;\nconst RSTRING_T = 5;\nconst RLIST_T =   6;\nconst RSYM_T =    7;\nconst RIMAGE_T =  8;\nconst RCOLOR_T =  9;\nconst RIF_T =   10;\n\nconst varRE = /^[^\\s\",'`()[\\]{}|;#]+/; // except numbers\nconst appRE = /^\\(/;\nconst numRE = /^-?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?=$|[\\s\",'`()[\\]{}|;#])/; // this one doesn't permit fractions\nconst boolRE = /^#(?:[tfTF]|true|false)(?=$|[\\s\",'`()[\\]{}|;#])/;\nconst strRE = /^\"[^\\\\\"]*\"/; // TODO: handle backslash escape\nconst quoteRE = /^'/;\nconst symRE = /^[^\\s\",'`()[\\]{}|;#]+/; // except numbers\nconst listRE = /^\\(/;\n\nconst initEnv = [\n    // functions\n    {name: '+', binding: {type: RFUNCT_T,\n                          value: plus}},\n    {name: 'add1', binding: {type: RFUNCT_T,\n                          value: add1}},\n    {name: '-', binding: {type: RFUNCT_T,\n                          value: minus}},\n    {name: 'sub1', binding: {type: RFUNCT_T,\n                          value: sub1}},\n    {name: '*', binding: {type: RFUNCT_T,\n                          value: times}},\n    {name: '/', binding: {type: RFUNCT_T,\n                          value: divide}},\n    {name: 'car', binding: {type: RFUNCT_T,\n                            value: car}},\n    {name: 'first', binding: {type: RFUNCT_T,\n                              value: car}},\n    {name: 'cdr', binding: {type: RFUNCT_T,\n                            value: cdr}},\n    {name: 'rest', binding: {type: RFUNCT_T,\n                             value: cdr}},\n    {name: 'cons', binding: {type: RFUNCT_T,\n                             value: cons}},\n    {name: 'list', binding: {type: RFUNCT_T,\n                             value: list}},\n    {name: 'not', binding: {type: RFUNCT_T,\n                            value: not}},\n    {name: 'and', binding: {type: RFUNCT_T,\n                            value: and}},\n    {name: 'or', binding: {type: RFUNCT_T,\n                           value: or}},\n    {name: 'eqv?', binding: {type: RFUNCT_T,\n                             value: iseqv}},\n    {name: 'null?', binding: {type: RFUNCT_T,\n                              value: isnull}},\n    {name: 'empty?', binding: {type: RFUNCT_T,\n                               value: isnull}},\n    {name: 'cons?', binding: {type: RFUNCT_T,\n                               value: iscons}},\n    {name: '=', binding: {type: RFUNCT_T,\n                          value: equalsign}},\n    {name: '>', binding: {type: RFUNCT_T,\n                          value: gtsign}},\n    {name: '>=', binding: {type: RFUNCT_T,\n                           value: gesign}},\n    {name: '<', binding: {type: RFUNCT_T,\n                          value: ltsign}},\n    {name: '<=', binding: {type: RFUNCT_T,\n                           value: lesign}},\n    {name: 'string-length', binding: {type: RFUNCT_T,\n                           value: stringLength}},\n    {name: 'string-append', binding: {type: RFUNCT_T,\n                           value: stringAppend}},\n    {name: 'string=?', binding: {type: RFUNCT_T,\n                                 value: isstrequal}},\n    {name: 'circle', binding: {type: RFUNCT_T,\n                               value: circle}},\n    {name: 'rectangle', binding: {type: RFUNCT_T,\n                               value: rectangle}},\n    {name: 'square', binding: {type: RFUNCT_T,\n                               value: square}},\n    {name: 'triangle', binding: {type: RFUNCT_T,\n                               value: triangle}},\n    {name: 'beside', binding: {type: RFUNCT_T,\n                               value: beside}},\n    {name: 'beside/align', binding: {type: RFUNCT_T,\n                               value: besideAlign}},\n    {name: 'above', binding: {type: RFUNCT_T,\n                               value: above}},\n    {name: 'above/align', binding: {type: RFUNCT_T,\n                               value: aboveAlign}},\n    {name: 'overlay', binding: {type: RFUNCT_T,\n                               value: overlay}},\n    {name: 'overlay/align', binding: {type: RFUNCT_T,\n                               value: overlayAlign}},\n    {name: 'place-image', binding: {type: RFUNCT_T,\n                                    value: placeImage}},\n    {name: 'empty-scene', binding: {type: RFUNCT_T,\n                                    value: empty_Scene}},\n    {name: 'color', binding: {type: RFUNCT_T,\n                              value: color}},\n    // constants\n    {name: 'true', binding: {type: RBOOL_T,\n                             value: true}},\n    {name: 'false', binding: {type: RBOOL_T,\n                              value: false}},\n    {name: 'null', binding: {type: RLIST_T,\n                             value: null}},\n    {name: 'empty', binding: {type: RLIST_T,\n                              value: null}},\n];\n\n// String -> {prog: Program, rest: String}\n// parses all expressions except quoted expressions\nfunction parse(text) {\n    if (numRE.test(text)) {\n        let matches = text.match(numRE);\n        let numStr = matches[0];\n        let rest = text.slice(numStr.length).trim();\n        let num = {value: +numStr, type: RNUM_T};\n\n        return {prog: num, rest: rest};\n    } else if (varRE.test(text)) {\n        let matches = text.match(varRE);\n        let name = matches[0];\n        let rest = text.slice(name.length).trim();\n        let variable = {value: name, type: RVAR_T};\n\n        return {prog: variable, rest: rest};\n\n\n    } else if (boolRE.test(text)) {\n        let matches = text.match(boolRE);\n        let boolStr = matches[0];\n        let rest = text.slice(boolStr.length).trim();\n        let bool = {value: boolStr[1].toLowerCase() === 't', type: RBOOL_T};\n\n        return {prog: bool, rest: rest};\n\n    } else if (strRE.test(text)) {\n        let matches = text.match(strRE);\n        let value = matches[0].substring(1, matches[0].length - 1); // trim off quotes\n        let str = {value: value, type: RSTRING_T};\n        let rest = text.slice(matches[0].length).trim();\n\n        return {prog: str, rest: rest};\n\n    } else if (appRE.test(text)) {\n        text = text.slice(1).trim(); // remove open paren\n        let parseFunct = parse(text); // parse function\n        let funct = parseFunct.prog; // get function\n        text = parseFunct.rest; // get past function\n        let args = [];\n\n        while (text[0] !== ')') {\n            let parseArg = parse(text);\n            args = [...args, parseArg.prog];\n            text = parseArg.rest;\n        }\n\n        let app;\n\tif (funct.value === 'or') {\n\t    if (args.length == 2) {\n\t\tapp = {value: {tst: args[0], els: args[1], thn: {value : true, type : RBOOL_T} }, type: RIF_T};\n\t    }\n\t    else if (args.length < 2) {\n\t\tthrow new SyntaxError('Invalid Syntax: \"' + text + '\"');\n\t    }\n\t    else {\n\t\t// should have a loop here\n\t\tthrow new SyntaxError('Invalid Syntax: \"' + text + '\"');\n\t    }\n\t}\n\telse if (funct.value === 'and') {\n\t    if (args.length == 2) {\n\t\tapp = {value: {tst: args[0], thn: args[1], els: {value : false, type : RBOOL_T} }, type: RIF_T};\n\t    }\n\t    else if (args.length < 2) {\n\t\tthrow new SyntaxError('Invalid Syntax: \"' + text + '\"');\n\t    }\n\t    else {\n\t\t// should have a loop here\n\t\tthrow new SyntaxError('Invalid Syntax: \"' + text + '\"');\n\t    }\n\t}\n\telse if (funct.value === 'if') {\n\t    if (args.length === 3) {\n\t\tapp = {value: {tst: args[0], thn: args[1], els: args[2]}, type: RIF_T};\n\t    }\n\t    else {\n\t\tthrow new SyntaxError('Invalid Syntax: \"' + text + '\"');\n\t    }\n\t} else {\t\n\t    app = {value: {funct: funct, args: args}, type: RAPP_T};\n\t}\n        let rest = text.slice(1).trim(); // remove close paren\n\n        return {prog: app, rest: rest};\n\n    } else if (quoteRE.test(text)) {\n        return parseQ(text.slice(1).trim());\n    }\n\n    throw new SyntaxError('Invalid Syntax: \"' + text + '\"');\n}\n\n// String -> {prog: Program, rest: String}\n// parses quoted expressions\nfunction parseQ(text) {\n    if (listRE.test(text)) {\n        text = text.slice(1).trim(); // remove quote, open paren\n        let listArr = [];\n\n        while (text[0] !== ')') {\n            let cur = parseQ(text);\n            listArr = [cur.prog, ...listArr]; // listArr is constructed backwards\n            text = cur.rest;\n        }\n\n        let rest = text.slice(1).trim();\n        let prog = listArr.reduce((acc, cur) => ({value: {a: cur, d: acc}, type: RLIST_T}), {value: null, type: RLIST_T}); // turn listArr into an Rlist\n\n        return {prog: prog, rest: rest};\n\n    } else if (numRE.test(text)) {\n        let matches = text.match(numRE);\n        let numStr = matches[0];\n        let rest = text.slice(numStr.length).trim();\n        let num = {value: +numStr, type: RNUM_T};\n\n        return {prog: num, rest: rest};\n\n    } else if (boolRE.test(text)) {\n        let matches = text.match(boolRE);\n        let boolStr = matches[0];\n        let rest = text.slice(boolStr.length).trim();\n        let bool = {value: boolStr.charAt(1).toLowerCase() === 't', type: RBOOL_T};\n\n        return {prog: bool, rest: rest};\n\n    } else if (strRE.test(text)) {\n        let matches = text.match(strRE);\n        let value = matches[0].substring(1, matches[0].length - 1); // trim off quotes\n        let str = {value: value, type: RSTRING_T};\n        let rest = text.slice(matches[0].length).trim();\n\n        return {prog: str, rest: rest};\n\n    } else if (symRE.test(text)) {\n        let matches = text.match(symRE);\n        let value = matches[0];\n        let sym = {value: value, type: RSYM_T};\n        let rest = text.slice(matches[0].length).trim();\n\n        return {prog: sym, rest: rest};\n    }\n\n    throw new SyntaxError('Invalid Syntax: \"' + text + '\"');\n}\n\n/***\n    Environment: [Variable]\n    Variable:    {name:    String,\n                  binding: Program}\n***/\n\n// Program -> Environment -> Program\nfunction interp(prog, env) {\n    function lookup(name) {\n        let val = env.reduce((acc, variable) => {\n            if (acc !== undefined) {\n                return acc;\n            }\n\n            return variable.name === name ? variable.binding : undefined;\n        }, undefined);\n\n        if (val === undefined){\n            throw new ReferenceError(name + ' isn\\'t defined');\n        }\n\n        return val;\n    }\n\n    switch(prog.type) {\n    case RNUM_T:\n        return prog;\n    case RBOOL_T:\n        return prog;\n    case RSTRING_T:\n        return prog;\n    case RLIST_T:\n        return prog;\n    case RSYM_T:\n        return prog;\n    case RVAR_T:\n        return lookup(prog.value);\n    case RFUNCT_T:\n        return prog;\n    case RIF_T:\n        let tst = interp(prog.value.tst, env);\n\ttypeCheck(tst, [RBOOL_T]);\n\n\tif (tst.value) {\n\t    return interp(prog.value.thn, env);\n\t}\n\telse {\n\t    return interp(prog.value.els, env);\n\t}\n\t\n    case RAPP_T:\n        // interpret function (valof rator env)\n        let funct = interp(prog.value.funct, env);\n\n        // interpret arguments (valof rand env)\n        let args = prog.value.args.map((arg) => interp(arg, env));\n\n        typeCheck(funct, [RFUNCT_T]);\n\n        return funct.value(args);\n    case RIMAGE_T:\n        return prog;\n    case RCOLOR_T:\n        return prog;\n\n    default:\n        console.log(prog);\n        throw new TypeError(\"Unknown Type \" + prog.value);\n    }\n}\n\n// Program -> String\nfunction toString_cons(prog) {\n    switch (prog.type) {\n    case RNUM_T:\n        return prog.value;\n    case RBOOL_T:\n        return '#' + prog.value;\n    case RSTRING_T:\n        return `\"${prog.value}\"`;\n    case RLIST_T:\n        if (prog.value === null) {\n            return '\\'()';\n        } else {\n            return `(cons ${toString_cons(prog.value.a)} ${toString_cons(prog.value.d)})`;\n        }\n    case RSYM_T:\n        return \"'\" + prog.value;\n    case RVAR_T:\n        return prog.value;\n    case RFUNCT_T:\n        return '#<procedure>';\n    case RAPP_T:\n        return `(${toString_cons(prog.value.funct)} ${prog.value.args.map(toString_cons).join(' ')})`;\n    case RIMAGE_T:\n        return '#<image>';\n    case RCOLOR_T:\n        return '#<color>';\n    default:\n        return 'error or something';\n    }\n}\n\n// Program -> String\nfunction toString_list (prog) {\n    switch (prog.type) {\n    case RNUM_T:\n        return prog.value;\n    case RBOOL_T:\n        return '#' + prog.value;\n    case RSTRING_T:\n        return `\"${prog.value}\"`;\n    case RLIST_T:\n        let elems = '';\n        while (prog.value !== null) {\n            elems += ' ' + toString_list(prog.value.a);\n            prog = prog.value.d;\n        }\n        return `(list${elems})`;\n    case RSYM_T:\n        return \"'\" + prog.value;\n    case RVAR_T:\n        return prog.value;\n    case RFUNCT_T:\n        return '#<procedure>';\n    case RAPP_T:\n        return `(${toString_cons(prog.value.funct)} ${prog.value.args.map(toString_cons).join(' ')})`;\n    case RIMAGE_T:\n        return '#<image>';\n    case RCOLOR_T:\n        return '#<color>';\n    default:\n        return 'error or something';\n    }\n}\n\n// Program -> [(String or SVG)]\nfunction unparse_cons(prog) {\n    switch (prog.type) {\n    case RNUM_T:\n        return [prog.value];\n    case RBOOL_T:\n        return ['#' + prog.value];\n    case RSTRING_T:\n        return [`\"${prog.value}\"`];\n    case RLIST_T:\n        if (prog.value === null) {\n            return ['\\'()'];\n        } else {\n            return ['(cons ', ...unparse_cons(prog.value.a), ' ', ...unparse_cons(prog.value.d), ')'];\n        }\n    case RSYM_T:\n        return [\"'\" + prog.value];\n    case RVAR_T:\n        return [prog.value];\n    case RFUNCT_T:\n        return ['#<procedure>'];\n    case RAPP_T:\n        return ['(', ...unparse_cons(prog.value.funct), ' ', ...prog.value.args.map(unparse_cons).flat(), ')'];\n    case RIMAGE_T:\n        return [paint(prog.value)];\n    case RCOLOR_T:\n        return ['#<color>'];\n    default:\n        return 'error or something';\n    }\n}\n\n// Program -> [(String or SVG)]\nfunction unparse_list (prog) {\n    switch (prog.type) {\n    case RNUM_T:\n        return [prog.value];\n    case RBOOL_T:\n        return ['#' + prog.value];\n    case RSTRING_T:\n        return [`\"${prog.value}\"`];\n    case RLIST_T:\n        // special case for empty list\n        if (prog.value === null) {\n            return ['\\'()'];\n        }\n\n        let elems = [];\n        while (prog.value !== null) {\n            elems = [...elems, ' ', ...unparse_list(prog.value.a)];\n            prog = prog.value.d;\n        }\n\n        return ['(list', ...elems, ')'];\n    case RSYM_T:\n        return [\"'\" + prog.value];\n    case RVAR_T:\n        return [prog.value];\n    case RFUNCT_T:\n        return ['#<procedure>'];\n    case RAPP_T:\n        return ['(', ...unparse_cons(prog.value.funct), ...prog.value.args.map(unparse_cons).flat(), ')'];\n    case RIMAGE_T:\n        return [paint(prog.value)];\n    case RCOLOR_T:\n        return ['#<color>'];\n    default:\n        return 'error or something';\n    }\n}\n\n// String -> Program\n// parses text and checks for syntax errors based on what's returned\nfunction parseCheck(text) {\n    let parsed = parse(text);\n\n    switch (parsed.rest) {\n    case '':\n        break;\n    default:\n        throw new SyntaxError('Parsing Error');\n    }\n\n    return parsed.prog;\n}\n\n// Program -> [Number] -> Error Maybe\n// checks if prog is of one of the types in types\nfunction typeCheck(prog, types) {\n    // Number -> String\n    function getType(type) {\n        switch (type) {\n        case RVAR_T:\n            return 'variable';\n        case RAPP_T:\n            return 'application';\n        case RFUNCT_T:\n            return 'function';\n        case RNUM_T:\n            return 'number';\n        case RBOOL_T:\n            return 'boolean';\n        case RSTRING_T:\n            return 'string';\n        case RLIST_T:\n            return 'list';\n        case RSYM_T:\n            return 'symbol';\n        case RIMAGE_T:\n            return 'image';\n        case RCOLOR_T:\n            return 'color';\n        default:\n            return '???';\n        }\n    }\n\n    if (!types.includes(prog.type)) {\n        let typesString = types.map(getType).reduce((acc, type) => acc + ` or a ${type}`);\n        throw new TypeError(toString_cons(prog) + ' ain\\'t a ' + typesString);\n    }\n}\n\nfunction plus(args) {\n    if (args.length < 2) {\n        throw new Error('arity mismatch');\n    }\n\n    args.forEach((arg) => typeCheck(arg, [RNUM_T]));\n\n    return args.reduce((acc, arg) => (\n        {value: acc.value + arg.value,\n         type: RNUM_T}\n    ));\n}\nfunction add1(args) {\n    if (args.length !== 1) {\n        throw new Error('arity mismatch');\n    }\n\n    typeCheck(args[0], [RNUM_T]);\n\n    return {value: args[0].value + 1,\n            type: RNUM_T};\n}\nfunction minus(args) {\n    if (args.length < 1) {\n        throw new Error('arity mismatch');\n    }\n\n    args.forEach((arg) => typeCheck(arg, [RNUM_T]));\n\n    if (args.length === 1) {\n        return {value: 0 - args[0].value,\n                type: RNUM_T};\n    }\n\n    return args.reduce((acc, arg) => (\n        {value: acc.value - arg.value,\n         type: RNUM_T}\n    ));\n}\nfunction sub1(args) {\n    if (args.length !== 1) {\n        throw new Error('arity mismatch');\n    }\n\n    typeCheck(args[0], [RNUM_T]);\n\n    return {value: args[0].value - 1,\n            type: RNUM_T};\n}\nfunction times(args) {\n    if (args.length < 2) {\n        throw new Error('arity mismatch');\n    }\n\n    args.forEach((arg) => typeCheck(arg, [RNUM_T]));\n\n    return args.reduce((acc, arg) => (\n        {value: acc.value * arg.value,\n         type: RNUM_T}\n    ));\n}\nfunction divide(args) {\n    args.forEach((arg) => typeCheck(arg, [RNUM_T]));\n\n    if (args.length === 1) {\n        let firstArg = args[0];\n\n        typeCheck(firstArg, [RNUM_T]);\n\n        return {value: 1 / firstArg.value,\n                type: RNUM_T};\n    } else if (args.length === 2) {\n        let firstArg = args[0];\n        let secondArg = args[1];\n\n        typeCheck(firstArg, [RNUM_T]);\n        typeCheck(secondArg, [RNUM_T]);\n\n        return {value: firstArg.value / secondArg.value,\n                type: RNUM_T};\n    }\n\n    return {value: false, type: RBOOL_T};\n}\nfunction car(args) {\n    if (args.length !== 1) {\n        throw new Error('arity mismatch');\n    }\n\n    let firstArg = args[0];\n\n    typeCheck(firstArg, [RLIST_T]);\n\n    if (firstArg.value === null) {\n        throw new Error('expected a cons, but given empty list');\n    }\n\n    return firstArg.value.a;\n}\nfunction cdr(args) {\n    if (args.length !== 1) {\n        throw new Error('arity mismatch');\n    }\n\n    let firstArg = args[0];\n\n    if (firstArg.value === null) {\n        throw new Error('expected a cons, but given empty list');\n    }\n\n    typeCheck(firstArg, [RLIST_T]);\n\n    return firstArg.value.d;\n}\nfunction cons(args) {\n    if (args.length !== 2) {\n        throw new Error('arity mismatch');\n    }\n\n    let firstArg = args[0];\n    let secondArg = args[1];\n\n    // because BSL\n    typeCheck(secondArg, [RLIST_T]);\n\n    return {value: {a: firstArg, d: secondArg},\n            type: RLIST_T};\n}\nfunction list(args) {\n    // this indentation is pretty jank\n    return args.reverse().reduce((acc, arg) => (\n        {value: {a: arg, d: acc},\n         type: RLIST_T}),\n                                 {value: null,\n                                  type: RLIST_T});\n}\nfunction not(args) {\n    if (args.length !== 1) {\n        throw new Error('arity mismatch');\n    }\n\n    let firstArg = args[0];\n\n    return {value: firstArg.value === false,\n            type: RBOOL_T};\n}\nfunction iseqv(args) {\n    if (args.length !== 2) {\n        throw new Error('arity mismatch');\n    }\n\n    let firstArg = args[0];\n    let secondArg = args[1];\n\n    return {value: firstArg.value === secondArg.value,\n            type: RBOOL_T};\n}\nfunction and(args) {\n    return args.reduce((acc, cur) => {\n        return acc.value !== false ? cur : {value: false, type: RBOOL_T};\n    }, {value: true, type: RBOOL_T});\n\n} function or(args) {return args.reduce((acc, cur) => {\n        return acc.value !== false ? acc : cur;\n    }, {value: true, type: RBOOL_T});\n\n}\nfunction isnull(args) {\n    if (args.length !== 1) {\n        throw new Error('arity mismatch');\n    }\n\n    let firstArg = args[0];\n\n    return {value: firstArg.value === null && firstArg.type === RLIST_T,\n            type: RBOOL_T};\n}\nfunction iscons(args) {\n    if (args.length !== 1) {\n        throw new Error('arity mismatch');\n    }\n\n    let firstArg = args[0];\n\n    return {value: firstArg.value !== null && firstArg.type === RLIST_T,\n            type: RBOOL_T};\n}\nfunction equalsign(args) {\n    args.forEach((cur) => typeCheck(cur, [RNUM_T]));\n\n    let val = args.reduce((acc, cur) => {\n\n        if (acc.value === false) {\n            return {value: false, type: RBOOL_T};\n        }\n\n        return acc.value===cur.value ? acc : {value: false, type: RBOOL_T};\n    });\n\n    if (val.value === false){\n        return val;\n    } else {\n        return {value: true, type: RBOOL_T};\n    }\n}\nfunction gtsign(args) {\n    args.forEach((cur) => typeCheck(cur, [RNUM_T]));\n\n    let val = args.reduce((acc, cur) => {\n\n        if (acc.value === false) {\n            return {value: false, type: RBOOL_T};\n        }\n\n        return acc.value > cur.value ? acc : {value: false, type: RBOOL_T};\n    });\n\n    if (val.value === false){\n        return val;\n    } else {\n        return {value: true, type: RBOOL_T};\n    }\n}\nfunction gesign(args) {\n    args.forEach((cur) => typeCheck(cur, [RNUM_T]));\n\n    let val = args.reduce((acc, cur) => {\n\n        if (acc.value === false) {\n            return {value: false, type: RBOOL_T};\n        }\n\n        return acc.value >= cur.value ? acc : {value: false, type: RBOOL_T};\n    });\n\n    if (val.value === false){\n        return val;\n    } else {\n        return {value: true, type: RBOOL_T};\n    }\n}\nfunction ltsign(args) {\n    args.forEach((cur) => typeCheck(cur, [RNUM_T]));\n\n    let val = args.reduce((acc, cur) => {\n\n        if (acc.value === false) {\n            return {value: false, type: RBOOL_T};\n        }\n\n        return acc.value < cur.value ? acc : {value: false, type: RBOOL_T};\n    });\n\n    if (val.value === false){\n        return val;\n    } else {\n        return {value: true, type: RBOOL_T};\n    }\n}\nfunction lesign(args) {\n    args.forEach((cur) => typeCheck(cur, [RNUM_T]));\n\n    let val = args.reduce((acc, cur) => {\n\n        if (acc.value === false) {\n            return {value: false, type: RBOOL_T};\n        }\n\n        return acc.value <= cur.value ? acc : {value: false, type: RBOOL_T};\n    });\n\n    if (val.value === false){\n        return val;\n    } else {\n        return {value: true, type: RBOOL_T};\n    }\n}\nfunction isstrequal(args) {\n    args.forEach((arg) => typeCheck(arg, [RSTRING_T]));\n\n    let value = args.map((arg) => arg.value).reduce((acc, val) => {\n\n        if (acc === false) {\n            return false;\n        }\n\n        return acc === val ? acc : false;\n    });\n\n    if (value !== false) {\n        return {value: true, type: RBOOL_T};\n    } else {\n        return {value, type: RBOOL_T};\n    }\n}\nfunction stringLength(args) {\n    if (args.length !== 1) {\n        throw new Error('arity mismatch');\n    }\n\n    let firstArg = args[0];\n\n    typeCheck(firstArg, [RSTRING_T]);\n\n    return {value: firstArg.value.length,\n            type: RNUM_T};\n}\nfunction stringAppend(args) {\n    if (args.length < 2) {\n        throw new Error('arity mismatch');\n    }\n\n    args.forEach((arg) => typeCheck(arg, [RSTRING_T]));\n\n    return args.reduce((acc, arg) => (\n        {value: acc.value + arg.value,\n         type: RSTRING_T}\n    ));\n}\nfunction circle(args) {\n    if (args.length < 3) {\n        throw new Error('arity mismatch');\n    }\n\n    let firstArg = args[0];\n    let secondArg = args[1];\n    let thirdArg = args[2];\n    \n    typeCheck(firstArg, [RNUM_T]);\n    typeCheck(secondArg, [RNUM_T, RSTRING_T, RSYM_T]);\n    typeCheck(thirdArg, [RSTRING_T, RSYM_T, RCOLOR_T]);\n\n    let value = makeCircle(firstArg.value, secondArg.value, thirdArg.value);\n\n    return {value, type: RIMAGE_T};\n}\nfunction rectangle(args) {\n    if (args.length < 4) {\n        throw new Error('arity mismatch');\n    }\n\n    let firstArg = args[0];\n    let secondArg = args[1];\n    let thirdArg = args[2];\n    let fourthArg = args[3];\n\n    typeCheck(firstArg, [RNUM_T]);\n    typeCheck(secondArg, [RNUM_T]);\n    typeCheck(thirdArg, [RNUM_T, RSTRING_T, RSYM_T]);\n    typeCheck(fourthArg, [RSTRING_T, RSYM_T, RCOLOR_T]);\n\n    let value = makeRectangle(firstArg.value, secondArg.value, thirdArg.value, fourthArg.value);\n\n    return {value, type: RIMAGE_T};\n}\nfunction square(args) {\n    if (args.length < 3) {\n        throw new Error('arity mismatch');\n    }\n\n    let firstArg = args[0];\n    let secondArg = args[1];\n    let thirdArg = args[2];\n\n    typeCheck(firstArg, [RNUM_T]);\n    typeCheck(secondArg, [RNUM_T, RSTRING_T, RSYM_T]);\n    typeCheck(thirdArg, [RSTRING_T, RSYM_T, RCOLOR_T]);\n\n    let value = makeRectangle(firstArg.value, firstArg.value, secondArg.value, thirdArg.value);\n\n    return {value, type: RIMAGE_T};\n}\nfunction triangle(args) {\n    if (args.length < 3) {\n        throw new Error('arity mismatch');\n    }\n\n    let firstArg = args[0];\n    let secondArg = args[1];\n    let thirdArg = args[2];\n    \n    typeCheck(firstArg, [RNUM_T]);\n    typeCheck(secondArg, [RNUM_T, RSTRING_T, RSYM_T]);\n    typeCheck(thirdArg, [RSTRING_T, RSYM_T, RCOLOR_T]);\n\n    let value = makeEquiTriangle(firstArg.value, secondArg.value, thirdArg.value);\n\n    return {value, type: RIMAGE_T};\n}\nfunction beside(args) {\n    if (args.length < 2) {\n        throw new Error('arity mismatch');\n    }\n\n    args.forEach((arg) => typeCheck(arg, [RIMAGE_T]));\n\n    let value = makeBeside(args.map((arg) => arg.value));\n\n    return {value, type: RIMAGE_T};\n}\nfunction besideAlign(args) {\n    if (args.length < 3) {\n        throw new Error('arity mismatch');\n    }\n\n    let firstArg = args[0];\n    let restArgs = args.slice(1);\n\n    typeCheck(firstArg, [RSTRING_T, RSYM_T]);\n    restArgs.forEach((arg) => typeCheck(arg, [RIMAGE_T]));\n\n    let value = makeBeside(restArgs.map((arg) => arg.value), firstArg.value);\n\n    return {value, type: RIMAGE_T};\n}\nfunction above(args) {\n    if (args.length < 2) {\n        throw new Error('arity mismatch');\n    }\n\n    args.forEach((arg) => typeCheck(arg, [RIMAGE_T]));\n\n    let value = makeAbove(args.map((arg) => arg.value));\n\n    return {value, type: RIMAGE_T};\n}\nfunction aboveAlign(args) {\n    if (args.length < 3) {\n        throw new Error('arity mismatch');\n    }\n\n    let firstArg = args[0];\n    let restArgs = args.slice(1);\n\n    typeCheck(firstArg, [RSTRING_T, RSYM_T]);\n    restArgs.forEach((arg) => typeCheck(arg, [RIMAGE_T]));\n\n    let value = makeAbove(restArgs.map((arg) => arg.value), firstArg.value);\n\n    return {value, type: RIMAGE_T};\n}\nfunction overlay(args) {\n    if (args.length < 2) {\n        throw new Error('arity mismatch');\n    }\n\n    args.forEach((arg) => typeCheck(arg, [RIMAGE_T]));\n\n    let value = makeOverlay(args.map((arg) => arg.value));\n\n    return {value, type: RIMAGE_T};\n}\nfunction overlayAlign(args) {\n    if (args.length < 4) {\n        throw new Error('arity mismatch');\n    }\n\n    let firstArg = args[0];\n    let secondArg = args[1];\n    let restArgs = args.slice(2);\n\n    typeCheck(firstArg, [RSTRING_T, RSYM_T]);\n    typeCheck(secondArg, [RSTRING_T, RSYM_T]);\n    restArgs.forEach((arg) => typeCheck(arg, [RIMAGE_T]));\n\n    let value = makeOverlay(restArgs.map((arg) => arg.value), firstArg.value, secondArg.value);\n\n    return {value, type: RIMAGE_T};\n}\nfunction placeImage(args) {\n    if (args.length < 4) {\n        throw new Error('arity mismatch');\n    }\n\n    let img = args[0];\n    let x = args[1];\n    let y = args[2];\n    let scene = args[3];\n\n    typeCheck(img, [RIMAGE_T]);\n    typeCheck(x, [RNUM_T]);\n    typeCheck(y, [RNUM_T]);\n    typeCheck(scene, [RIMAGE_T]);\n\n    let value = makePlace(img.value, x.value, y.value, scene.value);\n\n    return {value, type: RIMAGE_T};\n}\nfunction empty_Scene(args) {\n    if (args.length < 2) {\n        throw new Error('arity mismatch');\n    }\n\n    let firstArg = args[0];\n    let secondArg = args[1];\n    let thirdArg = args[2];\n\n    typeCheck(firstArg, [RNUM_T]);\n    typeCheck(secondArg, [RNUM_T]);\n\n    let value;\n    if (thirdArg !== undefined) {\n        typeCheck(thirdArg, [RCOLOR_T, RSTRING_T, RSYM_T]);\n        value = emptyScene(firstArg.value, secondArg.value, thirdArg.value);\n    } else {\n        value = emptyScene(firstArg.value, secondArg.value);\n    }\n\n    return {value, type: RIMAGE_T};\n}\nfunction color(args) {\n    if (args.length < 3) {\n        throw new Error('arity mismatch');\n    }\n\n    let firstArg = args[0];\n    let secondArg = args[1];\n    let thirdArg = args[2];\n    let fourthArg = args[3];\n    \n    typeCheck(firstArg, [RNUM_T]);\n    typeCheck(secondArg, [RNUM_T]);\n    typeCheck(thirdArg, [RNUM_T]);\n\n    let value;\n    if (fourthArg !== undefined) {\n        typeCheck(fourthArg, [RNUM_T]);\n        value = makeColor(firstArg.value, secondArg.value, thirdArg.value, fourthArg.value);\n    } else {\n        value = makeColor(firstArg.value, secondArg.value, thirdArg.value);\n    }\n\n    return {value, type: RCOLOR_T};\n}\n\nexport {interp, parseCheck, initEnv,\n        RVAR_T, RAPP_T, RFUNCT_T, RNUM_T, RBOOL_T, RSTRING_T, RLIST_T, RSYM_T, RIMAGE_T, RCOLOR_T,\n        unparse_cons, unparse_list, toString_cons, toString_list,\n        varRE};\n","import {RBOOL_T} from './interpreter.js';\n\n/************\n    Colors\n************/\n\n// value to put in child formulas that don't have an output for that row\nexport const gray = {gray: 'gray'};\n// value to put in child formulas that have an error output for that row (non-boolean and non-gray)\nexport const pink = {pink: 'pink'};\n// value that indicates an uninitialized input\nexport const yellow = {yellow: 'yellow'};\n\n/*********************\n   Functions I Want\n*********************/\n// [Program] -> Boolean\n// returns true if progs has at least one member and all of its members are boooleans\n//    otherwise returns false\nexport function allBools(progs){\n    if (progs.length === 0 || progs.every((prog) => prog === gray)) {\n        return false;\n    }\n\n    return progs.every((prog) => prog.type === RBOOL_T || prog === gray);\n}\n\nexport function isBooleanFormula(formula) {\n    return allBools(formula.outputs) || formula.thenChildren !== undefined;\n}\n\n","import {yellow, isBooleanFormula} from './header.js';\nimport {RVAR_T, RAPP_T, RFUNCT_T, RNUM_T, RBOOL_T, RSTRING_T, RLIST_T, RSYM_T} from './interpreter.js';\n\n/*********************\n    Pretty Printer\n*********************/\n\n/***\n    Data Definitions\n\n    a DOC is one of\n    - NIL\n    - TEXT\n    - LINE\n\n    A NIL is\n    () => {type: 'NIL'}\n\n    A TEXT is\n    () => {type: 'TEXT',\n    text: String,\n    rest: DOC}\n\n    A LINE is\n    () => {type: 'LINE',\n    indent: Integer,\n    rest: DOC}\n\n    A Doc is one of\n    - Nil\n    - Concat\n    - Nest\n    - Text\n    - Line\n    - Union\n\n    A Nil is\n    {type: 'nil'}\n    A Nest is\n    {type:   'nest',\n    indent: Integer,\n    rest:   Doc}\n\n    A Text is\n    {type: 'text',\n    text: String}\n\n    A Line is\n    {type: 'line'}\n\n    A Concat is\n    {type: 'concat',\n    left: Doc,\n    right: () => Doc}\n\n    A Union is\n    {type:  'union',\n    left:  Doc,\n    right: () => Doc}\n\n    A Pair is\n    {doc:    Doc,\n    indent: Integer}\n***/\n\n// DOC\nconst NIL = () => ({type: 'NIL'});\n\n// Doc\nconst nil = {type: 'nil'};\n\n// String -> Doc\nfunction text (string) {\n    if (string === '') {\n        return nil;\n    } else {\n        return {type: 'text', text: String(string)};\n    }\n}\n\n// Doc\nconst line = {type: 'line'};\n\n// Doc, () => Doc -> Doc\nfunction union (docL, docR) {\n    if (typeof docR !== 'function') {\n        throw new Error(\"docR isn't a thunk\");\n    }\n    return {type: 'union', left: docL, right: docR};\n}\n\n// Doc, () => Doc -> Doc\nfunction concat (docL, docR) {\n    if (typeof docR !== 'function') {\n        throw new Error(\"docR isn't a thunk\");\n    }\n    if (typeof docL === 'function') {\n        throw new Error('oh shit, docL is a function!')\n    }\n    // switch(docR.type) {\n    // case 'union':\n    //     return union(concat(docL, docR.left), concat(docL, docR.right));\n    // default:\n    //     break;\n    // }\n    switch (docL.type) {\n        case 'nil':\n            return docR();\n        case 'concat':\n            return {type: 'concat', left: docL.left, right: () => concat(docL.right(), docR)};\n        case 'union':\n            return union(concat(docL.left, docR), () => concat(docL.right(), docR));\n        default:\n            return {type: 'concat', left: docL, right: docR};\n    }\n}\n\n// Integer -> Doc\nfunction nest (i, doc) {\n    switch (doc.type) {\n        case 'nil':\n            return nil;\n        case 'concat':\n            return concat(nest(i, doc.left), () => nest(i, doc.right()));\n        case 'nest':\n            return {type: 'nest', indent: doc.indent + i, rest: doc.rest};\n        case 'text':\n            return doc;\n        case 'line':\n            return {type: 'nest', indent: i, rest: doc};\n        case 'union':\n            return union(nest(i, doc.left), () => nest(i, doc.right()));\n        default:\n            throw Error(`unnexpected document type: ${doc.type}`);\n    }\n}\n\n// DOC -> String\nfunction layout (thunk) {\n\n    let doc = thunk();\n\n    switch (doc.type) {\n        case 'NIL':\n            return '';\n        case 'TEXT':\n            return doc.text + layout(doc.rest);\n        case 'LINE':\n            return '\\n' + ' '.repeat(doc.indent) + layout(doc.rest);\n        default:\n            throw Error(`unnexpected DOCUMENT type: ${doc.type}`);\n    }\n}\n\n// Doc -> Doc\nfunction group (doc) {\n    return union(flatten(doc), () => doc);\n}\n\n// Doc -> Doc\nfunction flatten (doc) {\n    switch (doc.type) {\n        case 'nil':\n            return nil;\n        case 'concat':\n            return concat(flatten(doc.left), () => flatten(doc.right()));\n        case 'nest':\n            return flatten(doc.rest);\n        case 'text':\n            return doc;\n        case 'line':\n            return text(' ');\n        case 'union':\n            return flatten(doc.left);\n        default:\n            throw Error(`unnexpected document type: ${doc.type}`);\n    }\n}\n\n// Integer, Integer -> (Doc -> String)\nfunction makePretty (width, ribbon) {\n\n    // Integer, Integer, Doc -> DOC\n    function best (thisRibbon, current, doc) {\n        return be(thisRibbon, current, [{indent: 0, doc: doc}]);\n    }\n\n    // DOC -> DOC\n    function memoize(thunk) {\n        let seen = false;\n        let value;\n\n        return () => {\n            if (seen) {\n                return value;\n            } else {\n                seen = true;\n                value = thunk();\n                return value;\n            }\n        };\n    }\n\n    // Integer, Integer, [Pair] -> DOC\n    function be (r, k, pairs) {\n        if (pairs.length === 0) {\n            return NIL;\n        }\n\n        let doc = pairs[0].doc;\n        let indent = pairs[0].indent;\n        let rest = pairs.slice(1);\n\n        switch (doc.type) {\n            case 'nil':\n                return be(r, k, rest);\n            case 'concat':\n                return be(r, k, [{indent, doc: doc.left}, {indent, doc: doc.right()}, ...rest]);\n            case 'nest':\n                return be(r, k, [{indent: indent + doc.indent, doc: doc.rest}, ...rest]);\n            case 'text':\n                if (doc.text === '') {\n                    return NIL;\n                } else {\n                    return memoize(() => ({type: 'TEXT', text: doc.text, rest: memoize(() => (be(r, k + doc.text.length, rest)()))}));\n                }\n            case 'line':\n                return memoize(() => ({type: 'LINE', indent: indent, rest: memoize(() => (be(r + indent, indent, rest)()))}));\n            case 'union':\n                return better(r, k, be(r, k, [{indent, doc: doc.left}, ...rest]),\n                                    memoize(() => (be(r, k, [{indent, doc: doc.right()}, ...rest])())));\n            default:\n                console.log(doc());\n                throw Error(`unnexpected document type: ${doc.type}`);\n        }\n    }\n\n    // Integer, Integer, Integer, DOC, DOC -> DOC\n    function better (thisRibbon, current, docL, docR) {\n        if (fits(width - current, thisRibbon - current, docL)) {\n            return docL;\n        } else {\n            return docR;\n        }\n    }\n\n    // Integer, Integer, DOC -> Boolean\n    function fits(diffWidth, diffRibbon, thunk) {\n        if (diffWidth < 0 || diffRibbon < 0) {\n            return false;\n        }\n\n        let doc = thunk();\n\n        switch (doc.type) {\n            case 'NIL':\n                return true;\n            case 'TEXT':\n                return fits(diffWidth - doc.text.length, diffRibbon - doc.text.length, doc.rest);\n            case 'LINE':\n                return true;\n            default:\n                throw Error(`unnexpected DOCUMENT type: ${doc.type}`);\n        }\n    }\n\n    function pretty (doc) {\n        return layout(best(ribbon, 0, doc));\n    }\n\n    return pretty;\n}\n\n/***\n    Utility Functions\n***/\n\n// Doc, Doc -> Doc\nfunction putSpace (docL, docR) {\n    return concat(docL, () => concat(text(' '), () => docR));\n}\n\n// Doc, Doc -> Doc\nfunction putLine (docL, docR) {\n    return concat(docL, () => concat(line, () => docR));\n}\n\n// Doc, Doc -> Doc\nfunction compose (docL, docR) {\n    return concat(docL, () => docR);\n}\n\n// (Doc -> Doc -> Doc), [Doc] -> Doc\nfunction folddoc (f, docs) {\n    if (docs.length === 0) {\n        return nil;\n    } else if (docs.length === 1) {\n        return docs[0];\n    } else {\n        return f(docs[0], folddoc(f, docs.slice(1)));\n    }\n}\n\n// [Doc] -> Doc\n// puts a space between docs\nfunction spread (docs) {\n    return folddoc(putSpace, docs);\n}\n\n// [Doc] -> Doc\n// puts a line between docs\nfunction stack (docs) {\n    return folddoc(putLine, docs);\n}\n\n// [Doc] -> Doc\n// puts docs right next to eachother\nfunction level (docs) {\n    return folddoc(compose, docs);\n}\n\n// String -> Doc -> String -> Doc\n// puts the given document between left and right\nfunction bracket (left, doc, right) {\n    return level([text(left), doc, text(right)]);\n}\n\n/**************************************\n    Thing that Turns Tables Into BSL\n**************************************/\n\n// Program -> Doc\nfunction progToDoc (program) {\n    switch (program.type) {\n        case RVAR_T:\n            return text(program.value);\n        case RAPP_T:\n            return nest(1, bracket('(', group(stack([progToDoc(program.value.funct), ...program.value.args.map(progToDoc)])), ')'));\n        case RFUNCT_T:\n            return text('function');\n        case RNUM_T:\n            return text(program.value);\n        case RBOOL_T:\n            return text('#' + program.value);\n        case RSTRING_T:\n            return text('\"' + program.value + '\"');\n        case RLIST_T: // this just does cons, not list\n            if (program.value === null) {\n                return text(\"'()\");\n            } else {\n                return nest(1, bracket('(', group(stack([text('cons'), progToDoc(program.value.a), progToDoc(program.value.d)])), ')'));\n            }\n        case RSYM_T:\n            return text(\"'\" + program.value);\n        default:\n            throw new Error('unknown program type');\n    }\n}\n\n// Program -> Doc\nfunction progToDoc_list (program) {\n    switch (program.type) {\n        case RVAR_T:\n            return text(program.value);\n        case RAPP_T:\n            return nest(1, bracket('(', group(stack([progToDoc(program.value.funct), ...program.value.args.map(progToDoc)])), ')'));\n        case RFUNCT_T:\n            return text('function');\n        case RNUM_T:\n            return text(program.value);\n        case RBOOL_T:\n            return text('#' + program.value);\n        case RSTRING_T:\n            return text('\"' + program.value + '\"');\n        case RLIST_T:\n            if (program.value === null) {\n                return text(\"'()\");\n            }\n\n            let list = program.value.d,\n                elems = progToDoc_list(program.value.a);\n            while (list.value !== null) {\n                elems = stack([elems, progToDoc_list(list.value.a)]);\n            }\n\n            return bracket('(', spread([text('list'), group(elems)]), ')');\n        case RSYM_T:\n            return text(\"'\" + program.value);\n        default:\n            throw new Error('unknown program type');\n    }\n}\n\n// [Table] -> String\nfunction toBSL(tables, unparse, width, ribbon) {\n    let pretty = makePretty(width, ribbon);\n    let tableBSLs = tables.map((table) => pretty(tableToDoc(table))).join('');\n    return tableBSLs;\n\n    // Table -> Doc\n    function tableToDoc(table) {\n        let name = fieldToDoc(table.name);\n        let sig = fieldToDoc(table.signature);\n        let purp = fieldToDoc(table.purpose);\n        let params = spread(table.params.map((param) => fieldToDoc(param.name)));\n\n        let checkExpects = stack(table.examples.map((example) => {\n            let inputs = stack(example.inputs.map((input) => fieldToDoc(input.prog)));\n            let want = fieldToDoc(example.want);\n\n            return nest(1, bracket('(', group(stack([text('check-expect'), bracket('(', nest(1, stack([name, inputs])), ')'), want])), ')'));\n        }));\n\n        let body = formulasToDoc(table.formulas);\n        let signature = spread([text(';;'), name, text(':'), sig]);\n        let purpose = spread([text(';;'), purp]);\n        let funct = nest(2, bracket('(', spread([text('define'), stack([bracket('(', spread([name, params]), ')'), body])]), ')'));\n        return stack([signature, purpose, funct, nil, checkExpects, line]);\n    }\n\n    // [Formula] -> Doc\n    function formulasToDoc(formulas) {\n        // [Formula] -> {bools: [Formula], nonbools: [Formula]}\n        function splitFormulas(formulas) {\n            let bools = formulas.filter(isBooleanFormula);\n            let nonbools = formulas.filter((formula) => !isBooleanFormula(formula));\n            return {bools, nonbools};\n        }\n\n        let splitForms = splitFormulas(formulas);\n\n        // this one's a doc\n        let nonbools = stack(splitForms.nonbools.map((form) => fieldToDoc(form.prog))),\n            bools;\n\n        if (splitForms.bools.length !== 0) {\n            // this is an array of documents\n            let condRows = splitForms.bools.map((form) => (\n                nest(1, bracket('[', stack([fieldToDoc(form.prog), formulasToDoc(form.thenChildren)]),']'))\n            ));\n            // this one is just a doc\n            bools = nest(2, bracket('(', stack([text('cond'), ...condRows]),')'));\n        }\n\n        if (splitForms.bools.length !== 0 && splitForms.nonbools.length !== 0) {\n            return stack([bools, nonbools]);\n        } else if (splitForms.bools.length !== 0) {\n            return bools;\n        } else if (splitForms.nonbools.length !== 0) {\n            return nonbools;\n        } else {\n            return nil;\n        }\n    }\n\n    // Field (yellow or string or program) -> Doc\n    function fieldToDoc(input) {\n        if (input === yellow) {                 // empty\n            return text('...');\n        } else if (typeof input === 'string') { // name\n            return text(input);\n        } else {                                // program\n            return progToDoc(input);\n        }\n    }\n}\n\n/****************\n    Unparsers\n****************/\nconst widePretty = makePretty(Infinity, Infinity);\n\nexport let unparse_cons = (prog) => widePretty(progToDoc(prog));\nexport let unparse_list = (prog) => widePretty(progToDoc_list(prog));\n\nexport default toBSL;\n","import React from 'react';\nimport ReactDOMServer from 'react-dom/server';\nimport {interp, parseCheck, unparse_cons, toString_cons, toString_list, unparse_list, initEnv, RAPP_T, RFUNCT_T, RLIST_T, RIMAGE_T} from './interpreter.js';\nimport {gray, pink, yellow, allBools, isBooleanFormula} from './header.js';\nimport {paint, width, height, makeRectangle, makeOverlay} from './image.js';\nimport toBSL from './prettyprint.js';\nimport Octicon, {X, Alert, Check} from '@primer/octicons-react';\nimport './App.css';\n\n/*****************************\n  Universal Constants I Want\n*****************************/\n// value to indicate a dry run, i.e. don't actually change the underlying structure, just say\n// if the given value exists or not\nconst dryRun = {yo: 'don\\'t actually change anything'};\n// this one's different because it has a $ at the end so it tests\n// the string until the end\nconst varRE = /^[^\\s\",'`()[\\]{}|;#]+$/; // except numbers\n\n\n/*********************\n    Key Management\n*********************/\n// variable used by takeKey and peekKey to generate keys\nlet keyCount = 0;\n\n// Number\n// returns a unique key\nfunction takeKey() {\n    return keyCount++;\n}\n\n// [Number] -> Number (the brackets here mean optional, not array)\n// returns current key without changing it\n// shoud be used to look at current state of key without actually taking it\n// optionally takes a number as an argument, in which case it returns the key that number\n// of steps ahead of the current key\nfunction peekKey(lookahead = 0) {\n    return keyCount + lookahead;\n}\n\n/**************\n    Globals\n**************/\nlet unparse = unparse_cons;\nlet toString = toString_cons;\nlet showBSL = false;\n\n/*****************\n    Deep Equals\n*****************/\n// Program -> Program -> Boolean\n// checks if two programs are equivalent, recurs on lists and applications\n// may not quite work on functions because I use js functions, not data represented closures or something\n//    thus 2 functions are only equal if they're a reference to the same object\n// maybe move this to interpreter.js?\nfunction deepEquals(proga, progb) {\n    if (proga.type !== progb.type) {\n        return false;\n    }\n\n    if (proga.type === RLIST_T) {\n        if (proga.value === null || progb.value === null) {\n            return proga.value === progb.value;\n        }\n        return deepEquals(proga.value.a, progb.value.a) && deepEquals(proga.value.d, progb.value.d);\n    }\n\n    // this case will prolly never even happen...\n    if (proga.type === RAPP_T) {\n        if (proga.value.args.length !== progb.value.args.length) {\n            return false;\n        }\n        let functCheck = deepEquals(proga.value.funct, progb.value.funct);\n        let argCheck = proga.value.args.map((arga, i) => deepEquals(arga, progb.value.args[i])).every((elem) => elem);\n        return functCheck && argCheck;\n    }\n\n    if (proga.type === RIMAGE_T) {\n        // Image -> Uint8ClampedArray\n        // takes an image and returns an array containing RGBA values of all pixels in the image\n        // a lot of this was taken from https://stackoverflow.com/questions/3768565/drawing-an-svg-file-on-a-html5-canvas\n        // sometimes this doesn't work...\n        //   - when it is first used in a certain instance of the table method, it returns an array containing only zeros,\n        //     however, after this I'm pretty sure it returns the array it should be returning\n        //   - maybe something hasn't been properly initialized by the first time around?\n        function toRGBAArray (image) {\n            let can = document.createElement('canvas');\n            let ctx = can.getContext('2d');\n            let svg = paint(image);\n\n            // pretty much just turns the jsx into a string\n            let xml = ReactDOMServer.renderToString(svg);\n\n            // make the xml base 64 for some reason (I dunno why)\n            let svg64 = btoa(xml);\n            // header that does stuff I guess\n            let b64Start = 'data:image/svg+xml;base64,';\n\n            // prepend a the header to the xml data\n            let image64 = b64Start + svg64;\n\n            // make image that contains the xml data so we can draw it\n            let img = document.createElement('img');\n            img.src = image64;\n\n            // draw the image onto the canvas\n            ctx.drawImage(img, 0, 0);\n\n            return ctx.getImageData(0, 0, width(image), height(image)).data;\n        }\n\n        let imgA = proga.value;\n        let imgB = progb.value\n\n        let dataA_red = toRGBAArray(makeOverlay([imgA, makeRectangle(width(imgA), width(imgA), 'solid', 'red')]));\n        let dataA_green = toRGBAArray(makeOverlay([imgA, makeRectangle(width(imgA), width(imgA), 'solid', 'green')]));\n\n        let dataB_red = toRGBAArray(makeOverlay([imgB, makeRectangle(width(imgB), width(imgB), 'solid', 'red')]));\n        let dataB_green = toRGBAArray(makeOverlay([imgB, makeRectangle(width(imgB), width(imgB), 'solid', 'green')]));\n\n        if (dataA_red.length !== dataB_red.length) { // images have different sizes\n            return false;\n        }\n\n        let redSame = dataA_red.every((datumA_red, i) => datumA_red === dataB_red[i]);\n        let greenSame = dataA_green.every((datumA_green, i) => datumA_green === dataB_green[i]);\n\n        return redSame && greenSame;\n    }\n\n    return proga.value === progb.value;\n}\n\n/*********************\n   React Components\n*********************/\n\n// it's a picture of a colon\nfunction Colon (props) {\n    return (\n        <div className='colon'>:</div>\n    );\n}\n\n/*** Buttons ***/\n// Button that probably removes something\nfunction RemButton(props){\n    return (\n        <div className='remove'\n             onClick={props.onClick}\n             title={props.title}>\n          <Octicon\n            icon={X} size=\"small\" verticalAlign=\"middle\"\n            ariaLabel='Remove'/>\n        </div>\n    );\n}\n\n/*** Inputs ***/\nclass ValidatedInput extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {text: ''};\n\n        this.textChange = this.textChange.bind(this);\n    }\n\n    textChange(e) {\n        let text = e.target.value;\n\n        this.setState((state) => ({text}));\n\n        if (this.props.isValid(text)) {\n            this.props.onValid(text);\n        } else if (text === '' && !this.props.dummy) {\n            this.props.onEmpty();\n        }\n    }\n\n    render() {\n        let className;\n        if (this.props.dummy && this.state.text === '') { // empty dummy\n            className = 'dummy_input';\n        } else if (this.props.isValid(this.state.text)) { // valid\n            className = 'valid_input';\n        } else if (this.state.text === '') { // empty non-dummy\n            className = 'empty_input';\n        } else { // invalid\n            className = 'invalid_input';\n        }\n        \n        let size;\n        if (this.state.text.length === 0)\n            size = this.props.placeholder.length;\n        else\n            size = Math.max(this.state.text.length + 2, 4);\n\n        return (\n            <input\n              className={className}\n              size={size}\n              placeholder={this.props.placeholder}\n              type={'text'}\n              value={this.state.text}\n              onChange={this.textChange}\n            />\n        );\n    }\n}\n\n/*** Table Sections ***/\n// let's put everything in one table woo\nfunction Succinct(props) {\n\n    function tableChange(newTab, oldTab) {\n        const exists = props.tables.indexOf(oldTab) !== -1;\n\n        let alteredTabs;\n        if (exists) {\n            alteredTabs = props.tables.map((table) => table === oldTab ? newTab : table);\n        } else {\n            alteredTabs = [...props.tables, newTab];\n        }\n\n        props.programChange(alteredTabs);\n    }\n\n    function remTable(deadTab) {\n        let aliveTabs = props.tables.filter((table) => table !== deadTab);\n        props.programChange(aliveTabs);\n    }\n\n    // String -> Boolean\n    function validName(text, modTab) {\n        function lookup(name, env) {\n            return env.reduce((acc, variable) => {\n                if (acc) {\n                    return true;\n                }\n\n                return variable.name === name;\n\n            }, false);\n        }\n\n        let tableVars = props.tables.filter((table) => table !== modTab).map((otherTab) => ({name: otherTab.name, binding: null}));\n        let paramVars = modTab.params.map((param) => ({name: param, binding: null}));\n        let env = [...initEnv, ...tableVars, ...paramVars];\n\n        return varRE.test(text) && !lookup(text, env);\n    }\n\n    function validSignature(text, modTab) {\n        let arrows = text.match(/\\s+->\\s+/g);\n\n        if (arrows === null) {\n            return false;\n        }\n\n        return arrows.length === modTab.params.length;\n    }\n\n    const reals = props.tables.map((table) => (\n        <div key={table.key} className='flex_horiz table'>\n          <div className='flex_vert no_grow'>\n            <div className='flex_horiz no_grow'>\n              <ValidatedInput\n                dummy={false}\n                placeholder='Table Name'\n                isValid={(text) => validName(text, table)}\n                onValid={(text) => tableChange({...table,\n                                                name: text},\n                                               table)}\n                onEmpty={() => tableChange({...table,\n                                            name: yellow},\n                                           table)}\n              />\n              <Colon/>\n              <ValidatedInput\n                dummy={false}\n                placeholder='Signature'\n                isValid={(text) => validSignature(text, table)}\n                onValid={(text) => tableChange({...table,\n                                                signature: text},\n                                               table)}\n                onEmpty={() => tableChange({...table,\n                                            signature: yellow},\n                                           table)}\n              />\n              <RemButton\n                onClick={() => remTable(table)}\n                title='Remove this table'\n              />\n            </div>\n            <div className='flex_horiz no_grow'>\n              <ValidatedInput\n                dummy={false}\n                placeholder='Purpose'\n                isValid={(text) => text !== ''}\n                onValid={(text) => tableChange({...table,\n                                                purpose: text},\n                                               table)}\n                onEmpty={() => tableChange({...table,\n                                            purpose: yellow},\n                                           table)}\n              />\n            </div>\n            <SuccinctTab\n              table={table}\n              tableNames={props.tables.map((table) => table.name)}\n              tableChange={(newTab) => tableChange(newTab, table)}\n            />\n          </div>\n          <div className='grow'>{/* div to prevent text fields from stretching across the screen */}</div>\n        </div>\n    ));\n\n    const dummy = (\n        <div key={peekKey()} className='flex_horiz table'>\n          <div className='flex_vert no_grow'>\n            <div className='flex_horiz no_grow'>\n              <ValidatedInput\n                dummy={true}\n                placeholder='Table Name'\n                isValid={(text) => validName(text, {params: []})}\n                onValid={(text) => tableChange({name: text,\n                                                signature: yellow,\n                                                purpose: yellow,\n                                                examples: [],\n                                                formulas: [],\n                                                params: [],\n                                                key: takeKey()},\n                                               {})}\n              />\n              <Colon/>\n              <ValidatedInput\n                dummy={true}\n                placeholder='Signature'\n                isValid={(text) => text !== ''}\n                onValid={(text) => tableChange({name: yellow,\n                                                signature: text,\n                                                purpose: yellow,\n                                                examples: [],\n                                                formulas: [],\n                                                params: [],\n                                                key: takeKey()},\n                                               {})}\n              />\n            </div>\n            <div className='flex_horiz no_grow'>\n              <ValidatedInput\n                dummy={true}\n                placeholder='Purpose'\n                isValid={(text) => text !== ''}\n                onValid={(text) => tableChange({name: yellow,\n                                                signature: yellow,\n                                                purpose: text,\n                                                examples: [],\n                                                formulas: [],\n                                                params: [],\n                                                key: takeKey()},\n                                               {})}\n              />\n            </div>\n            <SuccinctTab\n              table={{name: yellow,\n                      signature: yellow,\n                      purpose: yellow,\n                      examples: [],\n                      formulas: [],\n                      params: [],\n                      key: peekKey()}}\n              tableNames={props.tables.map((table) => table.name)}\n              tableChange={(newTab) => tableChange(newTab, {})}\n            />\n          </div>\n          <div className='grow'>{/* div to prevent text fields from stretching across the screen */}</div>\n        </div>\n    );\n\n    return (\n        <div>\n          {[...reals, dummy]}\n        </div>\n    );\n}\n\nfunction SuccinctTab(props) {\n    function paramsExamplesChange(params, examples) {\n        props.tableChange({...props.table, params, examples});\n    }\n\n    function formulasChange(formulas) {\n        props.tableChange({...props.table, formulas});\n    }\n\n    function examplesFormulasChange(examples, formulas) {\n        props.tableChange({...props.table, examples, formulas});\n    }\n\n    return (\n        <table className={'grow'}>\n          <SuccinctHead\n            params={props.table.params}\n            examples={props.table.examples}\n            tableNames={props.tableNames}\n            paramsExamplesChange={paramsExamplesChange}\n\n            formulas={props.table.formulas}\n            formulasChange={formulasChange}\n          />\n          <SuccinctBody\n            examples={props.table.examples}\n            formulas={props.table.formulas}\n            paramNames={props.table.params.map((param) => param.name)}\n            examplesFormulasChange={examplesFormulasChange}\n            formulasChange={formulasChange}\n          />\n        </table>\n    );\n}\n\nfunction SuccinctHead(props) {\n    // String -> Boolean\n    // checks if the given string is a valid program\n    function validProg(text) {\n        let isgood = true;\n\n        try {\n            parseCheck(text);\n        } catch(e) {\n            if (e instanceof SyntaxError) {\n                isgood = false;\n            } else { // this should never happen\n                throw e;\n            }\n        }\n\n        return isgood;\n    }\n\n    // Formula -> Side Effect\n    // removes a given formula from the tree\n    function remFormula(deadForm) {\n        const aliveForms = props.formulas.filter((formula) => formula !== deadForm);\n        props.formulasChange(aliveForms);\n    }\n\n    // Formula -> Formula -> Side Effect\n    // replaces one formula with another one\n    function formulaChange(newForm, oldForm) {\n\n        let alteredForms;\n        if (props.formulas.indexOf(oldForm) === -1) {\n            alteredForms = [...props.formulas, newForm];\n        } else {\n            alteredForms = props.formulas.map((form) => form === oldForm ? newForm : form);\n        }\n        props.formulasChange(alteredForms);\n    }\n\n    // Formula -> Number -> Number\n    // gives the maximum depth of a Formula, second parameter is an accumulator\n    function maxDepth(formula, curMax) {\n        if (!isBooleanFormula(formula)) {\n            return curMax;\n        } else {\n            return formula.thenChildren.reduce((acc, child) => Math.max(acc, maxDepth(child, curMax + 1)), curMax + 1);\n        }\n    }\n\n    function countWidth(formula) {\n        if (!isBooleanFormula(formula)) {\n            return 1;\n        } else {\n            return formula.thenChildren.reduce((acc, child) => acc + countWidth(child), 2);\n        }\n    }\n\n\n    // Number -> [Number]\n    // takes a number, returns an array that counts from 1 to that number, input of 0 gives empty array\n    // e.g. countUp(5) -> [1, 2, 3, 4, 5]\n    function countUp(num) {\n        // special case: want an empty array for 0\n        if (num === 0) {\n            return [];\n        } else if (num === 1)\n            return [1];\n        else\n            return [...countUp(num - 1), num];\n    }\n\n    const abyss = props.formulas.reduce((acc, formula) => Math.max(acc, maxDepth(formula, 0)), 0);\n    const numParams = props.params.length;\n\n    const reals = props.formulas.map((formula) => (\n        <th key={formula.key} colSpan={countWidth(formula)} >\n          <div className='flex_horiz'>\n            <ValidatedInput\n              placeholder={'Formula'}\n              dummy={false}\n              isValid={validProg}\n              onValid={(text) => formulaChange({...formula,\n                                                prog: parseCheck(text)},\n                                               formula)}\n              onEmpty={() => formulaChange({...formula,\n                                            prog: yellow},\n                                           formula)}\n            />\n            <RemButton\n              title={'Remove this formula'}\n              onClick={() => remFormula(formula)}\n            />\n          </div>\n        </th>\n    ));\n\n    const dummy = (\n        <th key={peekKey()} colSpan={1}>\n          <div className='flex_horiz'>\n            <ValidatedInput\n              dummy={true}\n              placeholder='Formula'\n              isValid={validProg}\n              onValid={(text) => formulaChange({prog: parseCheck(text),\n                                                outputs: props.examples.map((_) => yellow),\n                                                key: takeKey()},\n                                               {})}\n            />\n          </div>\n        </th>\n    );\n\n    const children = countUp(abyss).map((depth) => (\n        <tr key={depth}>\n          <th colSpan={numParams + 2}>{/* empty cell to align with example RemButton and Parameters */}</th>\n          {props.formulas.map((formula) => (\n              <DepictFormula\n                key={formula.key}\n                formula={formula}\n                depth={depth}\n                numExamples={props.examples.length}\n                formulaChange={(newForm) => formulaChange(newForm, formula)}\n              />\n          ))}\n          {Array(depth).map((_, i) => (<th key={i}>{/* empty cell under some parent dummy formula */}</th>))}\n          <th>{/* empty cell above wants */}</th>\n        </tr>\n    ));\n\n    return (\n        <thead>\n          <tr>\n            <Parameters\n              params={props.params}\n              examples={props.examples}\n              tableNames={props.tableNames}\n              paramsExamplesChange={props.paramsExamplesChange}\n            />\n            {/* top level formulas */}\n            {[...reals, dummy, <th key={peekKey(1)}>{/* empty cell above wants */}</th>]}\n          </tr>\n          {/* rest of formulas */}\n          {children}\n        </thead>\n    );\n}\n\nfunction Parameters(props) {\n    function validParam(text, modParam) {\n        function lookup(name, env) {\n            return env.reduce((acc, variable) => {\n                if (acc) {\n                    return true;\n                }\n\n                return variable.name === name;\n\n            }, false);\n        }\n\n        // These are not technically Variables, see note above\n        let paramVars = props.params.filter((param) => param !== modParam).map((param) => ({name: param.name, binding: null}));\n        let tableVars = props.tableNames.map((name) => ({name: name, binding: null}));\n        let env = [...initEnv, ...tableVars, ...paramVars];\n\n        return varRE.test(text) && !lookup(text, env);\n    }\n\n    function remParam(deadParam) {\n        const deadIndex = props.params.indexOf(deadParam);\n        const aliveParams = props.params.filter((param) => param !== deadParam);\n\n        // need to maintain #inputs = #params\n        const modExamples = props.examples.map((example => ({...example,\n                                                             inputs: example.inputs.filter((_, i) => i !== deadIndex)})));\n\n        props.paramsExamplesChange(aliveParams, modExamples);\n    }\n\n    // String -> Number -> Side Effect\n    // changes the name of the given parameter\n    // if that parameter doesn't exist yet, it makes it\n    function paramChange(newParam, modParam) {\n\n        let alteredParams, alteredExamples;\n        if (props.params.indexOf(modParam) === -1) {\n            alteredParams = [...props.params, newParam];\n            // need to maintain #inputs = #params\n            alteredExamples = props.examples.map((example) => ({...example,\n                                                                inputs: [...example.inputs, {prog: yellow, key: takeKey()}]}));\n        } else {\n            alteredParams = props.params.map((param) => param === modParam ? newParam : param);\n            // examples don't actually change\n            alteredExamples = props.examples;\n        }\n\n        props.paramsExamplesChange(alteredParams, alteredExamples);\n    }\n\n    const reals = props.params.map((param) => (\n        <th key={param.key} >\n          <div className='flex_horiz'>\n            <ValidatedInput\n              dummy={false}\n              placeholder='Parameter'\n              isValid={(text) => validParam(text, param)}\n              onValid={(text) => paramChange({...param,\n                                              name: text},\n                                             param)}\n              onEmpty={() => paramChange({...param,\n                                          name: yellow},\n                                         param)}\n            />\n            <RemButton\n              title='Remove this parameter'\n              onClick={() => remParam(param)}\n            />\n          </div>\n        </th>\n    ));\n\n    const dummy = (\n        <th key={peekKey()}>\n          <div className='flex_horiz'>\n            <ValidatedInput\n              dummy={true}\n              placeholder='Parameter'\n              isValid={(text) => validParam(text, {})}\n              onValid={(text) => paramChange({name: text,\n                                              key: takeKey()},\n                                             {})}\n            />\n          </div>\n        </th>\n    );\n\n    return (\n        <React.Fragment>\n          <th>{/* empty cell to align with example RemButtons */}</th>\n          <React.Fragment>\n            {[...reals, dummy]}\n          </React.Fragment>\n        </React.Fragment>\n    );\n}\n\n/*\n  props: formula, depth, kill, formulaChange\n*/\nfunction DepictFormula(props) {\n    function validProg(text) {\n        let isgood = true;\n\n        try {\n            parseCheck(text);\n        } catch(e) {\n            if (e instanceof SyntaxError) {\n                isgood = false;\n            } else {\n                throw e;\n            }\n        }\n\n        return isgood;\n    }\n\n    // this is pretty macabre...\n    function remChild(deadChild) {\n        const aliveChildren = props.formula.thenChildren.filter((child) => child !== deadChild);\n        props.formulaChange({...props.formula, thenChildren: aliveChildren});\n    }\n\n    function childChange(newChild, modChild) {\n        let children;\n        if (props.formula.thenChildren.indexOf(modChild) === -1) {\n            children = [...props.formula.thenChildren, newChild];\n        } else {\n            children = props.formula.thenChildren.map((child) => child === modChild ? newChild : child);\n        }\n        props.formulaChange({...props.formula, thenChildren: children});\n    }\n\n    function countWidth(formula) {\n        if (!isBooleanFormula(formula)) {\n            return 1;\n        } else {\n            return formula.thenChildren.reduce((acc, child) => acc + countWidth(child), 2);\n        }\n    }\n\n    if (props.depth > 1) {\n        return (\n            <React.Fragment>\n              <th>{/* empty cell to align with parent input */}</th>\n              {isBooleanFormula(props.formula) ?\n               <React.Fragment>\n                 {props.formula.thenChildren.map((child) => (\n                     <DepictFormula\n                       key={child.key}\n                       formula={child}\n                       depth={props.depth - 1}\n                       numExamples={props.numExamples}\n                       formulaChange={(formula) => childChange(formula, child)}\n                     />))}\n                 <th>{/* empty cell to align with child input */}</th>\n               </React.Fragment>\n               : <script/> }\n            </React.Fragment>\n        );\n    } else {\n        if (isBooleanFormula(props.formula)) {\n            const reals = props.formula.thenChildren.map((child) => (\n                <th key={child.key} colSpan={countWidth(child)} >\n                  <div className='flex_horiz'>\n                    <ValidatedInput\n                      dummy={false}\n                      placeholder={'Formula'}\n                      isValid={validProg}\n                      onValid={(text) => childChange({...child,\n                                                      prog: parseCheck(text)},\n                                                     child)}\n                      onEmpty={() => childChange({...child,\n                                                  prog: yellow},\n                                                 child)}\n                    />\n                    <RemButton\n                      title={'Remove this formula'}\n                      onClick={() => remChild(child)}\n                    />\n                  </div>\n                </th>\n            ));\n\n            const dummy = (\n                <th key={peekKey()} colSpan={1}>\n                  <div className='flex_horiz'>\n                    <ValidatedInput\n                      dummy={true}\n                      placeholder='Formula'\n                      isValid={validProg}\n                      onValid={(text) => childChange({prog: parseCheck(text),\n                                                      outputs: Array(props.numExamples).fill(yellow),\n                                                      key: takeKey()},\n                                                     {})}\n                    />\n                  </div>\n                </th>\n            );\n\n            return (\n                <React.Fragment>\n                  <th>{/* empty cell to align with parent input */}</th>\n                   <React.Fragment>\n                     {[...reals, dummy]}\n                   </React.Fragment>\n                </React.Fragment>\n            );\n        } else {\n\n            return (\n                <React.Fragment>\n                  <th>{/* empty cell to align with parent input */}</th>\n                </React.Fragment>\n            );\n        }\n    }\n}\n\nfunction SuccinctBody(props) {\n    function remExample(deadExample) {\n        const deadIndex = props.examples.indexOf(deadExample);\n        // Formula -> Formula\n        // removes the output at deadIndex from the given formula and all of its children (if it has any) so stuff works\n        function removeOutputFromFormula(formula) {\n            let outputs = formula.outputs.filter((_, i) => i !== deadIndex);\n\n            if (isBooleanFormula(formula)) {\n                const thenChildren = formula.thenChildren.map(removeOutputFromFormula);\n                return {...formula,\n                        outputs,\n                        thenChildren};\n            } else {\n                return {...formula,\n                        outputs};\n            }\n        }\n\n\n        const aliveExamples = props.examples.filter((example) => example !== deadExample);\n        const alteredForms = props.formulas.map(removeOutputFromFormula);\n        props.examplesFormulasChange(aliveExamples, alteredForms);\n    }\n\n    function exampleChange(newExample, oldExample) {\n        const exists = props.examples.indexOf(oldExample) !== -1;\n\n        if (newExample === dryRun) {\n            return exists;\n        }\n\n        // Formula -> Formula\n        // adds an init output to the given formula and all of its children (if it has any) so stuff works\n        function addAnotherOutputToFormula(formula) {\n            let outputs = [...formula.outputs, yellow];\n\n            if (isBooleanFormula(formula)) {\n                const thenChildren = formula.thenChildren.map(addAnotherOutputToFormula);\n                return {...formula,\n                        outputs,\n                        thenChildren};\n            } else {\n                return {...formula,\n                        outputs};\n            }\n        }\n\n        let alteredExamples, alteredForms;\n        if (exists) {\n            alteredExamples = props.examples.map((example) => example === oldExample ? newExample : example);\n            alteredForms = props.formulas;\n        } else {\n            alteredExamples = [...props.examples, newExample];\n            alteredForms = props.formulas.map(addAnotherOutputToFormula);\n        }\n\n        props.examplesFormulasChange(alteredExamples, alteredForms);\n        return true; // this doesn't actually do anything\n    }\n\n    const reals = props.examples.map((example, i) => (\n          <tr key={example.key}>\n            <td>\n              <RemButton\n                onClick={() => remExample(example)}\n                title={'Remove this example'}\n              />\n            </td>\n            <Inputs\n              dummy={false}\n              inputs={example.inputs}\n              inputsChange={(inputs) => exampleChange({...example, inputs},\n                                                      example)}\n            />\n            <td>{/* empty cell to align with param dummy input */}</td>\n            <Outputs\n              dummy={false}\n              formulas={props.formulas}\n              want={example.want}\n              row={i}\n            />\n            <td>{/* empty cell to align with top level formula dummy input */}</td>\n            <Want\n              dummy={false}\n              want={example.want}\n              wantChange={(want) => exampleChange({...example, want},\n                                                  example)}\n            />\n          </tr>\n    ));\n    \n    const dummy = (\n          <tr key={peekKey(props.paramNames.length)}>\n            <td>{/* empty cell to offset rembutton */}</td>\n            <Inputs\n              dummy={true}\n              inputs={props.paramNames.map((_, i) => ({key: peekKey(i)}))}\n              inputsChange={(inputs) => exampleChange({inputs,\n                                                       want: yellow,\n                                                       key: takeKey()},\n                                                      {})}\n            />\n            <td>{/* empty cell to align with param dummy input */}</td>\n            <Outputs\n              dummy={true}\n              formulas={props.formulas}\n            />\n            <td>{/* empty cell to align with top level formula dummy input */}</td>\n            <Want\n              dummy={true}\n              wantChange={(want) => exampleChange({want,\n                                                   inputs: props.paramNames.map((_) => ({prog: yellow, key: takeKey()})),\n                                                   key: takeKey()},\n                                                  {})}\n            />\n          </tr>\n    );\n\n    return (\n        <tbody>\n          {[...reals, dummy]}\n        </tbody>\n    );\n}\n\nfunction Inputs(props) {\n    function validProg(text) {\n        try {\n            interp(parseCheck(text), initEnv);\n        } catch(e) {\n            return false;\n        }\n        return true;\n    }\n\n    function inputChange(newInput, oldInput) {\n        let alteredInputs;\n        if (props.dummy) {\n            alteredInputs = props.inputs.map((input) => input === oldInput ? {...newInput, key: takeKey()} : {prog: yellow, key: takeKey()});\n        } else {\n            alteredInputs = props.inputs.map((input) => input === oldInput ? newInput : input);\n        }\n        props.inputsChange(alteredInputs);\n    }\n\n    return (\n        <React.Fragment>\n          {props.inputs.map((input, i) => (\n              <td key={input.key} >\n                <div className='flex_horiz'>\n                  <ValidatedInput\n                    dummy={props.dummy}\n                    placeholder={'Input'}\n                    isValid={validProg}\n                    onValid={props.dummy ?\n                             (text) => inputChange({prog: parseCheck(text)},\n                                                   input)\n                             :\n                             (text) => inputChange({...input,\n                                                    prog: parseCheck(text)},\n                                                   input)}\n                    \n                    onEmpty={() => inputChange({...input,\n                                                prog: yellow},\n                                               input)}\n                  />\n                </div>\n              </td>\n          ))}\n        </React.Fragment>\n    );\n}\n\nfunction Outputs(props) {\n    function countWidth(formula) {\n        if (!isBooleanFormula(formula)) {\n            return 1;\n        } else {\n            return formula.thenChildren.reduce((acc, child) => acc + countWidth(child), 2);\n        }\n    }\n\n    if (props.dummy) {\n        return (\n            <React.Fragment>\n            {props.formulas.map((formula) => (\n                <td key={formula.key} colSpan={countWidth(formula)}>{/* empty cell */}</td>\n            ))}\n            </React.Fragment>\n        );\n    } else {\n        return (\n            <React.Fragment>\n              {props.formulas.map((formula) => (\n                  <React.Fragment key={formula.key}>\n                    <TestCell\n                      output={formula.outputs[props.row]}\n                      want={props.want}\n                    />\n                    {isBooleanFormula(formula) ?\n                     <React.Fragment>\n                       <Outputs\n                         formulas={formula.thenChildren}\n                         want={props.want}\n                         row={props.row}\n                       />\n                       {/* make dummy outputs look like the cell to their left */}\n                       {/* this is pretty jank */}\n                       {formula.thenChildren.length > 0 ?\n                        <DummyCell\n                          output={formula.thenChildren[0].outputs[props.row]}\n                        />\n                        :\n                        <td></td>\n                       }\n                     </React.Fragment>\n                     : <script/> }\n                  </React.Fragment>\n              ))}\n            </React.Fragment>\n        );\n    }\n}\n\nfunction TestCell(props) {\n\n    if (props.output === gray) {\n        return (\n            <td className={'gray'}>\n            </td>\n        );\n    }\n\n    if (props.output === pink) {\n        return (\n            <td className={'pink'}>\n            </td>\n        );\n    }\n\n    if (props.output === yellow) {\n        return (\n            <td className={'yellow'}>\n            </td>\n        );\n    }\n\n    let output = props.output;\n    let want = yellow;\n\n    if (props.want !== yellow) {\n        want = interp(props.want, initEnv);\n    }\n\n    let text, error;\n    if (output instanceof Error) {\n        text = output.message;\n        error = true;\n    } else {\n        text = unparse(output);\n        error = false;\n    }\n\n    let face;\n    if (error) {\n        face = <div title={\"Oh no! You got an error!\"} className=\"alert\">\n                 <Octicon\n                  icon={Alert} size=\"small\" verticalAlign=\"middle\"\n                  ariaLabel='Error!'/>\n               </div>;\n    }else if (want === yellow) { // I should make this better\n        face = '';\n    } else if (deepEquals(output, want)) {\n        face = <div title={\"Yay! It's right!\"} className=\"check\">\n                 <Octicon\n                  icon={Check} size=\"small\" verticalAlign=\"middle\"\n                  ariaLabel='Yay!'/>\n               </div>;\n    } else {\n        face = '';\n    }\n\n    return (\n        <td className={'output'}>\n          {text}\n          {face}\n        </td>\n    );\n}\n\nfunction DummyCell (props) {\n    if (props.output === gray) {\n        return (\n            <td className={'gray'}>\n            </td>\n        );\n    } else if (props.output === pink) {\n        return (\n            <td className={'pink'}>\n            </td>\n        );\n    } else {\n        return <td></td>;\n    }\n}\n\nfunction Want(props) {\n    function validProg(text) {\n        try {\n            interp(parseCheck(text), initEnv);\n        } catch(e) {\n            return false;\n        }\n        return true;\n    }\n\n    let valueCell;\n    if (props.dummy || props.want === yellow) {\n        valueCell = <script/>;\n    } else {\n        let evalWant = interp(props.want, initEnv);\n        if (deepEquals(evalWant, props.want)) {\n            valueCell = <script/>;\n        } else {\n            valueCell = <td>{unparse(evalWant)}</td>;\n        }\n    }\n\n    return (\n        <React.Fragment>\n          <td>\n            <div className='flex_horiz'>\n              <ValidatedInput\n                dummy={props.dummy}\n                placeholder={'Want'}\n                isValid={validProg}\n                onValid={(text) => props.wantChange(parseCheck(text))}\n                onEmpty={() => props.wantChange(yellow)}\n              />\n            </div>\n          </td>\n          {valueCell}\n        </React.Fragment>\n    );\n}\n\n/*\n  notes:\n  #inputs === #params\n  #outputs === #examples\n  ---------------------\n  |#inputs !== #outputs| (well it can but not always)\n  ---------------------\n*/\nclass App extends React.Component {\n    constructor(props){\n        super(props);\n        let tables = [{examples: [{inputs: [{prog: yellow, key: takeKey()}], want: yellow, key: takeKey()}],\n                       formulas: [{prog: yellow, outputs: [yellow], key: takeKey()}],\n                       params: [{name: yellow, key: takeKey()}],\n                       name: yellow,\n                       signature: yellow,\n                       purpose: yellow,\n                       key: takeKey()}];\n        this.state = {tables};\n\n        this.programChange = this.programChange.bind(this);\n    }\n\n    calculate(program) {\n        function makeLookup(table) {\n            function lookup(args) {\n                if (args.length !== table.params.length) {\n                    throw new Error('Arity Mismatch, expected ' + table.params.length + ' argument' + (table.params.length === 1 ? '' : 's'));\n                }\n\n                let expr = table.examples.reduce((acc, example) => {\n                    if (acc !== undefined) {\n                        return acc;\n                    }\n\n                    // I have no idea what should happen if this is called on a table with no params\n                    if (example.inputs.every((input, i) => {\n                        if (input.prog === yellow) {\n                            return false;\n                        }\n                        return deepEquals(interp(input.prog, initEnv), args[i]);\n                    })) {\n                        if (example.want === yellow) {\n                            throw new ReferenceError(`(${table.name} ${args.map(toString).join(' ')}) doesn't have a want`);\n                        } else {\n                            return interp(example.want, initEnv);\n                        }\n                    }\n\n                    return undefined;\n                }, undefined);\n\n                if (expr === undefined) {\n                    // it's like a reference error in the super meta table language\n                    throw new ReferenceError(args.map(toString).join() + ' is not an example in ' + table.name);\n                }\n\n                return expr;\n            }\n\n            return lookup;\n        }\n\n        let lookups = program.map((table) => ({name: table.name, binding: {value: makeLookup(table), type: RFUNCT_T}}));\n        let globalEnv = [...initEnv, ...lookups];\n\n        function calcTable(table) {\n            function calcFormula(formula, examples) {\n                let outputs = examples.map((example) => {\n                    if (example === gray) {\n                        return gray;\n                    } else if (example === pink) {\n                        return pink;\n                    } else if (!example.inputs.every((input) => input.prog !== yellow) || formula.prog === yellow) {\n                        // if any of the inputs or the formula isn't initialized, return yellow\n                        return yellow;\n                    }\n\n                    let localEnv = table.params.map((param, i) => ({name: param.name, binding: interp(example.inputs[i].prog, initEnv)}));\n                    let env = [...globalEnv, ...localEnv];\n\n                    try {\n                        var output = interp(formula.prog, env);\n                    } catch (e) {\n                        output = e;\n                    }\n\n                    return output;\n                });\n\n                if (allBools(outputs) || (formula.thenChildren !== undefined && formula.thenChildren.length !== 0)) {\n                    function maybeSpecial(example, output) {\n                        if (example === gray || output.value === false)\n                            return gray;\n                        else if (typeof output.value !== 'boolean')\n                            return pink;\n                        else\n                            return example;\n                    }\n\n                    if (formula.thenChildren === undefined) {\n                        var thenChildren = [];\n                    } else {\n                        let subExamples = examples.map((example, i) => maybeSpecial(example, outputs[i]));\n                        thenChildren = formula.thenChildren.map((formula) => calcFormula(formula, subExamples));\n                    }\n\n                    return {...formula,\n                            outputs,\n                            thenChildren};\n                } else {\n                    let newFormula = {...formula,\n                                      outputs};\n                    delete newFormula.thenChildren;\n                    return newFormula;\n                }\n            }\n\n            if (table.name === yellow || !table.params.every((param) => param.name !== yellow)) {\n                // if the table or any of the table's parameters don't have a name yet, freeze outputs\n                return {...table}; \n            } else {\n                let formulas = table.formulas.map((formula) => calcFormula(formula, table.examples));\n                return {...table,\n                        formulas};\n            }\n\n        }\n\n        return program.map(calcTable);\n    }\n\n    programChange(newProg) {\n        let calkedProg = this.calculate(newProg);\n        //console.log(calkedProg);\n        //console.log('next key: ', peekKey());\n        this.setState((state) => {\n            return {tables: calkedProg};\n        });\n    }\n\n    render(){\n        let bslField;\n        if (showBSL) {\n            bslField = (\n                <textarea\n                  className='bsl_field'\n                  rows={20}\n                  cols={70}\n                  readOnly={true}\n                  value={toBSL(this.state.tables, toString, 70, 70)}\n                />\n            );\n        } else {\n            bslField = (\n                <textarea\n                  className='bsl_field'\n                  rows={20}\n                  cols={70}\n                  readOnly={true}\n                  value={''}\n                />\n            );\n        }\n\n        return (\n            <div>\n              <Succinct\n                tables={this.state.tables}\n                programChange={this.programChange}\n              />\n              <div className='language_select'>\n                <select\n                  defaultValue='cons'\n                  onChange={(e) => {\n                      if (e.target.value === 'cons'){\n                          toString = toString_cons;\n                          unparse = unparse_cons;\n                      } else {\n                          toString = toString_list;\n                          unparse = unparse_list;\n                      }\n                      // this just rerenders everything, the state remains unchanged\n                      this.setState((state) => state);\n                  }}\n                >\n                  <option value='cons'>Beginning Student</option>\n                  <option value='list'>Beginning Student with List Abbreviations</option>\n                </select>\n              </div>\n              <div className='bsl_io'>\n                <div className='bsl_checkbox'>\n                  <input\n                    type='checkbox'\n                    id='bsl_output'\n                    name='bsl_output'\n                    onChange={(e) => {\n                        showBSL = !showBSL;\n                        // same here, state remains unchanged but everything is rerendered\n                        this.setState((state) => state);\n                    }}\n                  />\n                  <label htmlFor='bsl_output'>Show BSL Output</label>\n                </div>\n                {bslField}\n              </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}